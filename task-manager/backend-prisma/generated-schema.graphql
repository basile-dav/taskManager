# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type Action {
  _count: ActionCount
  created_at: DateTime!
  id: ID!
  name: ActionName!
  notifications(cursor: NotificationWhereUniqueInput, distinct: [NotificationScalarFieldEnum!], orderBy: [NotificationOrderByWithRelationInput!], skip: Int, take: Int, where: NotificationWhereInput): [Notification!]!
  target_id: String!
  target_type: TargetType!
}

type ActionCount {
  notifications: Int!
}

type ActionCountAggregate {
  _all: Int!
  created_at: Int!
  id: Int!
  name: Int!
  target_id: Int!
  target_type: Int!
}

input ActionCountOrderByAggregateInput {
  created_at: SortOrder
  id: SortOrder
  name: SortOrder
  target_id: SortOrder
  target_type: SortOrder
}

input ActionCreateInput {
  created_at: DateTime!
  id: String
  name: ActionName!
  notifications: NotificationCreateNestedManyWithoutActionInput
  target_id: String!
  target_type: TargetType!
}

input ActionCreateManyInput {
  created_at: DateTime!
  id: String
  name: ActionName!
  target_id: String!
  target_type: TargetType!
}

input ActionCreateNestedOneWithoutNotificationsInput {
  connect: ActionWhereUniqueInput
  connectOrCreate: ActionCreateOrConnectWithoutNotificationsInput
  create: ActionCreateWithoutNotificationsInput
}

input ActionCreateOrConnectWithoutNotificationsInput {
  create: ActionCreateWithoutNotificationsInput!
  where: ActionWhereUniqueInput!
}

input ActionCreateWithoutNotificationsInput {
  created_at: DateTime!
  id: String
  name: ActionName!
  target_id: String!
  target_type: TargetType!
}

type ActionGroupBy {
  _count: ActionCountAggregate
  _max: ActionMaxAggregate
  _min: ActionMinAggregate
  created_at: DateTime!
  id: String!
  name: ActionName!
  target_id: String!
  target_type: TargetType!
}

type ActionMaxAggregate {
  created_at: DateTime
  id: String
  name: ActionName
  target_id: String
  target_type: TargetType
}

input ActionMaxOrderByAggregateInput {
  created_at: SortOrder
  id: SortOrder
  name: SortOrder
  target_id: SortOrder
  target_type: SortOrder
}

type ActionMinAggregate {
  created_at: DateTime
  id: String
  name: ActionName
  target_id: String
  target_type: TargetType
}

input ActionMinOrderByAggregateInput {
  created_at: SortOrder
  id: SortOrder
  name: SortOrder
  target_id: SortOrder
  target_type: SortOrder
}

enum ActionName {
  COMMENT_CREATE
  COMMENT_DELETE
  COMMENT_REPLY
  TASK_ASSIGNEE
  TASK_CREATE
  TASK_DELETE
}

input ActionOrderByWithAggregationInput {
  _count: ActionCountOrderByAggregateInput
  _max: ActionMaxOrderByAggregateInput
  _min: ActionMinOrderByAggregateInput
  created_at: SortOrder
  id: SortOrder
  name: SortOrder
  target_id: SortOrder
  target_type: SortOrder
}

input ActionOrderByWithRelationInput {
  created_at: SortOrder
  id: SortOrder
  name: SortOrder
  notifications: NotificationOrderByRelationAggregateInput
  target_id: SortOrder
  target_type: SortOrder
}

input ActionRelationFilter {
  is: ActionWhereInput
  isNot: ActionWhereInput
}

enum ActionScalarFieldEnum {
  created_at
  id
  name
  target_id
  target_type
}

input ActionScalarWhereWithAggregatesInput {
  AND: [ActionScalarWhereWithAggregatesInput!]
  NOT: [ActionScalarWhereWithAggregatesInput!]
  OR: [ActionScalarWhereWithAggregatesInput!]
  created_at: DateTimeWithAggregatesFilter
  id: StringWithAggregatesFilter
  name: EnumActionNameWithAggregatesFilter
  target_id: StringWithAggregatesFilter
  target_type: EnumTargetTypeWithAggregatesFilter
}

input ActionUpdateInput {
  created_at: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  name: EnumActionNameFieldUpdateOperationsInput
  notifications: NotificationUpdateManyWithoutActionNestedInput
  target_id: StringFieldUpdateOperationsInput
  target_type: EnumTargetTypeFieldUpdateOperationsInput
}

input ActionUpdateManyMutationInput {
  created_at: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  name: EnumActionNameFieldUpdateOperationsInput
  target_id: StringFieldUpdateOperationsInput
  target_type: EnumTargetTypeFieldUpdateOperationsInput
}

input ActionUpdateOneRequiredWithoutNotificationsNestedInput {
  connect: ActionWhereUniqueInput
  connectOrCreate: ActionCreateOrConnectWithoutNotificationsInput
  create: ActionCreateWithoutNotificationsInput
  update: ActionUpdateWithoutNotificationsInput
  upsert: ActionUpsertWithoutNotificationsInput
}

input ActionUpdateWithoutNotificationsInput {
  created_at: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  name: EnumActionNameFieldUpdateOperationsInput
  target_id: StringFieldUpdateOperationsInput
  target_type: EnumTargetTypeFieldUpdateOperationsInput
}

input ActionUpsertWithoutNotificationsInput {
  create: ActionCreateWithoutNotificationsInput!
  update: ActionUpdateWithoutNotificationsInput!
}

input ActionWhereInput {
  AND: [ActionWhereInput!]
  NOT: [ActionWhereInput!]
  OR: [ActionWhereInput!]
  created_at: DateTimeFilter
  id: StringFilter
  name: EnumActionNameFilter
  notifications: NotificationListRelationFilter
  target_id: StringFilter
  target_type: EnumTargetTypeFilter
}

input ActionWhereUniqueInput {
  id: String
}

type AffectedRowsOutput {
  count: Int!
}

type AggregateAction {
  _count: ActionCountAggregate
  _max: ActionMaxAggregate
  _min: ActionMinAggregate
}

type AggregateAssignee {
  _count: AssigneeCountAggregate
  _max: AssigneeMaxAggregate
  _min: AssigneeMinAggregate
}

type AggregateComment {
  _count: CommentCountAggregate
  _max: CommentMaxAggregate
  _min: CommentMinAggregate
}

type AggregateNotification {
  _count: NotificationCountAggregate
  _max: NotificationMaxAggregate
  _min: NotificationMinAggregate
}

type AggregateTask {
  _count: TaskCountAggregate
  _max: TaskMaxAggregate
  _min: TaskMinAggregate
}

type AggregateUser {
  _count: UserCountAggregate
  _max: UserMaxAggregate
  _min: UserMinAggregate
}

type Assignee {
  Task: Task!
  User: User!
  created_at: DateTime!
  id: ID!
  task_id: String!
  user_id: String!
}

type AssigneeCountAggregate {
  _all: Int!
  created_at: Int!
  id: Int!
  task_id: Int!
  user_id: Int!
}

input AssigneeCountOrderByAggregateInput {
  created_at: SortOrder
  id: SortOrder
  task_id: SortOrder
  user_id: SortOrder
}

input AssigneeCreateInput {
  Task: TaskCreateNestedOneWithoutAssigneesInput!
  User: UserCreateNestedOneWithoutAssigneesInput!
  created_at: DateTime!
  id: String
}

input AssigneeCreateManyInput {
  created_at: DateTime!
  id: String
  task_id: String!
  user_id: String!
}

input AssigneeCreateManyTaskInput {
  created_at: DateTime!
  id: String
  user_id: String!
}

input AssigneeCreateManyTaskInputEnvelope {
  data: [AssigneeCreateManyTaskInput!]!
  skipDuplicates: Boolean
}

input AssigneeCreateManyUserInput {
  created_at: DateTime!
  id: String
  task_id: String!
}

input AssigneeCreateManyUserInputEnvelope {
  data: [AssigneeCreateManyUserInput!]!
  skipDuplicates: Boolean
}

input AssigneeCreateNestedManyWithoutTaskInput {
  connect: [AssigneeWhereUniqueInput!]
  connectOrCreate: [AssigneeCreateOrConnectWithoutTaskInput!]
  create: [AssigneeCreateWithoutTaskInput!]
  createMany: AssigneeCreateManyTaskInputEnvelope
}

input AssigneeCreateNestedManyWithoutUserInput {
  connect: [AssigneeWhereUniqueInput!]
  connectOrCreate: [AssigneeCreateOrConnectWithoutUserInput!]
  create: [AssigneeCreateWithoutUserInput!]
  createMany: AssigneeCreateManyUserInputEnvelope
}

input AssigneeCreateOrConnectWithoutTaskInput {
  create: AssigneeCreateWithoutTaskInput!
  where: AssigneeWhereUniqueInput!
}

input AssigneeCreateOrConnectWithoutUserInput {
  create: AssigneeCreateWithoutUserInput!
  where: AssigneeWhereUniqueInput!
}

input AssigneeCreateWithoutTaskInput {
  User: UserCreateNestedOneWithoutAssigneesInput!
  created_at: DateTime!
  id: String
}

input AssigneeCreateWithoutUserInput {
  Task: TaskCreateNestedOneWithoutAssigneesInput!
  created_at: DateTime!
  id: String
}

type AssigneeGroupBy {
  _count: AssigneeCountAggregate
  _max: AssigneeMaxAggregate
  _min: AssigneeMinAggregate
  created_at: DateTime!
  id: String!
  task_id: String!
  user_id: String!
}

input AssigneeListRelationFilter {
  every: AssigneeWhereInput
  none: AssigneeWhereInput
  some: AssigneeWhereInput
}

type AssigneeMaxAggregate {
  created_at: DateTime
  id: String
  task_id: String
  user_id: String
}

input AssigneeMaxOrderByAggregateInput {
  created_at: SortOrder
  id: SortOrder
  task_id: SortOrder
  user_id: SortOrder
}

type AssigneeMinAggregate {
  created_at: DateTime
  id: String
  task_id: String
  user_id: String
}

input AssigneeMinOrderByAggregateInput {
  created_at: SortOrder
  id: SortOrder
  task_id: SortOrder
  user_id: SortOrder
}

input AssigneeOrderByRelationAggregateInput {
  _count: SortOrder
}

input AssigneeOrderByWithAggregationInput {
  _count: AssigneeCountOrderByAggregateInput
  _max: AssigneeMaxOrderByAggregateInput
  _min: AssigneeMinOrderByAggregateInput
  created_at: SortOrder
  id: SortOrder
  task_id: SortOrder
  user_id: SortOrder
}

input AssigneeOrderByWithRelationInput {
  Task: TaskOrderByWithRelationInput
  User: UserOrderByWithRelationInput
  created_at: SortOrder
  id: SortOrder
  task_id: SortOrder
  user_id: SortOrder
}

enum AssigneeScalarFieldEnum {
  created_at
  id
  task_id
  user_id
}

input AssigneeScalarWhereInput {
  AND: [AssigneeScalarWhereInput!]
  NOT: [AssigneeScalarWhereInput!]
  OR: [AssigneeScalarWhereInput!]
  created_at: DateTimeFilter
  id: StringFilter
  task_id: StringFilter
  user_id: StringFilter
}

input AssigneeScalarWhereWithAggregatesInput {
  AND: [AssigneeScalarWhereWithAggregatesInput!]
  NOT: [AssigneeScalarWhereWithAggregatesInput!]
  OR: [AssigneeScalarWhereWithAggregatesInput!]
  created_at: DateTimeWithAggregatesFilter
  id: StringWithAggregatesFilter
  task_id: StringWithAggregatesFilter
  user_id: StringWithAggregatesFilter
}

input AssigneeUpdateInput {
  Task: TaskUpdateOneRequiredWithoutAssigneesNestedInput
  User: UserUpdateOneRequiredWithoutAssigneesNestedInput
  created_at: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
}

input AssigneeUpdateManyMutationInput {
  created_at: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
}

input AssigneeUpdateManyWithWhereWithoutTaskInput {
  data: AssigneeUpdateManyMutationInput!
  where: AssigneeScalarWhereInput!
}

input AssigneeUpdateManyWithWhereWithoutUserInput {
  data: AssigneeUpdateManyMutationInput!
  where: AssigneeScalarWhereInput!
}

input AssigneeUpdateManyWithoutTaskNestedInput {
  connect: [AssigneeWhereUniqueInput!]
  connectOrCreate: [AssigneeCreateOrConnectWithoutTaskInput!]
  create: [AssigneeCreateWithoutTaskInput!]
  createMany: AssigneeCreateManyTaskInputEnvelope
  delete: [AssigneeWhereUniqueInput!]
  deleteMany: [AssigneeScalarWhereInput!]
  disconnect: [AssigneeWhereUniqueInput!]
  set: [AssigneeWhereUniqueInput!]
  update: [AssigneeUpdateWithWhereUniqueWithoutTaskInput!]
  updateMany: [AssigneeUpdateManyWithWhereWithoutTaskInput!]
  upsert: [AssigneeUpsertWithWhereUniqueWithoutTaskInput!]
}

input AssigneeUpdateManyWithoutUserNestedInput {
  connect: [AssigneeWhereUniqueInput!]
  connectOrCreate: [AssigneeCreateOrConnectWithoutUserInput!]
  create: [AssigneeCreateWithoutUserInput!]
  createMany: AssigneeCreateManyUserInputEnvelope
  delete: [AssigneeWhereUniqueInput!]
  deleteMany: [AssigneeScalarWhereInput!]
  disconnect: [AssigneeWhereUniqueInput!]
  set: [AssigneeWhereUniqueInput!]
  update: [AssigneeUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [AssigneeUpdateManyWithWhereWithoutUserInput!]
  upsert: [AssigneeUpsertWithWhereUniqueWithoutUserInput!]
}

input AssigneeUpdateWithWhereUniqueWithoutTaskInput {
  data: AssigneeUpdateWithoutTaskInput!
  where: AssigneeWhereUniqueInput!
}

input AssigneeUpdateWithWhereUniqueWithoutUserInput {
  data: AssigneeUpdateWithoutUserInput!
  where: AssigneeWhereUniqueInput!
}

input AssigneeUpdateWithoutTaskInput {
  User: UserUpdateOneRequiredWithoutAssigneesNestedInput
  created_at: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
}

input AssigneeUpdateWithoutUserInput {
  Task: TaskUpdateOneRequiredWithoutAssigneesNestedInput
  created_at: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
}

input AssigneeUpsertWithWhereUniqueWithoutTaskInput {
  create: AssigneeCreateWithoutTaskInput!
  update: AssigneeUpdateWithoutTaskInput!
  where: AssigneeWhereUniqueInput!
}

input AssigneeUpsertWithWhereUniqueWithoutUserInput {
  create: AssigneeCreateWithoutUserInput!
  update: AssigneeUpdateWithoutUserInput!
  where: AssigneeWhereUniqueInput!
}

input AssigneeWhereInput {
  AND: [AssigneeWhereInput!]
  NOT: [AssigneeWhereInput!]
  OR: [AssigneeWhereInput!]
  Task: TaskRelationFilter
  User: UserRelationFilter
  created_at: DateTimeFilter
  id: StringFilter
  task_id: StringFilter
  user_id: StringFilter
}

input AssigneeWhereUniqueInput {
  id: String
}

input BoolFieldUpdateOperationsInput {
  set: Boolean
}

input BoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

input BoolWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedBoolFilter
  _min: NestedBoolFilter
  equals: Boolean
  not: NestedBoolWithAggregatesFilter
}

type Comment {
  Parent: String!
  Target: Task!
  content: String!
  created_at: DateTime!
  id: ID!
  owner: User!
  owner_id: String!
  parent_id: String!
  target_id: String!
  target_type: Target!
  updated_at: DateTime!
}

type CommentCountAggregate {
  Parent: Int!
  _all: Int!
  content: Int!
  created_at: Int!
  id: Int!
  owner_id: Int!
  parent_id: Int!
  target_id: Int!
  target_type: Int!
  updated_at: Int!
}

input CommentCountOrderByAggregateInput {
  Parent: SortOrder
  content: SortOrder
  created_at: SortOrder
  id: SortOrder
  owner_id: SortOrder
  parent_id: SortOrder
  target_id: SortOrder
  target_type: SortOrder
  updated_at: SortOrder
}

input CommentCreateInput {
  Parent: String!
  Target: TaskCreateNestedOneWithoutCommentsInput!
  content: String!
  created_at: DateTime!
  id: String
  owner: UserCreateNestedOneWithoutCommentsInput!
  parent_id: String!
  target_type: Target
  updated_at: DateTime!
}

input CommentCreateManyInput {
  Parent: String!
  content: String!
  created_at: DateTime!
  id: String
  owner_id: String!
  parent_id: String!
  target_id: String!
  target_type: Target
  updated_at: DateTime!
}

input CommentCreateManyOwnerInput {
  Parent: String!
  content: String!
  created_at: DateTime!
  id: String
  parent_id: String!
  target_id: String!
  target_type: Target
  updated_at: DateTime!
}

input CommentCreateManyOwnerInputEnvelope {
  data: [CommentCreateManyOwnerInput!]!
  skipDuplicates: Boolean
}

input CommentCreateManyTargetInput {
  Parent: String!
  content: String!
  created_at: DateTime!
  id: String
  owner_id: String!
  parent_id: String!
  target_type: Target
  updated_at: DateTime!
}

input CommentCreateManyTargetInputEnvelope {
  data: [CommentCreateManyTargetInput!]!
  skipDuplicates: Boolean
}

input CommentCreateNestedManyWithoutOwnerInput {
  connect: [CommentWhereUniqueInput!]
  connectOrCreate: [CommentCreateOrConnectWithoutOwnerInput!]
  create: [CommentCreateWithoutOwnerInput!]
  createMany: CommentCreateManyOwnerInputEnvelope
}

input CommentCreateNestedManyWithoutTargetInput {
  connect: [CommentWhereUniqueInput!]
  connectOrCreate: [CommentCreateOrConnectWithoutTargetInput!]
  create: [CommentCreateWithoutTargetInput!]
  createMany: CommentCreateManyTargetInputEnvelope
}

input CommentCreateOrConnectWithoutOwnerInput {
  create: CommentCreateWithoutOwnerInput!
  where: CommentWhereUniqueInput!
}

input CommentCreateOrConnectWithoutTargetInput {
  create: CommentCreateWithoutTargetInput!
  where: CommentWhereUniqueInput!
}

input CommentCreateWithoutOwnerInput {
  Parent: String!
  Target: TaskCreateNestedOneWithoutCommentsInput!
  content: String!
  created_at: DateTime!
  id: String
  parent_id: String!
  target_type: Target
  updated_at: DateTime!
}

input CommentCreateWithoutTargetInput {
  Parent: String!
  content: String!
  created_at: DateTime!
  id: String
  owner: UserCreateNestedOneWithoutCommentsInput!
  parent_id: String!
  target_type: Target
  updated_at: DateTime!
}

type CommentGroupBy {
  Parent: String!
  _count: CommentCountAggregate
  _max: CommentMaxAggregate
  _min: CommentMinAggregate
  content: String!
  created_at: DateTime!
  id: String!
  owner_id: String!
  parent_id: String!
  target_id: String!
  target_type: Target!
  updated_at: DateTime!
}

input CommentListRelationFilter {
  every: CommentWhereInput
  none: CommentWhereInput
  some: CommentWhereInput
}

type CommentMaxAggregate {
  Parent: String
  content: String
  created_at: DateTime
  id: String
  owner_id: String
  parent_id: String
  target_id: String
  target_type: Target
  updated_at: DateTime
}

input CommentMaxOrderByAggregateInput {
  Parent: SortOrder
  content: SortOrder
  created_at: SortOrder
  id: SortOrder
  owner_id: SortOrder
  parent_id: SortOrder
  target_id: SortOrder
  target_type: SortOrder
  updated_at: SortOrder
}

type CommentMinAggregate {
  Parent: String
  content: String
  created_at: DateTime
  id: String
  owner_id: String
  parent_id: String
  target_id: String
  target_type: Target
  updated_at: DateTime
}

input CommentMinOrderByAggregateInput {
  Parent: SortOrder
  content: SortOrder
  created_at: SortOrder
  id: SortOrder
  owner_id: SortOrder
  parent_id: SortOrder
  target_id: SortOrder
  target_type: SortOrder
  updated_at: SortOrder
}

input CommentOrderByRelationAggregateInput {
  _count: SortOrder
}

input CommentOrderByWithAggregationInput {
  Parent: SortOrder
  _count: CommentCountOrderByAggregateInput
  _max: CommentMaxOrderByAggregateInput
  _min: CommentMinOrderByAggregateInput
  content: SortOrder
  created_at: SortOrder
  id: SortOrder
  owner_id: SortOrder
  parent_id: SortOrder
  target_id: SortOrder
  target_type: SortOrder
  updated_at: SortOrder
}

input CommentOrderByWithRelationInput {
  Parent: SortOrder
  Target: TaskOrderByWithRelationInput
  content: SortOrder
  created_at: SortOrder
  id: SortOrder
  owner: UserOrderByWithRelationInput
  owner_id: SortOrder
  parent_id: SortOrder
  target_id: SortOrder
  target_type: SortOrder
  updated_at: SortOrder
}

enum CommentScalarFieldEnum {
  Parent
  content
  created_at
  id
  owner_id
  parent_id
  target_id
  target_type
  updated_at
}

input CommentScalarWhereInput {
  AND: [CommentScalarWhereInput!]
  NOT: [CommentScalarWhereInput!]
  OR: [CommentScalarWhereInput!]
  Parent: StringFilter
  content: StringFilter
  created_at: DateTimeFilter
  id: StringFilter
  owner_id: StringFilter
  parent_id: StringFilter
  target_id: StringFilter
  target_type: EnumTargetFilter
  updated_at: DateTimeFilter
}

input CommentScalarWhereWithAggregatesInput {
  AND: [CommentScalarWhereWithAggregatesInput!]
  NOT: [CommentScalarWhereWithAggregatesInput!]
  OR: [CommentScalarWhereWithAggregatesInput!]
  Parent: StringWithAggregatesFilter
  content: StringWithAggregatesFilter
  created_at: DateTimeWithAggregatesFilter
  id: StringWithAggregatesFilter
  owner_id: StringWithAggregatesFilter
  parent_id: StringWithAggregatesFilter
  target_id: StringWithAggregatesFilter
  target_type: EnumTargetWithAggregatesFilter
  updated_at: DateTimeWithAggregatesFilter
}

input CommentUpdateInput {
  Parent: StringFieldUpdateOperationsInput
  Target: TaskUpdateOneRequiredWithoutCommentsNestedInput
  content: StringFieldUpdateOperationsInput
  created_at: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  owner: UserUpdateOneRequiredWithoutCommentsNestedInput
  parent_id: StringFieldUpdateOperationsInput
  target_type: EnumTargetFieldUpdateOperationsInput
  updated_at: DateTimeFieldUpdateOperationsInput
}

input CommentUpdateManyMutationInput {
  Parent: StringFieldUpdateOperationsInput
  content: StringFieldUpdateOperationsInput
  created_at: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  parent_id: StringFieldUpdateOperationsInput
  target_type: EnumTargetFieldUpdateOperationsInput
  updated_at: DateTimeFieldUpdateOperationsInput
}

input CommentUpdateManyWithWhereWithoutOwnerInput {
  data: CommentUpdateManyMutationInput!
  where: CommentScalarWhereInput!
}

input CommentUpdateManyWithWhereWithoutTargetInput {
  data: CommentUpdateManyMutationInput!
  where: CommentScalarWhereInput!
}

input CommentUpdateManyWithoutOwnerNestedInput {
  connect: [CommentWhereUniqueInput!]
  connectOrCreate: [CommentCreateOrConnectWithoutOwnerInput!]
  create: [CommentCreateWithoutOwnerInput!]
  createMany: CommentCreateManyOwnerInputEnvelope
  delete: [CommentWhereUniqueInput!]
  deleteMany: [CommentScalarWhereInput!]
  disconnect: [CommentWhereUniqueInput!]
  set: [CommentWhereUniqueInput!]
  update: [CommentUpdateWithWhereUniqueWithoutOwnerInput!]
  updateMany: [CommentUpdateManyWithWhereWithoutOwnerInput!]
  upsert: [CommentUpsertWithWhereUniqueWithoutOwnerInput!]
}

input CommentUpdateManyWithoutTargetNestedInput {
  connect: [CommentWhereUniqueInput!]
  connectOrCreate: [CommentCreateOrConnectWithoutTargetInput!]
  create: [CommentCreateWithoutTargetInput!]
  createMany: CommentCreateManyTargetInputEnvelope
  delete: [CommentWhereUniqueInput!]
  deleteMany: [CommentScalarWhereInput!]
  disconnect: [CommentWhereUniqueInput!]
  set: [CommentWhereUniqueInput!]
  update: [CommentUpdateWithWhereUniqueWithoutTargetInput!]
  updateMany: [CommentUpdateManyWithWhereWithoutTargetInput!]
  upsert: [CommentUpsertWithWhereUniqueWithoutTargetInput!]
}

input CommentUpdateWithWhereUniqueWithoutOwnerInput {
  data: CommentUpdateWithoutOwnerInput!
  where: CommentWhereUniqueInput!
}

input CommentUpdateWithWhereUniqueWithoutTargetInput {
  data: CommentUpdateWithoutTargetInput!
  where: CommentWhereUniqueInput!
}

input CommentUpdateWithoutOwnerInput {
  Parent: StringFieldUpdateOperationsInput
  Target: TaskUpdateOneRequiredWithoutCommentsNestedInput
  content: StringFieldUpdateOperationsInput
  created_at: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  parent_id: StringFieldUpdateOperationsInput
  target_type: EnumTargetFieldUpdateOperationsInput
  updated_at: DateTimeFieldUpdateOperationsInput
}

input CommentUpdateWithoutTargetInput {
  Parent: StringFieldUpdateOperationsInput
  content: StringFieldUpdateOperationsInput
  created_at: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  owner: UserUpdateOneRequiredWithoutCommentsNestedInput
  parent_id: StringFieldUpdateOperationsInput
  target_type: EnumTargetFieldUpdateOperationsInput
  updated_at: DateTimeFieldUpdateOperationsInput
}

input CommentUpsertWithWhereUniqueWithoutOwnerInput {
  create: CommentCreateWithoutOwnerInput!
  update: CommentUpdateWithoutOwnerInput!
  where: CommentWhereUniqueInput!
}

input CommentUpsertWithWhereUniqueWithoutTargetInput {
  create: CommentCreateWithoutTargetInput!
  update: CommentUpdateWithoutTargetInput!
  where: CommentWhereUniqueInput!
}

input CommentWhereInput {
  AND: [CommentWhereInput!]
  NOT: [CommentWhereInput!]
  OR: [CommentWhereInput!]
  Parent: StringFilter
  Target: TaskRelationFilter
  content: StringFilter
  created_at: DateTimeFilter
  id: StringFilter
  owner: UserRelationFilter
  owner_id: StringFilter
  parent_id: StringFilter
  target_id: StringFilter
  target_type: EnumTargetFilter
  updated_at: DateTimeFilter
}

input CommentWhereUniqueInput {
  id: String
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

input DateTimeFieldUpdateOperationsInput {
  set: DateTime
}

input DateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input DateTimeWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedDateTimeFilter
  _min: NestedDateTimeFilter
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeWithAggregatesFilter
  notIn: [DateTime!]
}

input EnumActionNameFieldUpdateOperationsInput {
  set: ActionName
}

input EnumActionNameFilter {
  equals: ActionName
  in: [ActionName!]
  not: NestedEnumActionNameFilter
  notIn: [ActionName!]
}

input EnumActionNameWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedEnumActionNameFilter
  _min: NestedEnumActionNameFilter
  equals: ActionName
  in: [ActionName!]
  not: NestedEnumActionNameWithAggregatesFilter
  notIn: [ActionName!]
}

input EnumStateFieldUpdateOperationsInput {
  set: State
}

input EnumStateFilter {
  equals: State
  in: [State!]
  not: NestedEnumStateFilter
  notIn: [State!]
}

input EnumStateWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedEnumStateFilter
  _min: NestedEnumStateFilter
  equals: State
  in: [State!]
  not: NestedEnumStateWithAggregatesFilter
  notIn: [State!]
}

input EnumTargetFieldUpdateOperationsInput {
  set: Target
}

input EnumTargetFilter {
  equals: Target
  in: [Target!]
  not: NestedEnumTargetFilter
  notIn: [Target!]
}

input EnumTargetTypeFieldUpdateOperationsInput {
  set: TargetType
}

input EnumTargetTypeFilter {
  equals: TargetType
  in: [TargetType!]
  not: NestedEnumTargetTypeFilter
  notIn: [TargetType!]
}

input EnumTargetTypeWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedEnumTargetTypeFilter
  _min: NestedEnumTargetTypeFilter
  equals: TargetType
  in: [TargetType!]
  not: NestedEnumTargetTypeWithAggregatesFilter
  notIn: [TargetType!]
}

input EnumTargetWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedEnumTargetFilter
  _min: NestedEnumTargetFilter
  equals: Target
  in: [Target!]
  not: NestedEnumTargetWithAggregatesFilter
  notIn: [Target!]
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

input JsonFilter {
  array_contains: JSON
  array_ends_with: JSON
  array_starts_with: JSON
  equals: JSON
  gt: JSON
  gte: JSON
  lt: JSON
  lte: JSON
  not: JSON
  path: [String!]
  string_contains: String
  string_ends_with: String
  string_starts_with: String
}

input JsonWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedJsonFilter
  _min: NestedJsonFilter
  array_contains: JSON
  array_ends_with: JSON
  array_starts_with: JSON
  equals: JSON
  gt: JSON
  gte: JSON
  lt: JSON
  lte: JSON
  not: JSON
  path: [String!]
  string_contains: String
  string_ends_with: String
  string_starts_with: String
}

type Mutation {
  createManyAction(data: [ActionCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyAssignee(data: [AssigneeCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyComment(data: [CommentCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyNotification(data: [NotificationCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyTask(data: [TaskCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyUser(data: [UserCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createOneAction(data: ActionCreateInput!): Action!
  createOneAssignee(data: AssigneeCreateInput!): Assignee!
  createOneComment(data: CommentCreateInput!): Comment!
  createOneNotification(data: NotificationCreateInput!): Notification!
  createOneTask(data: TaskCreateInput!): Task!
  createOneUser(data: UserCreateInput!): User!
  deleteManyAction(where: ActionWhereInput): AffectedRowsOutput!
  deleteManyAssignee(where: AssigneeWhereInput): AffectedRowsOutput!
  deleteManyComment(where: CommentWhereInput): AffectedRowsOutput!
  deleteManyNotification(where: NotificationWhereInput): AffectedRowsOutput!
  deleteManyTask(where: TaskWhereInput): AffectedRowsOutput!
  deleteManyUser(where: UserWhereInput): AffectedRowsOutput!
  deleteOneAction(where: ActionWhereUniqueInput!): Action
  deleteOneAssignee(where: AssigneeWhereUniqueInput!): Assignee
  deleteOneComment(where: CommentWhereUniqueInput!): Comment
  deleteOneNotification(where: NotificationWhereUniqueInput!): Notification
  deleteOneTask(where: TaskWhereUniqueInput!): Task
  deleteOneUser(where: UserWhereUniqueInput!): User
  updateManyAction(data: ActionUpdateManyMutationInput!, where: ActionWhereInput): AffectedRowsOutput!
  updateManyAssignee(data: AssigneeUpdateManyMutationInput!, where: AssigneeWhereInput): AffectedRowsOutput!
  updateManyComment(data: CommentUpdateManyMutationInput!, where: CommentWhereInput): AffectedRowsOutput!
  updateManyNotification(data: NotificationUpdateManyMutationInput!, where: NotificationWhereInput): AffectedRowsOutput!
  updateManyTask(data: TaskUpdateManyMutationInput!, where: TaskWhereInput): AffectedRowsOutput!
  updateManyUser(data: UserUpdateManyMutationInput!, where: UserWhereInput): AffectedRowsOutput!
  updateOneAction(data: ActionUpdateInput!, where: ActionWhereUniqueInput!): Action
  updateOneAssignee(data: AssigneeUpdateInput!, where: AssigneeWhereUniqueInput!): Assignee
  updateOneComment(data: CommentUpdateInput!, where: CommentWhereUniqueInput!): Comment
  updateOneNotification(data: NotificationUpdateInput!, where: NotificationWhereUniqueInput!): Notification
  updateOneTask(data: TaskUpdateInput!, where: TaskWhereUniqueInput!): Task
  updateOneUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  upsertOneAction(create: ActionCreateInput!, update: ActionUpdateInput!, where: ActionWhereUniqueInput!): Action!
  upsertOneAssignee(create: AssigneeCreateInput!, update: AssigneeUpdateInput!, where: AssigneeWhereUniqueInput!): Assignee!
  upsertOneComment(create: CommentCreateInput!, update: CommentUpdateInput!, where: CommentWhereUniqueInput!): Comment!
  upsertOneNotification(create: NotificationCreateInput!, update: NotificationUpdateInput!, where: NotificationWhereUniqueInput!): Notification!
  upsertOneTask(create: TaskCreateInput!, update: TaskUpdateInput!, where: TaskWhereUniqueInput!): Task!
  upsertOneUser(create: UserCreateInput!, update: UserUpdateInput!, where: UserWhereUniqueInput!): User!
}

input NestedBoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

input NestedBoolWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedBoolFilter
  _min: NestedBoolFilter
  equals: Boolean
  not: NestedBoolWithAggregatesFilter
}

input NestedDateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input NestedDateTimeWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedDateTimeFilter
  _min: NestedDateTimeFilter
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeWithAggregatesFilter
  notIn: [DateTime!]
}

input NestedEnumActionNameFilter {
  equals: ActionName
  in: [ActionName!]
  not: NestedEnumActionNameFilter
  notIn: [ActionName!]
}

input NestedEnumActionNameWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedEnumActionNameFilter
  _min: NestedEnumActionNameFilter
  equals: ActionName
  in: [ActionName!]
  not: NestedEnumActionNameWithAggregatesFilter
  notIn: [ActionName!]
}

input NestedEnumStateFilter {
  equals: State
  in: [State!]
  not: NestedEnumStateFilter
  notIn: [State!]
}

input NestedEnumStateWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedEnumStateFilter
  _min: NestedEnumStateFilter
  equals: State
  in: [State!]
  not: NestedEnumStateWithAggregatesFilter
  notIn: [State!]
}

input NestedEnumTargetFilter {
  equals: Target
  in: [Target!]
  not: NestedEnumTargetFilter
  notIn: [Target!]
}

input NestedEnumTargetTypeFilter {
  equals: TargetType
  in: [TargetType!]
  not: NestedEnumTargetTypeFilter
  notIn: [TargetType!]
}

input NestedEnumTargetTypeWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedEnumTargetTypeFilter
  _min: NestedEnumTargetTypeFilter
  equals: TargetType
  in: [TargetType!]
  not: NestedEnumTargetTypeWithAggregatesFilter
  notIn: [TargetType!]
}

input NestedEnumTargetWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedEnumTargetFilter
  _min: NestedEnumTargetFilter
  equals: Target
  in: [Target!]
  not: NestedEnumTargetWithAggregatesFilter
  notIn: [Target!]
}

input NestedIntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input NestedJsonFilter {
  array_contains: JSON
  array_ends_with: JSON
  array_starts_with: JSON
  equals: JSON
  gt: JSON
  gte: JSON
  lt: JSON
  lte: JSON
  not: JSON
  path: [String!]
  string_contains: String
  string_ends_with: String
  string_starts_with: String
}

input NestedStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input NestedStringWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedStringFilter
  _min: NestedStringFilter
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringWithAggregatesFilter
  notIn: [String!]
  startsWith: String
}

type Notification {
  Action: Action!
  User: User!
  action_id: String!
  id: ID!
  readed_at: DateTime!
  user_id: String!
}

type NotificationCountAggregate {
  _all: Int!
  action_id: Int!
  id: Int!
  readed_at: Int!
  user_id: Int!
}

input NotificationCountOrderByAggregateInput {
  action_id: SortOrder
  id: SortOrder
  readed_at: SortOrder
  user_id: SortOrder
}

input NotificationCreateInput {
  Action: ActionCreateNestedOneWithoutNotificationsInput!
  User: UserCreateNestedOneWithoutNotificationsInput!
  id: String
  readed_at: DateTime!
}

input NotificationCreateManyActionInput {
  id: String
  readed_at: DateTime!
  user_id: String!
}

input NotificationCreateManyActionInputEnvelope {
  data: [NotificationCreateManyActionInput!]!
  skipDuplicates: Boolean
}

input NotificationCreateManyInput {
  action_id: String!
  id: String
  readed_at: DateTime!
  user_id: String!
}

input NotificationCreateManyUserInput {
  action_id: String!
  id: String
  readed_at: DateTime!
}

input NotificationCreateManyUserInputEnvelope {
  data: [NotificationCreateManyUserInput!]!
  skipDuplicates: Boolean
}

input NotificationCreateNestedManyWithoutActionInput {
  connect: [NotificationWhereUniqueInput!]
  connectOrCreate: [NotificationCreateOrConnectWithoutActionInput!]
  create: [NotificationCreateWithoutActionInput!]
  createMany: NotificationCreateManyActionInputEnvelope
}

input NotificationCreateNestedManyWithoutUserInput {
  connect: [NotificationWhereUniqueInput!]
  connectOrCreate: [NotificationCreateOrConnectWithoutUserInput!]
  create: [NotificationCreateWithoutUserInput!]
  createMany: NotificationCreateManyUserInputEnvelope
}

input NotificationCreateOrConnectWithoutActionInput {
  create: NotificationCreateWithoutActionInput!
  where: NotificationWhereUniqueInput!
}

input NotificationCreateOrConnectWithoutUserInput {
  create: NotificationCreateWithoutUserInput!
  where: NotificationWhereUniqueInput!
}

input NotificationCreateWithoutActionInput {
  User: UserCreateNestedOneWithoutNotificationsInput!
  id: String
  readed_at: DateTime!
}

input NotificationCreateWithoutUserInput {
  Action: ActionCreateNestedOneWithoutNotificationsInput!
  id: String
  readed_at: DateTime!
}

type NotificationGroupBy {
  _count: NotificationCountAggregate
  _max: NotificationMaxAggregate
  _min: NotificationMinAggregate
  action_id: String!
  id: String!
  readed_at: DateTime!
  user_id: String!
}

input NotificationListRelationFilter {
  every: NotificationWhereInput
  none: NotificationWhereInput
  some: NotificationWhereInput
}

type NotificationMaxAggregate {
  action_id: String
  id: String
  readed_at: DateTime
  user_id: String
}

input NotificationMaxOrderByAggregateInput {
  action_id: SortOrder
  id: SortOrder
  readed_at: SortOrder
  user_id: SortOrder
}

type NotificationMinAggregate {
  action_id: String
  id: String
  readed_at: DateTime
  user_id: String
}

input NotificationMinOrderByAggregateInput {
  action_id: SortOrder
  id: SortOrder
  readed_at: SortOrder
  user_id: SortOrder
}

input NotificationOrderByRelationAggregateInput {
  _count: SortOrder
}

input NotificationOrderByWithAggregationInput {
  _count: NotificationCountOrderByAggregateInput
  _max: NotificationMaxOrderByAggregateInput
  _min: NotificationMinOrderByAggregateInput
  action_id: SortOrder
  id: SortOrder
  readed_at: SortOrder
  user_id: SortOrder
}

input NotificationOrderByWithRelationInput {
  Action: ActionOrderByWithRelationInput
  User: UserOrderByWithRelationInput
  action_id: SortOrder
  id: SortOrder
  readed_at: SortOrder
  user_id: SortOrder
}

enum NotificationScalarFieldEnum {
  action_id
  id
  readed_at
  user_id
}

input NotificationScalarWhereInput {
  AND: [NotificationScalarWhereInput!]
  NOT: [NotificationScalarWhereInput!]
  OR: [NotificationScalarWhereInput!]
  action_id: StringFilter
  id: StringFilter
  readed_at: DateTimeFilter
  user_id: StringFilter
}

input NotificationScalarWhereWithAggregatesInput {
  AND: [NotificationScalarWhereWithAggregatesInput!]
  NOT: [NotificationScalarWhereWithAggregatesInput!]
  OR: [NotificationScalarWhereWithAggregatesInput!]
  action_id: StringWithAggregatesFilter
  id: StringWithAggregatesFilter
  readed_at: DateTimeWithAggregatesFilter
  user_id: StringWithAggregatesFilter
}

input NotificationUpdateInput {
  Action: ActionUpdateOneRequiredWithoutNotificationsNestedInput
  User: UserUpdateOneRequiredWithoutNotificationsNestedInput
  id: StringFieldUpdateOperationsInput
  readed_at: DateTimeFieldUpdateOperationsInput
}

input NotificationUpdateManyMutationInput {
  id: StringFieldUpdateOperationsInput
  readed_at: DateTimeFieldUpdateOperationsInput
}

input NotificationUpdateManyWithWhereWithoutActionInput {
  data: NotificationUpdateManyMutationInput!
  where: NotificationScalarWhereInput!
}

input NotificationUpdateManyWithWhereWithoutUserInput {
  data: NotificationUpdateManyMutationInput!
  where: NotificationScalarWhereInput!
}

input NotificationUpdateManyWithoutActionNestedInput {
  connect: [NotificationWhereUniqueInput!]
  connectOrCreate: [NotificationCreateOrConnectWithoutActionInput!]
  create: [NotificationCreateWithoutActionInput!]
  createMany: NotificationCreateManyActionInputEnvelope
  delete: [NotificationWhereUniqueInput!]
  deleteMany: [NotificationScalarWhereInput!]
  disconnect: [NotificationWhereUniqueInput!]
  set: [NotificationWhereUniqueInput!]
  update: [NotificationUpdateWithWhereUniqueWithoutActionInput!]
  updateMany: [NotificationUpdateManyWithWhereWithoutActionInput!]
  upsert: [NotificationUpsertWithWhereUniqueWithoutActionInput!]
}

input NotificationUpdateManyWithoutUserNestedInput {
  connect: [NotificationWhereUniqueInput!]
  connectOrCreate: [NotificationCreateOrConnectWithoutUserInput!]
  create: [NotificationCreateWithoutUserInput!]
  createMany: NotificationCreateManyUserInputEnvelope
  delete: [NotificationWhereUniqueInput!]
  deleteMany: [NotificationScalarWhereInput!]
  disconnect: [NotificationWhereUniqueInput!]
  set: [NotificationWhereUniqueInput!]
  update: [NotificationUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [NotificationUpdateManyWithWhereWithoutUserInput!]
  upsert: [NotificationUpsertWithWhereUniqueWithoutUserInput!]
}

input NotificationUpdateWithWhereUniqueWithoutActionInput {
  data: NotificationUpdateWithoutActionInput!
  where: NotificationWhereUniqueInput!
}

input NotificationUpdateWithWhereUniqueWithoutUserInput {
  data: NotificationUpdateWithoutUserInput!
  where: NotificationWhereUniqueInput!
}

input NotificationUpdateWithoutActionInput {
  User: UserUpdateOneRequiredWithoutNotificationsNestedInput
  id: StringFieldUpdateOperationsInput
  readed_at: DateTimeFieldUpdateOperationsInput
}

input NotificationUpdateWithoutUserInput {
  Action: ActionUpdateOneRequiredWithoutNotificationsNestedInput
  id: StringFieldUpdateOperationsInput
  readed_at: DateTimeFieldUpdateOperationsInput
}

input NotificationUpsertWithWhereUniqueWithoutActionInput {
  create: NotificationCreateWithoutActionInput!
  update: NotificationUpdateWithoutActionInput!
  where: NotificationWhereUniqueInput!
}

input NotificationUpsertWithWhereUniqueWithoutUserInput {
  create: NotificationCreateWithoutUserInput!
  update: NotificationUpdateWithoutUserInput!
  where: NotificationWhereUniqueInput!
}

input NotificationWhereInput {
  AND: [NotificationWhereInput!]
  Action: ActionRelationFilter
  NOT: [NotificationWhereInput!]
  OR: [NotificationWhereInput!]
  User: UserRelationFilter
  action_id: StringFilter
  id: StringFilter
  readed_at: DateTimeFilter
  user_id: StringFilter
}

input NotificationWhereUniqueInput {
  id: String
}

type Query {
  action(where: ActionWhereUniqueInput!): Action
  actions(cursor: ActionWhereUniqueInput, distinct: [ActionScalarFieldEnum!], orderBy: [ActionOrderByWithRelationInput!], skip: Int, take: Int, where: ActionWhereInput): [Action!]!
  aggregateAction(cursor: ActionWhereUniqueInput, orderBy: [ActionOrderByWithRelationInput!], skip: Int, take: Int, where: ActionWhereInput): AggregateAction!
  aggregateAssignee(cursor: AssigneeWhereUniqueInput, orderBy: [AssigneeOrderByWithRelationInput!], skip: Int, take: Int, where: AssigneeWhereInput): AggregateAssignee!
  aggregateComment(cursor: CommentWhereUniqueInput, orderBy: [CommentOrderByWithRelationInput!], skip: Int, take: Int, where: CommentWhereInput): AggregateComment!
  aggregateNotification(cursor: NotificationWhereUniqueInput, orderBy: [NotificationOrderByWithRelationInput!], skip: Int, take: Int, where: NotificationWhereInput): AggregateNotification!
  aggregateTask(cursor: TaskWhereUniqueInput, orderBy: [TaskOrderByWithRelationInput!], skip: Int, take: Int, where: TaskWhereInput): AggregateTask!
  aggregateUser(cursor: UserWhereUniqueInput, orderBy: [UserOrderByWithRelationInput!], skip: Int, take: Int, where: UserWhereInput): AggregateUser!
  assignee(where: AssigneeWhereUniqueInput!): Assignee
  assignees(cursor: AssigneeWhereUniqueInput, distinct: [AssigneeScalarFieldEnum!], orderBy: [AssigneeOrderByWithRelationInput!], skip: Int, take: Int, where: AssigneeWhereInput): [Assignee!]!
  comment(where: CommentWhereUniqueInput!): Comment
  comments(cursor: CommentWhereUniqueInput, distinct: [CommentScalarFieldEnum!], orderBy: [CommentOrderByWithRelationInput!], skip: Int, take: Int, where: CommentWhereInput): [Comment!]!
  findFirstAction(cursor: ActionWhereUniqueInput, distinct: [ActionScalarFieldEnum!], orderBy: [ActionOrderByWithRelationInput!], skip: Int, take: Int, where: ActionWhereInput): Action
  findFirstActionOrThrow(cursor: ActionWhereUniqueInput, distinct: [ActionScalarFieldEnum!], orderBy: [ActionOrderByWithRelationInput!], skip: Int, take: Int, where: ActionWhereInput): Action
  findFirstAssignee(cursor: AssigneeWhereUniqueInput, distinct: [AssigneeScalarFieldEnum!], orderBy: [AssigneeOrderByWithRelationInput!], skip: Int, take: Int, where: AssigneeWhereInput): Assignee
  findFirstAssigneeOrThrow(cursor: AssigneeWhereUniqueInput, distinct: [AssigneeScalarFieldEnum!], orderBy: [AssigneeOrderByWithRelationInput!], skip: Int, take: Int, where: AssigneeWhereInput): Assignee
  findFirstComment(cursor: CommentWhereUniqueInput, distinct: [CommentScalarFieldEnum!], orderBy: [CommentOrderByWithRelationInput!], skip: Int, take: Int, where: CommentWhereInput): Comment
  findFirstCommentOrThrow(cursor: CommentWhereUniqueInput, distinct: [CommentScalarFieldEnum!], orderBy: [CommentOrderByWithRelationInput!], skip: Int, take: Int, where: CommentWhereInput): Comment
  findFirstNotification(cursor: NotificationWhereUniqueInput, distinct: [NotificationScalarFieldEnum!], orderBy: [NotificationOrderByWithRelationInput!], skip: Int, take: Int, where: NotificationWhereInput): Notification
  findFirstNotificationOrThrow(cursor: NotificationWhereUniqueInput, distinct: [NotificationScalarFieldEnum!], orderBy: [NotificationOrderByWithRelationInput!], skip: Int, take: Int, where: NotificationWhereInput): Notification
  findFirstTask(cursor: TaskWhereUniqueInput, distinct: [TaskScalarFieldEnum!], orderBy: [TaskOrderByWithRelationInput!], skip: Int, take: Int, where: TaskWhereInput): Task
  findFirstTaskOrThrow(cursor: TaskWhereUniqueInput, distinct: [TaskScalarFieldEnum!], orderBy: [TaskOrderByWithRelationInput!], skip: Int, take: Int, where: TaskWhereInput): Task
  findFirstUser(cursor: UserWhereUniqueInput, distinct: [UserScalarFieldEnum!], orderBy: [UserOrderByWithRelationInput!], skip: Int, take: Int, where: UserWhereInput): User
  findFirstUserOrThrow(cursor: UserWhereUniqueInput, distinct: [UserScalarFieldEnum!], orderBy: [UserOrderByWithRelationInput!], skip: Int, take: Int, where: UserWhereInput): User
  getAction(where: ActionWhereUniqueInput!): Action
  getAssignee(where: AssigneeWhereUniqueInput!): Assignee
  getComment(where: CommentWhereUniqueInput!): Comment
  getNotification(where: NotificationWhereUniqueInput!): Notification
  getTask(where: TaskWhereUniqueInput!): Task
  getUser(where: UserWhereUniqueInput!): User
  groupByAction(by: [ActionScalarFieldEnum!]!, having: ActionScalarWhereWithAggregatesInput, orderBy: [ActionOrderByWithAggregationInput!], skip: Int, take: Int, where: ActionWhereInput): [ActionGroupBy!]!
  groupByAssignee(by: [AssigneeScalarFieldEnum!]!, having: AssigneeScalarWhereWithAggregatesInput, orderBy: [AssigneeOrderByWithAggregationInput!], skip: Int, take: Int, where: AssigneeWhereInput): [AssigneeGroupBy!]!
  groupByComment(by: [CommentScalarFieldEnum!]!, having: CommentScalarWhereWithAggregatesInput, orderBy: [CommentOrderByWithAggregationInput!], skip: Int, take: Int, where: CommentWhereInput): [CommentGroupBy!]!
  groupByNotification(by: [NotificationScalarFieldEnum!]!, having: NotificationScalarWhereWithAggregatesInput, orderBy: [NotificationOrderByWithAggregationInput!], skip: Int, take: Int, where: NotificationWhereInput): [NotificationGroupBy!]!
  groupByTask(by: [TaskScalarFieldEnum!]!, having: TaskScalarWhereWithAggregatesInput, orderBy: [TaskOrderByWithAggregationInput!], skip: Int, take: Int, where: TaskWhereInput): [TaskGroupBy!]!
  groupByUser(by: [UserScalarFieldEnum!]!, having: UserScalarWhereWithAggregatesInput, orderBy: [UserOrderByWithAggregationInput!], skip: Int, take: Int, where: UserWhereInput): [UserGroupBy!]!
  notification(where: NotificationWhereUniqueInput!): Notification
  notifications(cursor: NotificationWhereUniqueInput, distinct: [NotificationScalarFieldEnum!], orderBy: [NotificationOrderByWithRelationInput!], skip: Int, take: Int, where: NotificationWhereInput): [Notification!]!
  task(where: TaskWhereUniqueInput!): Task
  tasks(cursor: TaskWhereUniqueInput, distinct: [TaskScalarFieldEnum!], orderBy: [TaskOrderByWithRelationInput!], skip: Int, take: Int, where: TaskWhereInput): [Task!]!
  user(where: UserWhereUniqueInput!): User
  users(cursor: UserWhereUniqueInput, distinct: [UserScalarFieldEnum!], orderBy: [UserOrderByWithRelationInput!], skip: Int, take: Int, where: UserWhereInput): [User!]!
}

enum QueryMode {
  default
  insensitive
}

enum SortOrder {
  asc
  desc
}

enum State {
  EN_COURS
  TERMINEE
}

input StringFieldUpdateOperationsInput {
  set: String
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input StringWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedStringFilter
  _min: NestedStringFilter
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringWithAggregatesFilter
  notIn: [String!]
  startsWith: String
}

type Subscription {
  hello: String!
}

enum Target {
  EN_COURS
  TERMINEE
}

enum TargetType {
  EN_COURS
  TERMINEE
}

type Task {
  User: User!
  _count: TaskCount
  assignees(cursor: AssigneeWhereUniqueInput, distinct: [AssigneeScalarFieldEnum!], orderBy: [AssigneeOrderByWithRelationInput!], skip: Int, take: Int, where: AssigneeWhereInput): [Assignee!]!
  comments(cursor: CommentWhereUniqueInput, distinct: [CommentScalarFieldEnum!], orderBy: [CommentOrderByWithRelationInput!], skip: Int, take: Int, where: CommentWhereInput): [Comment!]!
  created_at: DateTime!
  description: String!
  due_at: DateTime!
  id: ID!
  owner_id: String!
  state: State!
  title: String!
  update_at: DateTime!
}

type TaskCount {
  assignees: Int!
  comments: Int!
}

type TaskCountAggregate {
  _all: Int!
  created_at: Int!
  description: Int!
  due_at: Int!
  id: Int!
  owner_id: Int!
  state: Int!
  title: Int!
  update_at: Int!
}

input TaskCountOrderByAggregateInput {
  created_at: SortOrder
  description: SortOrder
  due_at: SortOrder
  id: SortOrder
  owner_id: SortOrder
  state: SortOrder
  title: SortOrder
  update_at: SortOrder
}

input TaskCreateInput {
  User: UserCreateNestedOneWithoutTasksInput!
  assignees: AssigneeCreateNestedManyWithoutTaskInput
  comments: CommentCreateNestedManyWithoutTargetInput
  created_at: DateTime!
  description: String!
  due_at: DateTime!
  id: String
  state: State
  title: String!
  update_at: DateTime!
}

input TaskCreateManyInput {
  created_at: DateTime!
  description: String!
  due_at: DateTime!
  id: String
  owner_id: String!
  state: State
  title: String!
  update_at: DateTime!
}

input TaskCreateManyUserInput {
  created_at: DateTime!
  description: String!
  due_at: DateTime!
  id: String
  state: State
  title: String!
  update_at: DateTime!
}

input TaskCreateManyUserInputEnvelope {
  data: [TaskCreateManyUserInput!]!
  skipDuplicates: Boolean
}

input TaskCreateNestedManyWithoutUserInput {
  connect: [TaskWhereUniqueInput!]
  connectOrCreate: [TaskCreateOrConnectWithoutUserInput!]
  create: [TaskCreateWithoutUserInput!]
  createMany: TaskCreateManyUserInputEnvelope
}

input TaskCreateNestedOneWithoutAssigneesInput {
  connect: TaskWhereUniqueInput
  connectOrCreate: TaskCreateOrConnectWithoutAssigneesInput
  create: TaskCreateWithoutAssigneesInput
}

input TaskCreateNestedOneWithoutCommentsInput {
  connect: TaskWhereUniqueInput
  connectOrCreate: TaskCreateOrConnectWithoutCommentsInput
  create: TaskCreateWithoutCommentsInput
}

input TaskCreateOrConnectWithoutAssigneesInput {
  create: TaskCreateWithoutAssigneesInput!
  where: TaskWhereUniqueInput!
}

input TaskCreateOrConnectWithoutCommentsInput {
  create: TaskCreateWithoutCommentsInput!
  where: TaskWhereUniqueInput!
}

input TaskCreateOrConnectWithoutUserInput {
  create: TaskCreateWithoutUserInput!
  where: TaskWhereUniqueInput!
}

input TaskCreateWithoutAssigneesInput {
  User: UserCreateNestedOneWithoutTasksInput!
  comments: CommentCreateNestedManyWithoutTargetInput
  created_at: DateTime!
  description: String!
  due_at: DateTime!
  id: String
  state: State
  title: String!
  update_at: DateTime!
}

input TaskCreateWithoutCommentsInput {
  User: UserCreateNestedOneWithoutTasksInput!
  assignees: AssigneeCreateNestedManyWithoutTaskInput
  created_at: DateTime!
  description: String!
  due_at: DateTime!
  id: String
  state: State
  title: String!
  update_at: DateTime!
}

input TaskCreateWithoutUserInput {
  assignees: AssigneeCreateNestedManyWithoutTaskInput
  comments: CommentCreateNestedManyWithoutTargetInput
  created_at: DateTime!
  description: String!
  due_at: DateTime!
  id: String
  state: State
  title: String!
  update_at: DateTime!
}

type TaskGroupBy {
  _count: TaskCountAggregate
  _max: TaskMaxAggregate
  _min: TaskMinAggregate
  created_at: DateTime!
  description: String!
  due_at: DateTime!
  id: String!
  owner_id: String!
  state: State!
  title: String!
  update_at: DateTime!
}

input TaskListRelationFilter {
  every: TaskWhereInput
  none: TaskWhereInput
  some: TaskWhereInput
}

type TaskMaxAggregate {
  created_at: DateTime
  description: String
  due_at: DateTime
  id: String
  owner_id: String
  state: State
  title: String
  update_at: DateTime
}

input TaskMaxOrderByAggregateInput {
  created_at: SortOrder
  description: SortOrder
  due_at: SortOrder
  id: SortOrder
  owner_id: SortOrder
  state: SortOrder
  title: SortOrder
  update_at: SortOrder
}

type TaskMinAggregate {
  created_at: DateTime
  description: String
  due_at: DateTime
  id: String
  owner_id: String
  state: State
  title: String
  update_at: DateTime
}

input TaskMinOrderByAggregateInput {
  created_at: SortOrder
  description: SortOrder
  due_at: SortOrder
  id: SortOrder
  owner_id: SortOrder
  state: SortOrder
  title: SortOrder
  update_at: SortOrder
}

input TaskOrderByRelationAggregateInput {
  _count: SortOrder
}

input TaskOrderByWithAggregationInput {
  _count: TaskCountOrderByAggregateInput
  _max: TaskMaxOrderByAggregateInput
  _min: TaskMinOrderByAggregateInput
  created_at: SortOrder
  description: SortOrder
  due_at: SortOrder
  id: SortOrder
  owner_id: SortOrder
  state: SortOrder
  title: SortOrder
  update_at: SortOrder
}

input TaskOrderByWithRelationInput {
  User: UserOrderByWithRelationInput
  assignees: AssigneeOrderByRelationAggregateInput
  comments: CommentOrderByRelationAggregateInput
  created_at: SortOrder
  description: SortOrder
  due_at: SortOrder
  id: SortOrder
  owner_id: SortOrder
  state: SortOrder
  title: SortOrder
  update_at: SortOrder
}

input TaskRelationFilter {
  is: TaskWhereInput
  isNot: TaskWhereInput
}

enum TaskScalarFieldEnum {
  created_at
  description
  due_at
  id
  owner_id
  state
  title
  update_at
}

input TaskScalarWhereInput {
  AND: [TaskScalarWhereInput!]
  NOT: [TaskScalarWhereInput!]
  OR: [TaskScalarWhereInput!]
  created_at: DateTimeFilter
  description: StringFilter
  due_at: DateTimeFilter
  id: StringFilter
  owner_id: StringFilter
  state: EnumStateFilter
  title: StringFilter
  update_at: DateTimeFilter
}

input TaskScalarWhereWithAggregatesInput {
  AND: [TaskScalarWhereWithAggregatesInput!]
  NOT: [TaskScalarWhereWithAggregatesInput!]
  OR: [TaskScalarWhereWithAggregatesInput!]
  created_at: DateTimeWithAggregatesFilter
  description: StringWithAggregatesFilter
  due_at: DateTimeWithAggregatesFilter
  id: StringWithAggregatesFilter
  owner_id: StringWithAggregatesFilter
  state: EnumStateWithAggregatesFilter
  title: StringWithAggregatesFilter
  update_at: DateTimeWithAggregatesFilter
}

input TaskUpdateInput {
  User: UserUpdateOneRequiredWithoutTasksNestedInput
  assignees: AssigneeUpdateManyWithoutTaskNestedInput
  comments: CommentUpdateManyWithoutTargetNestedInput
  created_at: DateTimeFieldUpdateOperationsInput
  description: StringFieldUpdateOperationsInput
  due_at: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  state: EnumStateFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  update_at: DateTimeFieldUpdateOperationsInput
}

input TaskUpdateManyMutationInput {
  created_at: DateTimeFieldUpdateOperationsInput
  description: StringFieldUpdateOperationsInput
  due_at: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  state: EnumStateFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  update_at: DateTimeFieldUpdateOperationsInput
}

input TaskUpdateManyWithWhereWithoutUserInput {
  data: TaskUpdateManyMutationInput!
  where: TaskScalarWhereInput!
}

input TaskUpdateManyWithoutUserNestedInput {
  connect: [TaskWhereUniqueInput!]
  connectOrCreate: [TaskCreateOrConnectWithoutUserInput!]
  create: [TaskCreateWithoutUserInput!]
  createMany: TaskCreateManyUserInputEnvelope
  delete: [TaskWhereUniqueInput!]
  deleteMany: [TaskScalarWhereInput!]
  disconnect: [TaskWhereUniqueInput!]
  set: [TaskWhereUniqueInput!]
  update: [TaskUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [TaskUpdateManyWithWhereWithoutUserInput!]
  upsert: [TaskUpsertWithWhereUniqueWithoutUserInput!]
}

input TaskUpdateOneRequiredWithoutAssigneesNestedInput {
  connect: TaskWhereUniqueInput
  connectOrCreate: TaskCreateOrConnectWithoutAssigneesInput
  create: TaskCreateWithoutAssigneesInput
  update: TaskUpdateWithoutAssigneesInput
  upsert: TaskUpsertWithoutAssigneesInput
}

input TaskUpdateOneRequiredWithoutCommentsNestedInput {
  connect: TaskWhereUniqueInput
  connectOrCreate: TaskCreateOrConnectWithoutCommentsInput
  create: TaskCreateWithoutCommentsInput
  update: TaskUpdateWithoutCommentsInput
  upsert: TaskUpsertWithoutCommentsInput
}

input TaskUpdateWithWhereUniqueWithoutUserInput {
  data: TaskUpdateWithoutUserInput!
  where: TaskWhereUniqueInput!
}

input TaskUpdateWithoutAssigneesInput {
  User: UserUpdateOneRequiredWithoutTasksNestedInput
  comments: CommentUpdateManyWithoutTargetNestedInput
  created_at: DateTimeFieldUpdateOperationsInput
  description: StringFieldUpdateOperationsInput
  due_at: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  state: EnumStateFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  update_at: DateTimeFieldUpdateOperationsInput
}

input TaskUpdateWithoutCommentsInput {
  User: UserUpdateOneRequiredWithoutTasksNestedInput
  assignees: AssigneeUpdateManyWithoutTaskNestedInput
  created_at: DateTimeFieldUpdateOperationsInput
  description: StringFieldUpdateOperationsInput
  due_at: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  state: EnumStateFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  update_at: DateTimeFieldUpdateOperationsInput
}

input TaskUpdateWithoutUserInput {
  assignees: AssigneeUpdateManyWithoutTaskNestedInput
  comments: CommentUpdateManyWithoutTargetNestedInput
  created_at: DateTimeFieldUpdateOperationsInput
  description: StringFieldUpdateOperationsInput
  due_at: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  state: EnumStateFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  update_at: DateTimeFieldUpdateOperationsInput
}

input TaskUpsertWithWhereUniqueWithoutUserInput {
  create: TaskCreateWithoutUserInput!
  update: TaskUpdateWithoutUserInput!
  where: TaskWhereUniqueInput!
}

input TaskUpsertWithoutAssigneesInput {
  create: TaskCreateWithoutAssigneesInput!
  update: TaskUpdateWithoutAssigneesInput!
}

input TaskUpsertWithoutCommentsInput {
  create: TaskCreateWithoutCommentsInput!
  update: TaskUpdateWithoutCommentsInput!
}

input TaskWhereInput {
  AND: [TaskWhereInput!]
  NOT: [TaskWhereInput!]
  OR: [TaskWhereInput!]
  User: UserRelationFilter
  assignees: AssigneeListRelationFilter
  comments: CommentListRelationFilter
  created_at: DateTimeFilter
  description: StringFilter
  due_at: DateTimeFilter
  id: StringFilter
  owner_id: StringFilter
  state: EnumStateFilter
  title: StringFilter
  update_at: DateTimeFilter
}

input TaskWhereUniqueInput {
  id: String
}

type User {
  _count: UserCount
  active: Boolean!
  assignees(cursor: AssigneeWhereUniqueInput, distinct: [AssigneeScalarFieldEnum!], orderBy: [AssigneeOrderByWithRelationInput!], skip: Int, take: Int, where: AssigneeWhereInput): [Assignee!]!
  comments(cursor: CommentWhereUniqueInput, distinct: [CommentScalarFieldEnum!], orderBy: [CommentOrderByWithRelationInput!], skip: Int, take: Int, where: CommentWhereInput): [Comment!]!
  created_at: DateTime!
  email: String!
  id: ID!
  last_sign_in_at: DateTime!
  name: String!
  notifications(cursor: NotificationWhereUniqueInput, distinct: [NotificationScalarFieldEnum!], orderBy: [NotificationOrderByWithRelationInput!], skip: Int, take: Int, where: NotificationWhereInput): [Notification!]!
  preferences: JSON!
  tasks(cursor: TaskWhereUniqueInput, distinct: [TaskScalarFieldEnum!], orderBy: [TaskOrderByWithRelationInput!], skip: Int, take: Int, where: TaskWhereInput): [Task!]!
  updated_at: DateTime!
}

type UserCount {
  assignees: Int!
  comments: Int!
  notifications: Int!
  tasks: Int!
}

type UserCountAggregate {
  _all: Int!
  active: Int!
  created_at: Int!
  email: Int!
  id: Int!
  last_sign_in_at: Int!
  name: Int!
  preferences: Int!
  updated_at: Int!
}

input UserCountOrderByAggregateInput {
  active: SortOrder
  created_at: SortOrder
  email: SortOrder
  id: SortOrder
  last_sign_in_at: SortOrder
  name: SortOrder
  preferences: SortOrder
  updated_at: SortOrder
}

input UserCreateInput {
  active: Boolean!
  assignees: AssigneeCreateNestedManyWithoutUserInput
  comments: CommentCreateNestedManyWithoutOwnerInput
  created_at: DateTime!
  email: String!
  id: String
  last_sign_in_at: DateTime!
  name: String!
  notifications: NotificationCreateNestedManyWithoutUserInput
  preferences: JSON!
  tasks: TaskCreateNestedManyWithoutUserInput
  updated_at: DateTime!
}

input UserCreateManyInput {
  active: Boolean!
  created_at: DateTime!
  email: String!
  id: String
  last_sign_in_at: DateTime!
  name: String!
  preferences: JSON!
  updated_at: DateTime!
}

input UserCreateNestedOneWithoutAssigneesInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutAssigneesInput
  create: UserCreateWithoutAssigneesInput
}

input UserCreateNestedOneWithoutCommentsInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutCommentsInput
  create: UserCreateWithoutCommentsInput
}

input UserCreateNestedOneWithoutNotificationsInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutNotificationsInput
  create: UserCreateWithoutNotificationsInput
}

input UserCreateNestedOneWithoutTasksInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutTasksInput
  create: UserCreateWithoutTasksInput
}

input UserCreateOrConnectWithoutAssigneesInput {
  create: UserCreateWithoutAssigneesInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutCommentsInput {
  create: UserCreateWithoutCommentsInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutNotificationsInput {
  create: UserCreateWithoutNotificationsInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutTasksInput {
  create: UserCreateWithoutTasksInput!
  where: UserWhereUniqueInput!
}

input UserCreateWithoutAssigneesInput {
  active: Boolean!
  comments: CommentCreateNestedManyWithoutOwnerInput
  created_at: DateTime!
  email: String!
  id: String
  last_sign_in_at: DateTime!
  name: String!
  notifications: NotificationCreateNestedManyWithoutUserInput
  preferences: JSON!
  tasks: TaskCreateNestedManyWithoutUserInput
  updated_at: DateTime!
}

input UserCreateWithoutCommentsInput {
  active: Boolean!
  assignees: AssigneeCreateNestedManyWithoutUserInput
  created_at: DateTime!
  email: String!
  id: String
  last_sign_in_at: DateTime!
  name: String!
  notifications: NotificationCreateNestedManyWithoutUserInput
  preferences: JSON!
  tasks: TaskCreateNestedManyWithoutUserInput
  updated_at: DateTime!
}

input UserCreateWithoutNotificationsInput {
  active: Boolean!
  assignees: AssigneeCreateNestedManyWithoutUserInput
  comments: CommentCreateNestedManyWithoutOwnerInput
  created_at: DateTime!
  email: String!
  id: String
  last_sign_in_at: DateTime!
  name: String!
  preferences: JSON!
  tasks: TaskCreateNestedManyWithoutUserInput
  updated_at: DateTime!
}

input UserCreateWithoutTasksInput {
  active: Boolean!
  assignees: AssigneeCreateNestedManyWithoutUserInput
  comments: CommentCreateNestedManyWithoutOwnerInput
  created_at: DateTime!
  email: String!
  id: String
  last_sign_in_at: DateTime!
  name: String!
  notifications: NotificationCreateNestedManyWithoutUserInput
  preferences: JSON!
  updated_at: DateTime!
}

type UserGroupBy {
  _count: UserCountAggregate
  _max: UserMaxAggregate
  _min: UserMinAggregate
  active: Boolean!
  created_at: DateTime!
  email: String!
  id: String!
  last_sign_in_at: DateTime!
  name: String!
  preferences: JSON!
  updated_at: DateTime!
}

type UserMaxAggregate {
  active: Boolean
  created_at: DateTime
  email: String
  id: String
  last_sign_in_at: DateTime
  name: String
  updated_at: DateTime
}

input UserMaxOrderByAggregateInput {
  active: SortOrder
  created_at: SortOrder
  email: SortOrder
  id: SortOrder
  last_sign_in_at: SortOrder
  name: SortOrder
  updated_at: SortOrder
}

type UserMinAggregate {
  active: Boolean
  created_at: DateTime
  email: String
  id: String
  last_sign_in_at: DateTime
  name: String
  updated_at: DateTime
}

input UserMinOrderByAggregateInput {
  active: SortOrder
  created_at: SortOrder
  email: SortOrder
  id: SortOrder
  last_sign_in_at: SortOrder
  name: SortOrder
  updated_at: SortOrder
}

input UserOrderByWithAggregationInput {
  _count: UserCountOrderByAggregateInput
  _max: UserMaxOrderByAggregateInput
  _min: UserMinOrderByAggregateInput
  active: SortOrder
  created_at: SortOrder
  email: SortOrder
  id: SortOrder
  last_sign_in_at: SortOrder
  name: SortOrder
  preferences: SortOrder
  updated_at: SortOrder
}

input UserOrderByWithRelationInput {
  active: SortOrder
  assignees: AssigneeOrderByRelationAggregateInput
  comments: CommentOrderByRelationAggregateInput
  created_at: SortOrder
  email: SortOrder
  id: SortOrder
  last_sign_in_at: SortOrder
  name: SortOrder
  notifications: NotificationOrderByRelationAggregateInput
  preferences: SortOrder
  tasks: TaskOrderByRelationAggregateInput
  updated_at: SortOrder
}

input UserRelationFilter {
  is: UserWhereInput
  isNot: UserWhereInput
}

enum UserScalarFieldEnum {
  active
  created_at
  email
  id
  last_sign_in_at
  name
  preferences
  updated_at
}

input UserScalarWhereWithAggregatesInput {
  AND: [UserScalarWhereWithAggregatesInput!]
  NOT: [UserScalarWhereWithAggregatesInput!]
  OR: [UserScalarWhereWithAggregatesInput!]
  active: BoolWithAggregatesFilter
  created_at: DateTimeWithAggregatesFilter
  email: StringWithAggregatesFilter
  id: StringWithAggregatesFilter
  last_sign_in_at: DateTimeWithAggregatesFilter
  name: StringWithAggregatesFilter
  preferences: JsonWithAggregatesFilter
  updated_at: DateTimeWithAggregatesFilter
}

input UserUpdateInput {
  active: BoolFieldUpdateOperationsInput
  assignees: AssigneeUpdateManyWithoutUserNestedInput
  comments: CommentUpdateManyWithoutOwnerNestedInput
  created_at: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  last_sign_in_at: DateTimeFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  notifications: NotificationUpdateManyWithoutUserNestedInput
  preferences: JSON
  tasks: TaskUpdateManyWithoutUserNestedInput
  updated_at: DateTimeFieldUpdateOperationsInput
}

input UserUpdateManyMutationInput {
  active: BoolFieldUpdateOperationsInput
  created_at: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  last_sign_in_at: DateTimeFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  preferences: JSON
  updated_at: DateTimeFieldUpdateOperationsInput
}

input UserUpdateOneRequiredWithoutAssigneesNestedInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutAssigneesInput
  create: UserCreateWithoutAssigneesInput
  update: UserUpdateWithoutAssigneesInput
  upsert: UserUpsertWithoutAssigneesInput
}

input UserUpdateOneRequiredWithoutCommentsNestedInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutCommentsInput
  create: UserCreateWithoutCommentsInput
  update: UserUpdateWithoutCommentsInput
  upsert: UserUpsertWithoutCommentsInput
}

input UserUpdateOneRequiredWithoutNotificationsNestedInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutNotificationsInput
  create: UserCreateWithoutNotificationsInput
  update: UserUpdateWithoutNotificationsInput
  upsert: UserUpsertWithoutNotificationsInput
}

input UserUpdateOneRequiredWithoutTasksNestedInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutTasksInput
  create: UserCreateWithoutTasksInput
  update: UserUpdateWithoutTasksInput
  upsert: UserUpsertWithoutTasksInput
}

input UserUpdateWithoutAssigneesInput {
  active: BoolFieldUpdateOperationsInput
  comments: CommentUpdateManyWithoutOwnerNestedInput
  created_at: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  last_sign_in_at: DateTimeFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  notifications: NotificationUpdateManyWithoutUserNestedInput
  preferences: JSON
  tasks: TaskUpdateManyWithoutUserNestedInput
  updated_at: DateTimeFieldUpdateOperationsInput
}

input UserUpdateWithoutCommentsInput {
  active: BoolFieldUpdateOperationsInput
  assignees: AssigneeUpdateManyWithoutUserNestedInput
  created_at: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  last_sign_in_at: DateTimeFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  notifications: NotificationUpdateManyWithoutUserNestedInput
  preferences: JSON
  tasks: TaskUpdateManyWithoutUserNestedInput
  updated_at: DateTimeFieldUpdateOperationsInput
}

input UserUpdateWithoutNotificationsInput {
  active: BoolFieldUpdateOperationsInput
  assignees: AssigneeUpdateManyWithoutUserNestedInput
  comments: CommentUpdateManyWithoutOwnerNestedInput
  created_at: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  last_sign_in_at: DateTimeFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  preferences: JSON
  tasks: TaskUpdateManyWithoutUserNestedInput
  updated_at: DateTimeFieldUpdateOperationsInput
}

input UserUpdateWithoutTasksInput {
  active: BoolFieldUpdateOperationsInput
  assignees: AssigneeUpdateManyWithoutUserNestedInput
  comments: CommentUpdateManyWithoutOwnerNestedInput
  created_at: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  last_sign_in_at: DateTimeFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  notifications: NotificationUpdateManyWithoutUserNestedInput
  preferences: JSON
  updated_at: DateTimeFieldUpdateOperationsInput
}

input UserUpsertWithoutAssigneesInput {
  create: UserCreateWithoutAssigneesInput!
  update: UserUpdateWithoutAssigneesInput!
}

input UserUpsertWithoutCommentsInput {
  create: UserCreateWithoutCommentsInput!
  update: UserUpdateWithoutCommentsInput!
}

input UserUpsertWithoutNotificationsInput {
  create: UserCreateWithoutNotificationsInput!
  update: UserUpdateWithoutNotificationsInput!
}

input UserUpsertWithoutTasksInput {
  create: UserCreateWithoutTasksInput!
  update: UserUpdateWithoutTasksInput!
}

input UserWhereInput {
  AND: [UserWhereInput!]
  NOT: [UserWhereInput!]
  OR: [UserWhereInput!]
  active: BoolFilter
  assignees: AssigneeListRelationFilter
  comments: CommentListRelationFilter
  created_at: DateTimeFilter
  email: StringFilter
  id: StringFilter
  last_sign_in_at: DateTimeFilter
  name: StringFilter
  notifications: NotificationListRelationFilter
  preferences: JsonFilter
  tasks: TaskListRelationFilter
  updated_at: DateTimeFilter
}

input UserWhereUniqueInput {
  email: String
  id: String
}