
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum
} = require('@prisma/client/runtime/index-browser')


const Prisma = {}

exports.Prisma = Prisma

/**
 * Prisma Client JS version: 4.8.0
 * Query Engine version: d6e67a83f971b175a593ccc12e15c4a757f93ffe
 */
Prisma.prismaVersion = {
  client: "4.8.0",
  engine: "d6e67a83f971b175a593ccc12e15c4a757f93ffe"
}

Prisma.PrismaClientKnownRequestError = () => {
  throw new Error(`PrismaClientKnownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  throw new Error(`PrismaClientUnknownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientRustPanicError = () => {
  throw new Error(`PrismaClientRustPanicError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientInitializationError = () => {
  throw new Error(`PrismaClientInitializationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientValidationError = () => {
  throw new Error(`PrismaClientValidationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.NotFoundError = () => {
  throw new Error(`NotFoundError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  throw new Error(`sqltag is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.empty = () => {
  throw new Error(`empty is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.join = () => {
  throw new Error(`join is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.raw = () => {
  throw new Error(`raw is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.validator = () => (val) => val


/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}

/**
 * Enums
 */
// Based on
// https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275
function makeEnum(x) { return x; }

exports.Prisma.ActionsScalarFieldEnum = makeEnum({
  id: 'id',
  group: 'group',
  name: 'name',
  target_id: 'target_id',
  target_type: 'target_type'
});

exports.Prisma.AssigneesScalarFieldEnum = makeEnum({
  id: 'id',
  task_id: 'task_id',
  user_id: 'user_id',
  created_at: 'created_at'
});

exports.Prisma.CommentsScalarFieldEnum = makeEnum({
  id: 'id',
  owner_id: 'owner_id',
  target_id: 'target_id',
  target_type: 'target_type',
  parent_id: 'parent_id',
  content: 'content',
  created_at: 'created_at',
  updated_at: 'updated_at'
});

exports.Prisma.JsonNullValueFilter = makeEnum({
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
});

exports.Prisma.JsonNullValueInput = makeEnum({
  JsonNull: Prisma.JsonNull
});

exports.Prisma.NotificationsScalarFieldEnum = makeEnum({
  id: 'id',
  user_id: 'user_id',
  action_id: 'action_id',
  readed_at: 'readed_at'
});

exports.Prisma.QueryMode = makeEnum({
  default: 'default',
  insensitive: 'insensitive'
});

exports.Prisma.SortOrder = makeEnum({
  asc: 'asc',
  desc: 'desc'
});

exports.Prisma.TasksScalarFieldEnum = makeEnum({
  id: 'id',
  title: 'title',
  description: 'description',
  owner_id: 'owner_id',
  due_at: 'due_at',
  created_at: 'created_at',
  updated_at: 'updated_at',
  state: 'state'
});

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UsersScalarFieldEnum = makeEnum({
  id: 'id',
  email: 'email',
  password: 'password',
  password_digest: 'password_digest',
  active: 'active',
  preferences: 'preferences',
  last_sign_in_at: 'last_sign_in_at',
  created_at: 'created_at',
  updated_at: 'updated_at'
});
exports.ActionGroup = makeEnum({
  EDIT: 'EDIT',
  DELETE: 'DELETE',
  CREATE: 'CREATE'
});

exports.ActionName = makeEnum({
  TASK_CREATE: 'TASK_CREATE',
  TASK_ASSIGN: 'TASK_ASSIGN',
  TASK_STATE_PENDING: 'TASK_STATE_PENDING',
  TASK_STATE_INPROGRESS: 'TASK_STATE_INPROGRESS',
  TASK_STATE_DONE: 'TASK_STATE_DONE',
  COMMENT_CREATE: 'COMMENT_CREATE',
  COMMENT_REPLY: 'COMMENT_REPLY'
});

exports.ActionTargetType = makeEnum({
  TASK: 'TASK',
  COMMENT: 'COMMENT'
});

exports.CommentTargetType = makeEnum({
  COMMENT_NEW: 'COMMENT_NEW',
  COMMENT_REPLY: 'COMMENT_REPLY'
});

exports.TaskState = makeEnum({
  PENDING: 'PENDING',
  IN_PROGRESS: 'IN_PROGRESS',
  DONE: 'DONE'
});

exports.Prisma.ModelName = makeEnum({
  Users: 'Users',
  Actions: 'Actions',
  Notifications: 'Notifications',
  Tasks: 'Tasks',
  Comments: 'Comments',
  assignees: 'assignees'
});

/**
 * Create the Client
 */
class PrismaClient {
  constructor() {
    throw new Error(
      `PrismaClient is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
    )
  }
}
exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
