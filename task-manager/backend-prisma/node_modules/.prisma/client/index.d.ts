
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/index';
declare const prisma: unique symbol
export type PrismaPromise<A> = Promise<A> & {[prisma]: true}
type UnwrapPromise<P extends any> = P extends Promise<infer R> ? R : P
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>
};


/**
 * Model Users
 * 
 */
export type Users = {
  id: string
  email: string
  /**
   * @TypeGraphQL.omit(output: true)
   */
  password: string
  /**
   * @TypeGraphQL.omit(output: true, input: true)
   */
  password_digest: string
  active: boolean
  preferences: Prisma.JsonValue
  last_sign_in_at: Date
  created_at: Date
  updated_at: Date
}

/**
 * Model Actions
 * 
 */
export type Actions = {
  id: string
  group: ActionGroup
  name: ActionName
  target_id: string
  target_type: ActionTargetType
}

/**
 * Model Notifications
 * 
 */
export type Notifications = {
  id: string
  user_id: string
  action_id: string
  readed_at: Date
}

/**
 * Model Tasks
 * 
 */
export type Tasks = {
  id: string
  title: string
  description: string
  owner_id: string
  due_at: Date
  created_at: Date
  updated_at: Date
  state: TaskState
}

/**
 * Model Comments
 * 
 */
export type Comments = {
  id: string
  owner_id: string
  target_id: string
  target_type: CommentTargetType
  parent_id: string
  content: string
  created_at: Date
  updated_at: Date
}

/**
 * Model assignees
 * 
 */
export type assignees = {
  id: string
  task_id: string
  user_id: string
  created_at: Date
}


/**
 * Enums
 */

// Based on
// https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

export const ActionGroup: {
  EDIT: 'EDIT',
  DELETE: 'DELETE',
  CREATE: 'CREATE'
};

export type ActionGroup = (typeof ActionGroup)[keyof typeof ActionGroup]


export const ActionName: {
  TASK_CREATE: 'TASK_CREATE',
  TASK_ASSIGN: 'TASK_ASSIGN',
  TASK_STATE_PENDING: 'TASK_STATE_PENDING',
  TASK_STATE_INPROGRESS: 'TASK_STATE_INPROGRESS',
  TASK_STATE_DONE: 'TASK_STATE_DONE',
  COMMENT_CREATE: 'COMMENT_CREATE',
  COMMENT_REPLY: 'COMMENT_REPLY'
};

export type ActionName = (typeof ActionName)[keyof typeof ActionName]


export const ActionTargetType: {
  TASK: 'TASK',
  COMMENT: 'COMMENT'
};

export type ActionTargetType = (typeof ActionTargetType)[keyof typeof ActionTargetType]


export const CommentTargetType: {
  COMMENT_NEW: 'COMMENT_NEW',
  COMMENT_REPLY: 'COMMENT_REPLY'
};

export type CommentTargetType = (typeof CommentTargetType)[keyof typeof CommentTargetType]


export const TaskState: {
  PENDING: 'PENDING',
  IN_PROGRESS: 'IN_PROGRESS',
  DONE: 'DONE'
};

export type TaskState = (typeof TaskState)[keyof typeof TaskState]


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.users.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.users.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<void>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<UnwrapTuple<P>>;

  $transaction<R>(fn: (prisma: Prisma.TransactionClient) => Promise<R>, options?: {maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel}): Promise<R>;

      /**
   * `prisma.users`: Exposes CRUD operations for the **Users** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.users.findMany()
    * ```
    */
  get users(): Prisma.UsersDelegate<GlobalReject>;

  /**
   * `prisma.actions`: Exposes CRUD operations for the **Actions** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Actions
    * const actions = await prisma.actions.findMany()
    * ```
    */
  get actions(): Prisma.ActionsDelegate<GlobalReject>;

  /**
   * `prisma.notifications`: Exposes CRUD operations for the **Notifications** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Notifications
    * const notifications = await prisma.notifications.findMany()
    * ```
    */
  get notifications(): Prisma.NotificationsDelegate<GlobalReject>;

  /**
   * `prisma.tasks`: Exposes CRUD operations for the **Tasks** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Tasks
    * const tasks = await prisma.tasks.findMany()
    * ```
    */
  get tasks(): Prisma.TasksDelegate<GlobalReject>;

  /**
   * `prisma.comments`: Exposes CRUD operations for the **Comments** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Comments
    * const comments = await prisma.comments.findMany()
    * ```
    */
  get comments(): Prisma.CommentsDelegate<GlobalReject>;

  /**
   * `prisma.assignees`: Exposes CRUD operations for the **assignees** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Assignees
    * const assignees = await prisma.assignees.findMany()
    * ```
    */
  get assignees(): Prisma.assigneesDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket


  /**
   * Prisma Client JS version: 4.8.0
   * Query Engine version: d6e67a83f971b175a593ccc12e15c4a757f93ffe
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Exact<A, W = unknown> = 
  W extends unknown ? A extends Narrowable ? Cast<A, W> : Cast<
  {[K in keyof A]: K extends keyof W ? Exact<A[K], W[K]> : never},
  {[K in keyof W]: K extends keyof A ? Exact<A[K], W[K]> : W[K]}>
  : never;

  type Narrowable = string | number | boolean | bigint;

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: Exact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>

  class PrismaClientFetcher {
    private readonly prisma;
    private readonly debug;
    private readonly hooks?;
    constructor(prisma: PrismaClient<any, any>, debug?: boolean, hooks?: Hooks | undefined);
    request<T>(document: any, dataPath?: string[], rootField?: string, typeName?: string, isList?: boolean, callsite?: string): Promise<T>;
    sanitizeMessage(message: string): string;
    protected unpack(document: any, data: any, path: string[], rootField?: string, isList?: boolean): any;
  }

  export const ModelName: {
    Users: 'Users',
    Actions: 'Actions',
    Notifications: 'Notifications',
    Tasks: 'Tasks',
    Comments: 'Comments',
    assignees: 'assignees'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type DefaultPrismaClient = PrismaClient
  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends RejectOnNotFound
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     * @deprecated since 4.0.0. Use `findUniqueOrThrow`/`findFirstOrThrow` methods instead.
     * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  export type Hooks = {
    beforeRequest?: (options: { query: string, path: string[], rootField?: string, typeName?: string, document: any }) => any
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, '$connect' | '$disconnect' | '$on' | '$transaction' | '$use'>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UsersCountOutputType
   */


  export type UsersCountOutputType = {
    tasks: number
    notifications: number
    comments: number
  }

  export type UsersCountOutputTypeSelect = {
    tasks?: boolean
    notifications?: boolean
    comments?: boolean
  }

  export type UsersCountOutputTypeGetPayload<S extends boolean | null | undefined | UsersCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? UsersCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (UsersCountOutputTypeArgs)
    ? UsersCountOutputType 
    : S extends { select: any } & (UsersCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof UsersCountOutputType ? UsersCountOutputType[P] : never
  } 
      : UsersCountOutputType




  // Custom InputTypes

  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the UsersCountOutputType
     * 
    **/
    select?: UsersCountOutputTypeSelect | null
  }



  /**
   * Count Type ActionsCountOutputType
   */


  export type ActionsCountOutputType = {
    notifications: number
  }

  export type ActionsCountOutputTypeSelect = {
    notifications?: boolean
  }

  export type ActionsCountOutputTypeGetPayload<S extends boolean | null | undefined | ActionsCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? ActionsCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (ActionsCountOutputTypeArgs)
    ? ActionsCountOutputType 
    : S extends { select: any } & (ActionsCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof ActionsCountOutputType ? ActionsCountOutputType[P] : never
  } 
      : ActionsCountOutputType




  // Custom InputTypes

  /**
   * ActionsCountOutputType without action
   */
  export type ActionsCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the ActionsCountOutputType
     * 
    **/
    select?: ActionsCountOutputTypeSelect | null
  }



  /**
   * Count Type TasksCountOutputType
   */


  export type TasksCountOutputType = {
    comments: number
  }

  export type TasksCountOutputTypeSelect = {
    comments?: boolean
  }

  export type TasksCountOutputTypeGetPayload<S extends boolean | null | undefined | TasksCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? TasksCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (TasksCountOutputTypeArgs)
    ? TasksCountOutputType 
    : S extends { select: any } & (TasksCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof TasksCountOutputType ? TasksCountOutputType[P] : never
  } 
      : TasksCountOutputType




  // Custom InputTypes

  /**
   * TasksCountOutputType without action
   */
  export type TasksCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the TasksCountOutputType
     * 
    **/
    select?: TasksCountOutputTypeSelect | null
  }



  /**
   * Models
   */

  /**
   * Model Users
   */


  export type AggregateUsers = {
    _count: UsersCountAggregateOutputType | null
    _min: UsersMinAggregateOutputType | null
    _max: UsersMaxAggregateOutputType | null
  }

  export type UsersMinAggregateOutputType = {
    id: string | null
    email: string | null
    password: string | null
    password_digest: string | null
    active: boolean | null
    last_sign_in_at: Date | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type UsersMaxAggregateOutputType = {
    id: string | null
    email: string | null
    password: string | null
    password_digest: string | null
    active: boolean | null
    last_sign_in_at: Date | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type UsersCountAggregateOutputType = {
    id: number
    email: number
    password: number
    password_digest: number
    active: number
    preferences: number
    last_sign_in_at: number
    created_at: number
    updated_at: number
    _all: number
  }


  export type UsersMinAggregateInputType = {
    id?: true
    email?: true
    password?: true
    password_digest?: true
    active?: true
    last_sign_in_at?: true
    created_at?: true
    updated_at?: true
  }

  export type UsersMaxAggregateInputType = {
    id?: true
    email?: true
    password?: true
    password_digest?: true
    active?: true
    last_sign_in_at?: true
    created_at?: true
    updated_at?: true
  }

  export type UsersCountAggregateInputType = {
    id?: true
    email?: true
    password?: true
    password_digest?: true
    active?: true
    preferences?: true
    last_sign_in_at?: true
    created_at?: true
    updated_at?: true
    _all?: true
  }

  export type UsersAggregateArgs = {
    /**
     * Filter which Users to aggregate.
     * 
    **/
    where?: UsersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     * 
    **/
    orderBy?: Enumerable<UsersOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: UsersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UsersCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UsersMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UsersMaxAggregateInputType
  }

  export type GetUsersAggregateType<T extends UsersAggregateArgs> = {
        [P in keyof T & keyof AggregateUsers]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUsers[P]>
      : GetScalarType<T[P], AggregateUsers[P]>
  }




  export type UsersGroupByArgs = {
    where?: UsersWhereInput
    orderBy?: Enumerable<UsersOrderByWithAggregationInput>
    by: Array<UsersScalarFieldEnum>
    having?: UsersScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UsersCountAggregateInputType | true
    _min?: UsersMinAggregateInputType
    _max?: UsersMaxAggregateInputType
  }


  export type UsersGroupByOutputType = {
    id: string
    email: string
    password: string
    password_digest: string
    active: boolean
    preferences: JsonValue
    last_sign_in_at: Date
    created_at: Date
    updated_at: Date
    _count: UsersCountAggregateOutputType | null
    _min: UsersMinAggregateOutputType | null
    _max: UsersMaxAggregateOutputType | null
  }

  type GetUsersGroupByPayload<T extends UsersGroupByArgs> = PrismaPromise<
    Array<
      PickArray<UsersGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UsersGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UsersGroupByOutputType[P]>
            : GetScalarType<T[P], UsersGroupByOutputType[P]>
        }
      >
    >


  export type UsersSelect = {
    id?: boolean
    email?: boolean
    password?: boolean
    password_digest?: boolean
    active?: boolean
    preferences?: boolean
    last_sign_in_at?: boolean
    created_at?: boolean
    updated_at?: boolean
    assignees?: boolean | assigneesArgs
    tasks?: boolean | UsersTasksArgs
    notifications?: boolean | UsersNotificationsArgs
    comments?: boolean | UsersCommentsArgs
    _count?: boolean | UsersCountOutputTypeArgs
  }


  export type UsersInclude = {
    assignees?: boolean | assigneesArgs
    tasks?: boolean | UsersTasksArgs
    notifications?: boolean | UsersNotificationsArgs
    comments?: boolean | UsersCommentsArgs
    _count?: boolean | UsersCountOutputTypeArgs
  } 

  export type UsersGetPayload<S extends boolean | null | undefined | UsersArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Users :
    S extends undefined ? never :
    S extends { include: any } & (UsersArgs | UsersFindManyArgs)
    ? Users  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'assignees' ? assigneesGetPayload<S['include'][P]> | null :
        P extends 'tasks' ? Array < TasksGetPayload<S['include'][P]>>  :
        P extends 'notifications' ? Array < NotificationsGetPayload<S['include'][P]>>  :
        P extends 'comments' ? Array < CommentsGetPayload<S['include'][P]>>  :
        P extends '_count' ? UsersCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (UsersArgs | UsersFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'assignees' ? assigneesGetPayload<S['select'][P]> | null :
        P extends 'tasks' ? Array < TasksGetPayload<S['select'][P]>>  :
        P extends 'notifications' ? Array < NotificationsGetPayload<S['select'][P]>>  :
        P extends 'comments' ? Array < CommentsGetPayload<S['select'][P]>>  :
        P extends '_count' ? UsersCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Users ? Users[P] : never
  } 
      : Users


  type UsersCountArgs = Merge<
    Omit<UsersFindManyArgs, 'select' | 'include'> & {
      select?: UsersCountAggregateInputType | true
    }
  >

  export interface UsersDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Users that matches the filter.
     * @param {UsersFindUniqueArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UsersFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, UsersFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Users'> extends True ? Prisma__UsersClient<UsersGetPayload<T>> : Prisma__UsersClient<UsersGetPayload<T> | null, null>

    /**
     * Find one Users that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {UsersFindUniqueOrThrowArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends UsersFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, UsersFindUniqueOrThrowArgs>
    ): Prisma__UsersClient<UsersGetPayload<T>>

    /**
     * Find the first Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersFindFirstArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UsersFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, UsersFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Users'> extends True ? Prisma__UsersClient<UsersGetPayload<T>> : Prisma__UsersClient<UsersGetPayload<T> | null, null>

    /**
     * Find the first Users that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersFindFirstOrThrowArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends UsersFindFirstOrThrowArgs>(
      args?: SelectSubset<T, UsersFindFirstOrThrowArgs>
    ): Prisma__UsersClient<UsersGetPayload<T>>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.users.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.users.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const usersWithIdOnly = await prisma.users.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UsersFindManyArgs>(
      args?: SelectSubset<T, UsersFindManyArgs>
    ): PrismaPromise<Array<UsersGetPayload<T>>>

    /**
     * Create a Users.
     * @param {UsersCreateArgs} args - Arguments to create a Users.
     * @example
     * // Create one Users
     * const Users = await prisma.users.create({
     *   data: {
     *     // ... data to create a Users
     *   }
     * })
     * 
    **/
    create<T extends UsersCreateArgs>(
      args: SelectSubset<T, UsersCreateArgs>
    ): Prisma__UsersClient<UsersGetPayload<T>>

    /**
     * Create many Users.
     *     @param {UsersCreateManyArgs} args - Arguments to create many Users.
     *     @example
     *     // Create many Users
     *     const users = await prisma.users.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UsersCreateManyArgs>(
      args?: SelectSubset<T, UsersCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Users.
     * @param {UsersDeleteArgs} args - Arguments to delete one Users.
     * @example
     * // Delete one Users
     * const Users = await prisma.users.delete({
     *   where: {
     *     // ... filter to delete one Users
     *   }
     * })
     * 
    **/
    delete<T extends UsersDeleteArgs>(
      args: SelectSubset<T, UsersDeleteArgs>
    ): Prisma__UsersClient<UsersGetPayload<T>>

    /**
     * Update one Users.
     * @param {UsersUpdateArgs} args - Arguments to update one Users.
     * @example
     * // Update one Users
     * const users = await prisma.users.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UsersUpdateArgs>(
      args: SelectSubset<T, UsersUpdateArgs>
    ): Prisma__UsersClient<UsersGetPayload<T>>

    /**
     * Delete zero or more Users.
     * @param {UsersDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.users.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UsersDeleteManyArgs>(
      args?: SelectSubset<T, UsersDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const users = await prisma.users.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UsersUpdateManyArgs>(
      args: SelectSubset<T, UsersUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Users.
     * @param {UsersUpsertArgs} args - Arguments to update or create a Users.
     * @example
     * // Update or create a Users
     * const users = await prisma.users.upsert({
     *   create: {
     *     // ... data to create a Users
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Users we want to update
     *   }
     * })
    **/
    upsert<T extends UsersUpsertArgs>(
      args: SelectSubset<T, UsersUpsertArgs>
    ): Prisma__UsersClient<UsersGetPayload<T>>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.users.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UsersCountArgs>(
      args?: Subset<T, UsersCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UsersCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UsersAggregateArgs>(args: Subset<T, UsersAggregateArgs>): PrismaPromise<GetUsersAggregateType<T>>

    /**
     * Group by Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UsersGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UsersGroupByArgs['orderBy'] }
        : { orderBy?: UsersGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UsersGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUsersGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Users.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__UsersClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    assignees<T extends assigneesArgs= {}>(args?: Subset<T, assigneesArgs>): Prisma__assigneesClient<assigneesGetPayload<T> | Null>;

    tasks<T extends UsersTasksArgs= {}>(args?: Subset<T, UsersTasksArgs>): PrismaPromise<Array<TasksGetPayload<T>>| Null>;

    notifications<T extends UsersNotificationsArgs= {}>(args?: Subset<T, UsersNotificationsArgs>): PrismaPromise<Array<NotificationsGetPayload<T>>| Null>;

    comments<T extends UsersCommentsArgs= {}>(args?: Subset<T, UsersCommentsArgs>): PrismaPromise<Array<CommentsGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Users base type for findUnique actions
   */
  export type UsersFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Users
     * 
    **/
    select?: UsersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UsersInclude | null
    /**
     * Filter, which Users to fetch.
     * 
    **/
    where: UsersWhereUniqueInput
  }

  /**
   * Users findUnique
   */
  export interface UsersFindUniqueArgs extends UsersFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Users findUniqueOrThrow
   */
  export type UsersFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Users
     * 
    **/
    select?: UsersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UsersInclude | null
    /**
     * Filter, which Users to fetch.
     * 
    **/
    where: UsersWhereUniqueInput
  }


  /**
   * Users base type for findFirst actions
   */
  export type UsersFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Users
     * 
    **/
    select?: UsersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UsersInclude | null
    /**
     * Filter, which Users to fetch.
     * 
    **/
    where?: UsersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     * 
    **/
    orderBy?: Enumerable<UsersOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     * 
    **/
    cursor?: UsersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     * 
    **/
    distinct?: Enumerable<UsersScalarFieldEnum>
  }

  /**
   * Users findFirst
   */
  export interface UsersFindFirstArgs extends UsersFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Users findFirstOrThrow
   */
  export type UsersFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Users
     * 
    **/
    select?: UsersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UsersInclude | null
    /**
     * Filter, which Users to fetch.
     * 
    **/
    where?: UsersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     * 
    **/
    orderBy?: Enumerable<UsersOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     * 
    **/
    cursor?: UsersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     * 
    **/
    distinct?: Enumerable<UsersScalarFieldEnum>
  }


  /**
   * Users findMany
   */
  export type UsersFindManyArgs = {
    /**
     * Select specific fields to fetch from the Users
     * 
    **/
    select?: UsersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UsersInclude | null
    /**
     * Filter, which Users to fetch.
     * 
    **/
    where?: UsersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     * 
    **/
    orderBy?: Enumerable<UsersOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     * 
    **/
    cursor?: UsersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     * 
    **/
    skip?: number
    distinct?: Enumerable<UsersScalarFieldEnum>
  }


  /**
   * Users create
   */
  export type UsersCreateArgs = {
    /**
     * Select specific fields to fetch from the Users
     * 
    **/
    select?: UsersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UsersInclude | null
    /**
     * The data needed to create a Users.
     * 
    **/
    data: XOR<UsersCreateInput, UsersUncheckedCreateInput>
  }


  /**
   * Users createMany
   */
  export type UsersCreateManyArgs = {
    /**
     * The data used to create many Users.
     * 
    **/
    data: Enumerable<UsersCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Users update
   */
  export type UsersUpdateArgs = {
    /**
     * Select specific fields to fetch from the Users
     * 
    **/
    select?: UsersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UsersInclude | null
    /**
     * The data needed to update a Users.
     * 
    **/
    data: XOR<UsersUpdateInput, UsersUncheckedUpdateInput>
    /**
     * Choose, which Users to update.
     * 
    **/
    where: UsersWhereUniqueInput
  }


  /**
   * Users updateMany
   */
  export type UsersUpdateManyArgs = {
    /**
     * The data used to update Users.
     * 
    **/
    data: XOR<UsersUpdateManyMutationInput, UsersUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     * 
    **/
    where?: UsersWhereInput
  }


  /**
   * Users upsert
   */
  export type UsersUpsertArgs = {
    /**
     * Select specific fields to fetch from the Users
     * 
    **/
    select?: UsersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UsersInclude | null
    /**
     * The filter to search for the Users to update in case it exists.
     * 
    **/
    where: UsersWhereUniqueInput
    /**
     * In case the Users found by the `where` argument doesn't exist, create a new Users with this data.
     * 
    **/
    create: XOR<UsersCreateInput, UsersUncheckedCreateInput>
    /**
     * In case the Users was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<UsersUpdateInput, UsersUncheckedUpdateInput>
  }


  /**
   * Users delete
   */
  export type UsersDeleteArgs = {
    /**
     * Select specific fields to fetch from the Users
     * 
    **/
    select?: UsersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UsersInclude | null
    /**
     * Filter which Users to delete.
     * 
    **/
    where: UsersWhereUniqueInput
  }


  /**
   * Users deleteMany
   */
  export type UsersDeleteManyArgs = {
    /**
     * Filter which Users to delete
     * 
    **/
    where?: UsersWhereInput
  }


  /**
   * Users.tasks
   */
  export type UsersTasksArgs = {
    /**
     * Select specific fields to fetch from the Tasks
     * 
    **/
    select?: TasksSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TasksInclude | null
    where?: TasksWhereInput
    orderBy?: Enumerable<TasksOrderByWithRelationInput>
    cursor?: TasksWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<TasksScalarFieldEnum>
  }


  /**
   * Users.notifications
   */
  export type UsersNotificationsArgs = {
    /**
     * Select specific fields to fetch from the Notifications
     * 
    **/
    select?: NotificationsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: NotificationsInclude | null
    where?: NotificationsWhereInput
    orderBy?: Enumerable<NotificationsOrderByWithRelationInput>
    cursor?: NotificationsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<NotificationsScalarFieldEnum>
  }


  /**
   * Users.comments
   */
  export type UsersCommentsArgs = {
    /**
     * Select specific fields to fetch from the Comments
     * 
    **/
    select?: CommentsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CommentsInclude | null
    where?: CommentsWhereInput
    orderBy?: Enumerable<CommentsOrderByWithRelationInput>
    cursor?: CommentsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<CommentsScalarFieldEnum>
  }


  /**
   * Users without action
   */
  export type UsersArgs = {
    /**
     * Select specific fields to fetch from the Users
     * 
    **/
    select?: UsersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UsersInclude | null
  }



  /**
   * Model Actions
   */


  export type AggregateActions = {
    _count: ActionsCountAggregateOutputType | null
    _min: ActionsMinAggregateOutputType | null
    _max: ActionsMaxAggregateOutputType | null
  }

  export type ActionsMinAggregateOutputType = {
    id: string | null
    group: ActionGroup | null
    name: ActionName | null
    target_id: string | null
    target_type: ActionTargetType | null
  }

  export type ActionsMaxAggregateOutputType = {
    id: string | null
    group: ActionGroup | null
    name: ActionName | null
    target_id: string | null
    target_type: ActionTargetType | null
  }

  export type ActionsCountAggregateOutputType = {
    id: number
    group: number
    name: number
    target_id: number
    target_type: number
    _all: number
  }


  export type ActionsMinAggregateInputType = {
    id?: true
    group?: true
    name?: true
    target_id?: true
    target_type?: true
  }

  export type ActionsMaxAggregateInputType = {
    id?: true
    group?: true
    name?: true
    target_id?: true
    target_type?: true
  }

  export type ActionsCountAggregateInputType = {
    id?: true
    group?: true
    name?: true
    target_id?: true
    target_type?: true
    _all?: true
  }

  export type ActionsAggregateArgs = {
    /**
     * Filter which Actions to aggregate.
     * 
    **/
    where?: ActionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Actions to fetch.
     * 
    **/
    orderBy?: Enumerable<ActionsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: ActionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Actions from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Actions.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Actions
    **/
    _count?: true | ActionsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ActionsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ActionsMaxAggregateInputType
  }

  export type GetActionsAggregateType<T extends ActionsAggregateArgs> = {
        [P in keyof T & keyof AggregateActions]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateActions[P]>
      : GetScalarType<T[P], AggregateActions[P]>
  }




  export type ActionsGroupByArgs = {
    where?: ActionsWhereInput
    orderBy?: Enumerable<ActionsOrderByWithAggregationInput>
    by: Array<ActionsScalarFieldEnum>
    having?: ActionsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ActionsCountAggregateInputType | true
    _min?: ActionsMinAggregateInputType
    _max?: ActionsMaxAggregateInputType
  }


  export type ActionsGroupByOutputType = {
    id: string
    group: ActionGroup
    name: ActionName
    target_id: string
    target_type: ActionTargetType
    _count: ActionsCountAggregateOutputType | null
    _min: ActionsMinAggregateOutputType | null
    _max: ActionsMaxAggregateOutputType | null
  }

  type GetActionsGroupByPayload<T extends ActionsGroupByArgs> = PrismaPromise<
    Array<
      PickArray<ActionsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ActionsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ActionsGroupByOutputType[P]>
            : GetScalarType<T[P], ActionsGroupByOutputType[P]>
        }
      >
    >


  export type ActionsSelect = {
    id?: boolean
    group?: boolean
    name?: boolean
    target_id?: boolean
    target_type?: boolean
    notifications?: boolean | ActionsNotificationsArgs
    _count?: boolean | ActionsCountOutputTypeArgs
  }


  export type ActionsInclude = {
    notifications?: boolean | ActionsNotificationsArgs
    _count?: boolean | ActionsCountOutputTypeArgs
  } 

  export type ActionsGetPayload<S extends boolean | null | undefined | ActionsArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Actions :
    S extends undefined ? never :
    S extends { include: any } & (ActionsArgs | ActionsFindManyArgs)
    ? Actions  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'notifications' ? Array < NotificationsGetPayload<S['include'][P]>>  :
        P extends '_count' ? ActionsCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (ActionsArgs | ActionsFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'notifications' ? Array < NotificationsGetPayload<S['select'][P]>>  :
        P extends '_count' ? ActionsCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Actions ? Actions[P] : never
  } 
      : Actions


  type ActionsCountArgs = Merge<
    Omit<ActionsFindManyArgs, 'select' | 'include'> & {
      select?: ActionsCountAggregateInputType | true
    }
  >

  export interface ActionsDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Actions that matches the filter.
     * @param {ActionsFindUniqueArgs} args - Arguments to find a Actions
     * @example
     * // Get one Actions
     * const actions = await prisma.actions.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ActionsFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ActionsFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Actions'> extends True ? Prisma__ActionsClient<ActionsGetPayload<T>> : Prisma__ActionsClient<ActionsGetPayload<T> | null, null>

    /**
     * Find one Actions that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ActionsFindUniqueOrThrowArgs} args - Arguments to find a Actions
     * @example
     * // Get one Actions
     * const actions = await prisma.actions.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ActionsFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, ActionsFindUniqueOrThrowArgs>
    ): Prisma__ActionsClient<ActionsGetPayload<T>>

    /**
     * Find the first Actions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActionsFindFirstArgs} args - Arguments to find a Actions
     * @example
     * // Get one Actions
     * const actions = await prisma.actions.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ActionsFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ActionsFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Actions'> extends True ? Prisma__ActionsClient<ActionsGetPayload<T>> : Prisma__ActionsClient<ActionsGetPayload<T> | null, null>

    /**
     * Find the first Actions that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActionsFindFirstOrThrowArgs} args - Arguments to find a Actions
     * @example
     * // Get one Actions
     * const actions = await prisma.actions.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ActionsFindFirstOrThrowArgs>(
      args?: SelectSubset<T, ActionsFindFirstOrThrowArgs>
    ): Prisma__ActionsClient<ActionsGetPayload<T>>

    /**
     * Find zero or more Actions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActionsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Actions
     * const actions = await prisma.actions.findMany()
     * 
     * // Get first 10 Actions
     * const actions = await prisma.actions.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const actionsWithIdOnly = await prisma.actions.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ActionsFindManyArgs>(
      args?: SelectSubset<T, ActionsFindManyArgs>
    ): PrismaPromise<Array<ActionsGetPayload<T>>>

    /**
     * Create a Actions.
     * @param {ActionsCreateArgs} args - Arguments to create a Actions.
     * @example
     * // Create one Actions
     * const Actions = await prisma.actions.create({
     *   data: {
     *     // ... data to create a Actions
     *   }
     * })
     * 
    **/
    create<T extends ActionsCreateArgs>(
      args: SelectSubset<T, ActionsCreateArgs>
    ): Prisma__ActionsClient<ActionsGetPayload<T>>

    /**
     * Create many Actions.
     *     @param {ActionsCreateManyArgs} args - Arguments to create many Actions.
     *     @example
     *     // Create many Actions
     *     const actions = await prisma.actions.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ActionsCreateManyArgs>(
      args?: SelectSubset<T, ActionsCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Actions.
     * @param {ActionsDeleteArgs} args - Arguments to delete one Actions.
     * @example
     * // Delete one Actions
     * const Actions = await prisma.actions.delete({
     *   where: {
     *     // ... filter to delete one Actions
     *   }
     * })
     * 
    **/
    delete<T extends ActionsDeleteArgs>(
      args: SelectSubset<T, ActionsDeleteArgs>
    ): Prisma__ActionsClient<ActionsGetPayload<T>>

    /**
     * Update one Actions.
     * @param {ActionsUpdateArgs} args - Arguments to update one Actions.
     * @example
     * // Update one Actions
     * const actions = await prisma.actions.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ActionsUpdateArgs>(
      args: SelectSubset<T, ActionsUpdateArgs>
    ): Prisma__ActionsClient<ActionsGetPayload<T>>

    /**
     * Delete zero or more Actions.
     * @param {ActionsDeleteManyArgs} args - Arguments to filter Actions to delete.
     * @example
     * // Delete a few Actions
     * const { count } = await prisma.actions.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ActionsDeleteManyArgs>(
      args?: SelectSubset<T, ActionsDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Actions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActionsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Actions
     * const actions = await prisma.actions.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ActionsUpdateManyArgs>(
      args: SelectSubset<T, ActionsUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Actions.
     * @param {ActionsUpsertArgs} args - Arguments to update or create a Actions.
     * @example
     * // Update or create a Actions
     * const actions = await prisma.actions.upsert({
     *   create: {
     *     // ... data to create a Actions
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Actions we want to update
     *   }
     * })
    **/
    upsert<T extends ActionsUpsertArgs>(
      args: SelectSubset<T, ActionsUpsertArgs>
    ): Prisma__ActionsClient<ActionsGetPayload<T>>

    /**
     * Count the number of Actions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActionsCountArgs} args - Arguments to filter Actions to count.
     * @example
     * // Count the number of Actions
     * const count = await prisma.actions.count({
     *   where: {
     *     // ... the filter for the Actions we want to count
     *   }
     * })
    **/
    count<T extends ActionsCountArgs>(
      args?: Subset<T, ActionsCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ActionsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Actions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActionsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ActionsAggregateArgs>(args: Subset<T, ActionsAggregateArgs>): PrismaPromise<GetActionsAggregateType<T>>

    /**
     * Group by Actions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActionsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ActionsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ActionsGroupByArgs['orderBy'] }
        : { orderBy?: ActionsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ActionsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetActionsGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Actions.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ActionsClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    notifications<T extends ActionsNotificationsArgs= {}>(args?: Subset<T, ActionsNotificationsArgs>): PrismaPromise<Array<NotificationsGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Actions base type for findUnique actions
   */
  export type ActionsFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Actions
     * 
    **/
    select?: ActionsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ActionsInclude | null
    /**
     * Filter, which Actions to fetch.
     * 
    **/
    where: ActionsWhereUniqueInput
  }

  /**
   * Actions findUnique
   */
  export interface ActionsFindUniqueArgs extends ActionsFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Actions findUniqueOrThrow
   */
  export type ActionsFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Actions
     * 
    **/
    select?: ActionsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ActionsInclude | null
    /**
     * Filter, which Actions to fetch.
     * 
    **/
    where: ActionsWhereUniqueInput
  }


  /**
   * Actions base type for findFirst actions
   */
  export type ActionsFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Actions
     * 
    **/
    select?: ActionsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ActionsInclude | null
    /**
     * Filter, which Actions to fetch.
     * 
    **/
    where?: ActionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Actions to fetch.
     * 
    **/
    orderBy?: Enumerable<ActionsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Actions.
     * 
    **/
    cursor?: ActionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Actions from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Actions.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Actions.
     * 
    **/
    distinct?: Enumerable<ActionsScalarFieldEnum>
  }

  /**
   * Actions findFirst
   */
  export interface ActionsFindFirstArgs extends ActionsFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Actions findFirstOrThrow
   */
  export type ActionsFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Actions
     * 
    **/
    select?: ActionsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ActionsInclude | null
    /**
     * Filter, which Actions to fetch.
     * 
    **/
    where?: ActionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Actions to fetch.
     * 
    **/
    orderBy?: Enumerable<ActionsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Actions.
     * 
    **/
    cursor?: ActionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Actions from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Actions.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Actions.
     * 
    **/
    distinct?: Enumerable<ActionsScalarFieldEnum>
  }


  /**
   * Actions findMany
   */
  export type ActionsFindManyArgs = {
    /**
     * Select specific fields to fetch from the Actions
     * 
    **/
    select?: ActionsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ActionsInclude | null
    /**
     * Filter, which Actions to fetch.
     * 
    **/
    where?: ActionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Actions to fetch.
     * 
    **/
    orderBy?: Enumerable<ActionsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Actions.
     * 
    **/
    cursor?: ActionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Actions from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Actions.
     * 
    **/
    skip?: number
    distinct?: Enumerable<ActionsScalarFieldEnum>
  }


  /**
   * Actions create
   */
  export type ActionsCreateArgs = {
    /**
     * Select specific fields to fetch from the Actions
     * 
    **/
    select?: ActionsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ActionsInclude | null
    /**
     * The data needed to create a Actions.
     * 
    **/
    data: XOR<ActionsCreateInput, ActionsUncheckedCreateInput>
  }


  /**
   * Actions createMany
   */
  export type ActionsCreateManyArgs = {
    /**
     * The data used to create many Actions.
     * 
    **/
    data: Enumerable<ActionsCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Actions update
   */
  export type ActionsUpdateArgs = {
    /**
     * Select specific fields to fetch from the Actions
     * 
    **/
    select?: ActionsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ActionsInclude | null
    /**
     * The data needed to update a Actions.
     * 
    **/
    data: XOR<ActionsUpdateInput, ActionsUncheckedUpdateInput>
    /**
     * Choose, which Actions to update.
     * 
    **/
    where: ActionsWhereUniqueInput
  }


  /**
   * Actions updateMany
   */
  export type ActionsUpdateManyArgs = {
    /**
     * The data used to update Actions.
     * 
    **/
    data: XOR<ActionsUpdateManyMutationInput, ActionsUncheckedUpdateManyInput>
    /**
     * Filter which Actions to update
     * 
    **/
    where?: ActionsWhereInput
  }


  /**
   * Actions upsert
   */
  export type ActionsUpsertArgs = {
    /**
     * Select specific fields to fetch from the Actions
     * 
    **/
    select?: ActionsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ActionsInclude | null
    /**
     * The filter to search for the Actions to update in case it exists.
     * 
    **/
    where: ActionsWhereUniqueInput
    /**
     * In case the Actions found by the `where` argument doesn't exist, create a new Actions with this data.
     * 
    **/
    create: XOR<ActionsCreateInput, ActionsUncheckedCreateInput>
    /**
     * In case the Actions was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<ActionsUpdateInput, ActionsUncheckedUpdateInput>
  }


  /**
   * Actions delete
   */
  export type ActionsDeleteArgs = {
    /**
     * Select specific fields to fetch from the Actions
     * 
    **/
    select?: ActionsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ActionsInclude | null
    /**
     * Filter which Actions to delete.
     * 
    **/
    where: ActionsWhereUniqueInput
  }


  /**
   * Actions deleteMany
   */
  export type ActionsDeleteManyArgs = {
    /**
     * Filter which Actions to delete
     * 
    **/
    where?: ActionsWhereInput
  }


  /**
   * Actions.notifications
   */
  export type ActionsNotificationsArgs = {
    /**
     * Select specific fields to fetch from the Notifications
     * 
    **/
    select?: NotificationsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: NotificationsInclude | null
    where?: NotificationsWhereInput
    orderBy?: Enumerable<NotificationsOrderByWithRelationInput>
    cursor?: NotificationsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<NotificationsScalarFieldEnum>
  }


  /**
   * Actions without action
   */
  export type ActionsArgs = {
    /**
     * Select specific fields to fetch from the Actions
     * 
    **/
    select?: ActionsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ActionsInclude | null
  }



  /**
   * Model Notifications
   */


  export type AggregateNotifications = {
    _count: NotificationsCountAggregateOutputType | null
    _min: NotificationsMinAggregateOutputType | null
    _max: NotificationsMaxAggregateOutputType | null
  }

  export type NotificationsMinAggregateOutputType = {
    id: string | null
    user_id: string | null
    action_id: string | null
    readed_at: Date | null
  }

  export type NotificationsMaxAggregateOutputType = {
    id: string | null
    user_id: string | null
    action_id: string | null
    readed_at: Date | null
  }

  export type NotificationsCountAggregateOutputType = {
    id: number
    user_id: number
    action_id: number
    readed_at: number
    _all: number
  }


  export type NotificationsMinAggregateInputType = {
    id?: true
    user_id?: true
    action_id?: true
    readed_at?: true
  }

  export type NotificationsMaxAggregateInputType = {
    id?: true
    user_id?: true
    action_id?: true
    readed_at?: true
  }

  export type NotificationsCountAggregateInputType = {
    id?: true
    user_id?: true
    action_id?: true
    readed_at?: true
    _all?: true
  }

  export type NotificationsAggregateArgs = {
    /**
     * Filter which Notifications to aggregate.
     * 
    **/
    where?: NotificationsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     * 
    **/
    orderBy?: Enumerable<NotificationsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: NotificationsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Notifications
    **/
    _count?: true | NotificationsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: NotificationsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: NotificationsMaxAggregateInputType
  }

  export type GetNotificationsAggregateType<T extends NotificationsAggregateArgs> = {
        [P in keyof T & keyof AggregateNotifications]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateNotifications[P]>
      : GetScalarType<T[P], AggregateNotifications[P]>
  }




  export type NotificationsGroupByArgs = {
    where?: NotificationsWhereInput
    orderBy?: Enumerable<NotificationsOrderByWithAggregationInput>
    by: Array<NotificationsScalarFieldEnum>
    having?: NotificationsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: NotificationsCountAggregateInputType | true
    _min?: NotificationsMinAggregateInputType
    _max?: NotificationsMaxAggregateInputType
  }


  export type NotificationsGroupByOutputType = {
    id: string
    user_id: string
    action_id: string
    readed_at: Date
    _count: NotificationsCountAggregateOutputType | null
    _min: NotificationsMinAggregateOutputType | null
    _max: NotificationsMaxAggregateOutputType | null
  }

  type GetNotificationsGroupByPayload<T extends NotificationsGroupByArgs> = PrismaPromise<
    Array<
      PickArray<NotificationsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof NotificationsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], NotificationsGroupByOutputType[P]>
            : GetScalarType<T[P], NotificationsGroupByOutputType[P]>
        }
      >
    >


  export type NotificationsSelect = {
    id?: boolean
    users?: boolean | UsersArgs
    user_id?: boolean
    actions?: boolean | ActionsArgs
    action_id?: boolean
    readed_at?: boolean
  }


  export type NotificationsInclude = {
    users?: boolean | UsersArgs
    actions?: boolean | ActionsArgs
  } 

  export type NotificationsGetPayload<S extends boolean | null | undefined | NotificationsArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Notifications :
    S extends undefined ? never :
    S extends { include: any } & (NotificationsArgs | NotificationsFindManyArgs)
    ? Notifications  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'users' ? UsersGetPayload<S['include'][P]> :
        P extends 'actions' ? ActionsGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (NotificationsArgs | NotificationsFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'users' ? UsersGetPayload<S['select'][P]> :
        P extends 'actions' ? ActionsGetPayload<S['select'][P]> :  P extends keyof Notifications ? Notifications[P] : never
  } 
      : Notifications


  type NotificationsCountArgs = Merge<
    Omit<NotificationsFindManyArgs, 'select' | 'include'> & {
      select?: NotificationsCountAggregateInputType | true
    }
  >

  export interface NotificationsDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Notifications that matches the filter.
     * @param {NotificationsFindUniqueArgs} args - Arguments to find a Notifications
     * @example
     * // Get one Notifications
     * const notifications = await prisma.notifications.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends NotificationsFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, NotificationsFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Notifications'> extends True ? Prisma__NotificationsClient<NotificationsGetPayload<T>> : Prisma__NotificationsClient<NotificationsGetPayload<T> | null, null>

    /**
     * Find one Notifications that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {NotificationsFindUniqueOrThrowArgs} args - Arguments to find a Notifications
     * @example
     * // Get one Notifications
     * const notifications = await prisma.notifications.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends NotificationsFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, NotificationsFindUniqueOrThrowArgs>
    ): Prisma__NotificationsClient<NotificationsGetPayload<T>>

    /**
     * Find the first Notifications that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationsFindFirstArgs} args - Arguments to find a Notifications
     * @example
     * // Get one Notifications
     * const notifications = await prisma.notifications.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends NotificationsFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, NotificationsFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Notifications'> extends True ? Prisma__NotificationsClient<NotificationsGetPayload<T>> : Prisma__NotificationsClient<NotificationsGetPayload<T> | null, null>

    /**
     * Find the first Notifications that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationsFindFirstOrThrowArgs} args - Arguments to find a Notifications
     * @example
     * // Get one Notifications
     * const notifications = await prisma.notifications.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends NotificationsFindFirstOrThrowArgs>(
      args?: SelectSubset<T, NotificationsFindFirstOrThrowArgs>
    ): Prisma__NotificationsClient<NotificationsGetPayload<T>>

    /**
     * Find zero or more Notifications that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Notifications
     * const notifications = await prisma.notifications.findMany()
     * 
     * // Get first 10 Notifications
     * const notifications = await prisma.notifications.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const notificationsWithIdOnly = await prisma.notifications.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends NotificationsFindManyArgs>(
      args?: SelectSubset<T, NotificationsFindManyArgs>
    ): PrismaPromise<Array<NotificationsGetPayload<T>>>

    /**
     * Create a Notifications.
     * @param {NotificationsCreateArgs} args - Arguments to create a Notifications.
     * @example
     * // Create one Notifications
     * const Notifications = await prisma.notifications.create({
     *   data: {
     *     // ... data to create a Notifications
     *   }
     * })
     * 
    **/
    create<T extends NotificationsCreateArgs>(
      args: SelectSubset<T, NotificationsCreateArgs>
    ): Prisma__NotificationsClient<NotificationsGetPayload<T>>

    /**
     * Create many Notifications.
     *     @param {NotificationsCreateManyArgs} args - Arguments to create many Notifications.
     *     @example
     *     // Create many Notifications
     *     const notifications = await prisma.notifications.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends NotificationsCreateManyArgs>(
      args?: SelectSubset<T, NotificationsCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Notifications.
     * @param {NotificationsDeleteArgs} args - Arguments to delete one Notifications.
     * @example
     * // Delete one Notifications
     * const Notifications = await prisma.notifications.delete({
     *   where: {
     *     // ... filter to delete one Notifications
     *   }
     * })
     * 
    **/
    delete<T extends NotificationsDeleteArgs>(
      args: SelectSubset<T, NotificationsDeleteArgs>
    ): Prisma__NotificationsClient<NotificationsGetPayload<T>>

    /**
     * Update one Notifications.
     * @param {NotificationsUpdateArgs} args - Arguments to update one Notifications.
     * @example
     * // Update one Notifications
     * const notifications = await prisma.notifications.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends NotificationsUpdateArgs>(
      args: SelectSubset<T, NotificationsUpdateArgs>
    ): Prisma__NotificationsClient<NotificationsGetPayload<T>>

    /**
     * Delete zero or more Notifications.
     * @param {NotificationsDeleteManyArgs} args - Arguments to filter Notifications to delete.
     * @example
     * // Delete a few Notifications
     * const { count } = await prisma.notifications.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends NotificationsDeleteManyArgs>(
      args?: SelectSubset<T, NotificationsDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Notifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Notifications
     * const notifications = await prisma.notifications.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends NotificationsUpdateManyArgs>(
      args: SelectSubset<T, NotificationsUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Notifications.
     * @param {NotificationsUpsertArgs} args - Arguments to update or create a Notifications.
     * @example
     * // Update or create a Notifications
     * const notifications = await prisma.notifications.upsert({
     *   create: {
     *     // ... data to create a Notifications
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Notifications we want to update
     *   }
     * })
    **/
    upsert<T extends NotificationsUpsertArgs>(
      args: SelectSubset<T, NotificationsUpsertArgs>
    ): Prisma__NotificationsClient<NotificationsGetPayload<T>>

    /**
     * Count the number of Notifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationsCountArgs} args - Arguments to filter Notifications to count.
     * @example
     * // Count the number of Notifications
     * const count = await prisma.notifications.count({
     *   where: {
     *     // ... the filter for the Notifications we want to count
     *   }
     * })
    **/
    count<T extends NotificationsCountArgs>(
      args?: Subset<T, NotificationsCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], NotificationsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Notifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends NotificationsAggregateArgs>(args: Subset<T, NotificationsAggregateArgs>): PrismaPromise<GetNotificationsAggregateType<T>>

    /**
     * Group by Notifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends NotificationsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: NotificationsGroupByArgs['orderBy'] }
        : { orderBy?: NotificationsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, NotificationsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetNotificationsGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Notifications.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__NotificationsClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    users<T extends UsersArgs= {}>(args?: Subset<T, UsersArgs>): Prisma__UsersClient<UsersGetPayload<T> | Null>;

    actions<T extends ActionsArgs= {}>(args?: Subset<T, ActionsArgs>): Prisma__ActionsClient<ActionsGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Notifications base type for findUnique actions
   */
  export type NotificationsFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Notifications
     * 
    **/
    select?: NotificationsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: NotificationsInclude | null
    /**
     * Filter, which Notifications to fetch.
     * 
    **/
    where: NotificationsWhereUniqueInput
  }

  /**
   * Notifications findUnique
   */
  export interface NotificationsFindUniqueArgs extends NotificationsFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Notifications findUniqueOrThrow
   */
  export type NotificationsFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Notifications
     * 
    **/
    select?: NotificationsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: NotificationsInclude | null
    /**
     * Filter, which Notifications to fetch.
     * 
    **/
    where: NotificationsWhereUniqueInput
  }


  /**
   * Notifications base type for findFirst actions
   */
  export type NotificationsFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Notifications
     * 
    **/
    select?: NotificationsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: NotificationsInclude | null
    /**
     * Filter, which Notifications to fetch.
     * 
    **/
    where?: NotificationsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     * 
    **/
    orderBy?: Enumerable<NotificationsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Notifications.
     * 
    **/
    cursor?: NotificationsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Notifications.
     * 
    **/
    distinct?: Enumerable<NotificationsScalarFieldEnum>
  }

  /**
   * Notifications findFirst
   */
  export interface NotificationsFindFirstArgs extends NotificationsFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Notifications findFirstOrThrow
   */
  export type NotificationsFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Notifications
     * 
    **/
    select?: NotificationsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: NotificationsInclude | null
    /**
     * Filter, which Notifications to fetch.
     * 
    **/
    where?: NotificationsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     * 
    **/
    orderBy?: Enumerable<NotificationsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Notifications.
     * 
    **/
    cursor?: NotificationsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Notifications.
     * 
    **/
    distinct?: Enumerable<NotificationsScalarFieldEnum>
  }


  /**
   * Notifications findMany
   */
  export type NotificationsFindManyArgs = {
    /**
     * Select specific fields to fetch from the Notifications
     * 
    **/
    select?: NotificationsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: NotificationsInclude | null
    /**
     * Filter, which Notifications to fetch.
     * 
    **/
    where?: NotificationsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     * 
    **/
    orderBy?: Enumerable<NotificationsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Notifications.
     * 
    **/
    cursor?: NotificationsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     * 
    **/
    skip?: number
    distinct?: Enumerable<NotificationsScalarFieldEnum>
  }


  /**
   * Notifications create
   */
  export type NotificationsCreateArgs = {
    /**
     * Select specific fields to fetch from the Notifications
     * 
    **/
    select?: NotificationsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: NotificationsInclude | null
    /**
     * The data needed to create a Notifications.
     * 
    **/
    data: XOR<NotificationsCreateInput, NotificationsUncheckedCreateInput>
  }


  /**
   * Notifications createMany
   */
  export type NotificationsCreateManyArgs = {
    /**
     * The data used to create many Notifications.
     * 
    **/
    data: Enumerable<NotificationsCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Notifications update
   */
  export type NotificationsUpdateArgs = {
    /**
     * Select specific fields to fetch from the Notifications
     * 
    **/
    select?: NotificationsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: NotificationsInclude | null
    /**
     * The data needed to update a Notifications.
     * 
    **/
    data: XOR<NotificationsUpdateInput, NotificationsUncheckedUpdateInput>
    /**
     * Choose, which Notifications to update.
     * 
    **/
    where: NotificationsWhereUniqueInput
  }


  /**
   * Notifications updateMany
   */
  export type NotificationsUpdateManyArgs = {
    /**
     * The data used to update Notifications.
     * 
    **/
    data: XOR<NotificationsUpdateManyMutationInput, NotificationsUncheckedUpdateManyInput>
    /**
     * Filter which Notifications to update
     * 
    **/
    where?: NotificationsWhereInput
  }


  /**
   * Notifications upsert
   */
  export type NotificationsUpsertArgs = {
    /**
     * Select specific fields to fetch from the Notifications
     * 
    **/
    select?: NotificationsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: NotificationsInclude | null
    /**
     * The filter to search for the Notifications to update in case it exists.
     * 
    **/
    where: NotificationsWhereUniqueInput
    /**
     * In case the Notifications found by the `where` argument doesn't exist, create a new Notifications with this data.
     * 
    **/
    create: XOR<NotificationsCreateInput, NotificationsUncheckedCreateInput>
    /**
     * In case the Notifications was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<NotificationsUpdateInput, NotificationsUncheckedUpdateInput>
  }


  /**
   * Notifications delete
   */
  export type NotificationsDeleteArgs = {
    /**
     * Select specific fields to fetch from the Notifications
     * 
    **/
    select?: NotificationsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: NotificationsInclude | null
    /**
     * Filter which Notifications to delete.
     * 
    **/
    where: NotificationsWhereUniqueInput
  }


  /**
   * Notifications deleteMany
   */
  export type NotificationsDeleteManyArgs = {
    /**
     * Filter which Notifications to delete
     * 
    **/
    where?: NotificationsWhereInput
  }


  /**
   * Notifications without action
   */
  export type NotificationsArgs = {
    /**
     * Select specific fields to fetch from the Notifications
     * 
    **/
    select?: NotificationsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: NotificationsInclude | null
  }



  /**
   * Model Tasks
   */


  export type AggregateTasks = {
    _count: TasksCountAggregateOutputType | null
    _min: TasksMinAggregateOutputType | null
    _max: TasksMaxAggregateOutputType | null
  }

  export type TasksMinAggregateOutputType = {
    id: string | null
    title: string | null
    description: string | null
    owner_id: string | null
    due_at: Date | null
    created_at: Date | null
    updated_at: Date | null
    state: TaskState | null
  }

  export type TasksMaxAggregateOutputType = {
    id: string | null
    title: string | null
    description: string | null
    owner_id: string | null
    due_at: Date | null
    created_at: Date | null
    updated_at: Date | null
    state: TaskState | null
  }

  export type TasksCountAggregateOutputType = {
    id: number
    title: number
    description: number
    owner_id: number
    due_at: number
    created_at: number
    updated_at: number
    state: number
    _all: number
  }


  export type TasksMinAggregateInputType = {
    id?: true
    title?: true
    description?: true
    owner_id?: true
    due_at?: true
    created_at?: true
    updated_at?: true
    state?: true
  }

  export type TasksMaxAggregateInputType = {
    id?: true
    title?: true
    description?: true
    owner_id?: true
    due_at?: true
    created_at?: true
    updated_at?: true
    state?: true
  }

  export type TasksCountAggregateInputType = {
    id?: true
    title?: true
    description?: true
    owner_id?: true
    due_at?: true
    created_at?: true
    updated_at?: true
    state?: true
    _all?: true
  }

  export type TasksAggregateArgs = {
    /**
     * Filter which Tasks to aggregate.
     * 
    **/
    where?: TasksWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tasks to fetch.
     * 
    **/
    orderBy?: Enumerable<TasksOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: TasksWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tasks from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tasks.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Tasks
    **/
    _count?: true | TasksCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TasksMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TasksMaxAggregateInputType
  }

  export type GetTasksAggregateType<T extends TasksAggregateArgs> = {
        [P in keyof T & keyof AggregateTasks]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTasks[P]>
      : GetScalarType<T[P], AggregateTasks[P]>
  }




  export type TasksGroupByArgs = {
    where?: TasksWhereInput
    orderBy?: Enumerable<TasksOrderByWithAggregationInput>
    by: Array<TasksScalarFieldEnum>
    having?: TasksScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TasksCountAggregateInputType | true
    _min?: TasksMinAggregateInputType
    _max?: TasksMaxAggregateInputType
  }


  export type TasksGroupByOutputType = {
    id: string
    title: string
    description: string
    owner_id: string
    due_at: Date
    created_at: Date
    updated_at: Date
    state: TaskState
    _count: TasksCountAggregateOutputType | null
    _min: TasksMinAggregateOutputType | null
    _max: TasksMaxAggregateOutputType | null
  }

  type GetTasksGroupByPayload<T extends TasksGroupByArgs> = PrismaPromise<
    Array<
      PickArray<TasksGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TasksGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TasksGroupByOutputType[P]>
            : GetScalarType<T[P], TasksGroupByOutputType[P]>
        }
      >
    >


  export type TasksSelect = {
    id?: boolean
    title?: boolean
    description?: boolean
    users?: boolean | UsersArgs
    owner_id?: boolean
    due_at?: boolean
    created_at?: boolean
    updated_at?: boolean
    state?: boolean
    assignees?: boolean | assigneesArgs
    comments?: boolean | TasksCommentsArgs
    _count?: boolean | TasksCountOutputTypeArgs
  }


  export type TasksInclude = {
    users?: boolean | UsersArgs
    assignees?: boolean | assigneesArgs
    comments?: boolean | TasksCommentsArgs
    _count?: boolean | TasksCountOutputTypeArgs
  } 

  export type TasksGetPayload<S extends boolean | null | undefined | TasksArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Tasks :
    S extends undefined ? never :
    S extends { include: any } & (TasksArgs | TasksFindManyArgs)
    ? Tasks  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'users' ? UsersGetPayload<S['include'][P]> :
        P extends 'assignees' ? assigneesGetPayload<S['include'][P]> | null :
        P extends 'comments' ? Array < CommentsGetPayload<S['include'][P]>>  :
        P extends '_count' ? TasksCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (TasksArgs | TasksFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'users' ? UsersGetPayload<S['select'][P]> :
        P extends 'assignees' ? assigneesGetPayload<S['select'][P]> | null :
        P extends 'comments' ? Array < CommentsGetPayload<S['select'][P]>>  :
        P extends '_count' ? TasksCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Tasks ? Tasks[P] : never
  } 
      : Tasks


  type TasksCountArgs = Merge<
    Omit<TasksFindManyArgs, 'select' | 'include'> & {
      select?: TasksCountAggregateInputType | true
    }
  >

  export interface TasksDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Tasks that matches the filter.
     * @param {TasksFindUniqueArgs} args - Arguments to find a Tasks
     * @example
     * // Get one Tasks
     * const tasks = await prisma.tasks.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends TasksFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, TasksFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Tasks'> extends True ? Prisma__TasksClient<TasksGetPayload<T>> : Prisma__TasksClient<TasksGetPayload<T> | null, null>

    /**
     * Find one Tasks that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {TasksFindUniqueOrThrowArgs} args - Arguments to find a Tasks
     * @example
     * // Get one Tasks
     * const tasks = await prisma.tasks.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends TasksFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, TasksFindUniqueOrThrowArgs>
    ): Prisma__TasksClient<TasksGetPayload<T>>

    /**
     * Find the first Tasks that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TasksFindFirstArgs} args - Arguments to find a Tasks
     * @example
     * // Get one Tasks
     * const tasks = await prisma.tasks.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends TasksFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, TasksFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Tasks'> extends True ? Prisma__TasksClient<TasksGetPayload<T>> : Prisma__TasksClient<TasksGetPayload<T> | null, null>

    /**
     * Find the first Tasks that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TasksFindFirstOrThrowArgs} args - Arguments to find a Tasks
     * @example
     * // Get one Tasks
     * const tasks = await prisma.tasks.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends TasksFindFirstOrThrowArgs>(
      args?: SelectSubset<T, TasksFindFirstOrThrowArgs>
    ): Prisma__TasksClient<TasksGetPayload<T>>

    /**
     * Find zero or more Tasks that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TasksFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Tasks
     * const tasks = await prisma.tasks.findMany()
     * 
     * // Get first 10 Tasks
     * const tasks = await prisma.tasks.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const tasksWithIdOnly = await prisma.tasks.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends TasksFindManyArgs>(
      args?: SelectSubset<T, TasksFindManyArgs>
    ): PrismaPromise<Array<TasksGetPayload<T>>>

    /**
     * Create a Tasks.
     * @param {TasksCreateArgs} args - Arguments to create a Tasks.
     * @example
     * // Create one Tasks
     * const Tasks = await prisma.tasks.create({
     *   data: {
     *     // ... data to create a Tasks
     *   }
     * })
     * 
    **/
    create<T extends TasksCreateArgs>(
      args: SelectSubset<T, TasksCreateArgs>
    ): Prisma__TasksClient<TasksGetPayload<T>>

    /**
     * Create many Tasks.
     *     @param {TasksCreateManyArgs} args - Arguments to create many Tasks.
     *     @example
     *     // Create many Tasks
     *     const tasks = await prisma.tasks.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends TasksCreateManyArgs>(
      args?: SelectSubset<T, TasksCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Tasks.
     * @param {TasksDeleteArgs} args - Arguments to delete one Tasks.
     * @example
     * // Delete one Tasks
     * const Tasks = await prisma.tasks.delete({
     *   where: {
     *     // ... filter to delete one Tasks
     *   }
     * })
     * 
    **/
    delete<T extends TasksDeleteArgs>(
      args: SelectSubset<T, TasksDeleteArgs>
    ): Prisma__TasksClient<TasksGetPayload<T>>

    /**
     * Update one Tasks.
     * @param {TasksUpdateArgs} args - Arguments to update one Tasks.
     * @example
     * // Update one Tasks
     * const tasks = await prisma.tasks.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends TasksUpdateArgs>(
      args: SelectSubset<T, TasksUpdateArgs>
    ): Prisma__TasksClient<TasksGetPayload<T>>

    /**
     * Delete zero or more Tasks.
     * @param {TasksDeleteManyArgs} args - Arguments to filter Tasks to delete.
     * @example
     * // Delete a few Tasks
     * const { count } = await prisma.tasks.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends TasksDeleteManyArgs>(
      args?: SelectSubset<T, TasksDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Tasks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TasksUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Tasks
     * const tasks = await prisma.tasks.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends TasksUpdateManyArgs>(
      args: SelectSubset<T, TasksUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Tasks.
     * @param {TasksUpsertArgs} args - Arguments to update or create a Tasks.
     * @example
     * // Update or create a Tasks
     * const tasks = await prisma.tasks.upsert({
     *   create: {
     *     // ... data to create a Tasks
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Tasks we want to update
     *   }
     * })
    **/
    upsert<T extends TasksUpsertArgs>(
      args: SelectSubset<T, TasksUpsertArgs>
    ): Prisma__TasksClient<TasksGetPayload<T>>

    /**
     * Count the number of Tasks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TasksCountArgs} args - Arguments to filter Tasks to count.
     * @example
     * // Count the number of Tasks
     * const count = await prisma.tasks.count({
     *   where: {
     *     // ... the filter for the Tasks we want to count
     *   }
     * })
    **/
    count<T extends TasksCountArgs>(
      args?: Subset<T, TasksCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TasksCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Tasks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TasksAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TasksAggregateArgs>(args: Subset<T, TasksAggregateArgs>): PrismaPromise<GetTasksAggregateType<T>>

    /**
     * Group by Tasks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TasksGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TasksGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TasksGroupByArgs['orderBy'] }
        : { orderBy?: TasksGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TasksGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTasksGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Tasks.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__TasksClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    users<T extends UsersArgs= {}>(args?: Subset<T, UsersArgs>): Prisma__UsersClient<UsersGetPayload<T> | Null>;

    assignees<T extends assigneesArgs= {}>(args?: Subset<T, assigneesArgs>): Prisma__assigneesClient<assigneesGetPayload<T> | Null>;

    comments<T extends TasksCommentsArgs= {}>(args?: Subset<T, TasksCommentsArgs>): PrismaPromise<Array<CommentsGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Tasks base type for findUnique actions
   */
  export type TasksFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Tasks
     * 
    **/
    select?: TasksSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TasksInclude | null
    /**
     * Filter, which Tasks to fetch.
     * 
    **/
    where: TasksWhereUniqueInput
  }

  /**
   * Tasks findUnique
   */
  export interface TasksFindUniqueArgs extends TasksFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Tasks findUniqueOrThrow
   */
  export type TasksFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Tasks
     * 
    **/
    select?: TasksSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TasksInclude | null
    /**
     * Filter, which Tasks to fetch.
     * 
    **/
    where: TasksWhereUniqueInput
  }


  /**
   * Tasks base type for findFirst actions
   */
  export type TasksFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Tasks
     * 
    **/
    select?: TasksSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TasksInclude | null
    /**
     * Filter, which Tasks to fetch.
     * 
    **/
    where?: TasksWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tasks to fetch.
     * 
    **/
    orderBy?: Enumerable<TasksOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Tasks.
     * 
    **/
    cursor?: TasksWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tasks from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tasks.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Tasks.
     * 
    **/
    distinct?: Enumerable<TasksScalarFieldEnum>
  }

  /**
   * Tasks findFirst
   */
  export interface TasksFindFirstArgs extends TasksFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Tasks findFirstOrThrow
   */
  export type TasksFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Tasks
     * 
    **/
    select?: TasksSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TasksInclude | null
    /**
     * Filter, which Tasks to fetch.
     * 
    **/
    where?: TasksWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tasks to fetch.
     * 
    **/
    orderBy?: Enumerable<TasksOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Tasks.
     * 
    **/
    cursor?: TasksWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tasks from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tasks.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Tasks.
     * 
    **/
    distinct?: Enumerable<TasksScalarFieldEnum>
  }


  /**
   * Tasks findMany
   */
  export type TasksFindManyArgs = {
    /**
     * Select specific fields to fetch from the Tasks
     * 
    **/
    select?: TasksSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TasksInclude | null
    /**
     * Filter, which Tasks to fetch.
     * 
    **/
    where?: TasksWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tasks to fetch.
     * 
    **/
    orderBy?: Enumerable<TasksOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Tasks.
     * 
    **/
    cursor?: TasksWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tasks from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tasks.
     * 
    **/
    skip?: number
    distinct?: Enumerable<TasksScalarFieldEnum>
  }


  /**
   * Tasks create
   */
  export type TasksCreateArgs = {
    /**
     * Select specific fields to fetch from the Tasks
     * 
    **/
    select?: TasksSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TasksInclude | null
    /**
     * The data needed to create a Tasks.
     * 
    **/
    data: XOR<TasksCreateInput, TasksUncheckedCreateInput>
  }


  /**
   * Tasks createMany
   */
  export type TasksCreateManyArgs = {
    /**
     * The data used to create many Tasks.
     * 
    **/
    data: Enumerable<TasksCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Tasks update
   */
  export type TasksUpdateArgs = {
    /**
     * Select specific fields to fetch from the Tasks
     * 
    **/
    select?: TasksSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TasksInclude | null
    /**
     * The data needed to update a Tasks.
     * 
    **/
    data: XOR<TasksUpdateInput, TasksUncheckedUpdateInput>
    /**
     * Choose, which Tasks to update.
     * 
    **/
    where: TasksWhereUniqueInput
  }


  /**
   * Tasks updateMany
   */
  export type TasksUpdateManyArgs = {
    /**
     * The data used to update Tasks.
     * 
    **/
    data: XOR<TasksUpdateManyMutationInput, TasksUncheckedUpdateManyInput>
    /**
     * Filter which Tasks to update
     * 
    **/
    where?: TasksWhereInput
  }


  /**
   * Tasks upsert
   */
  export type TasksUpsertArgs = {
    /**
     * Select specific fields to fetch from the Tasks
     * 
    **/
    select?: TasksSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TasksInclude | null
    /**
     * The filter to search for the Tasks to update in case it exists.
     * 
    **/
    where: TasksWhereUniqueInput
    /**
     * In case the Tasks found by the `where` argument doesn't exist, create a new Tasks with this data.
     * 
    **/
    create: XOR<TasksCreateInput, TasksUncheckedCreateInput>
    /**
     * In case the Tasks was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<TasksUpdateInput, TasksUncheckedUpdateInput>
  }


  /**
   * Tasks delete
   */
  export type TasksDeleteArgs = {
    /**
     * Select specific fields to fetch from the Tasks
     * 
    **/
    select?: TasksSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TasksInclude | null
    /**
     * Filter which Tasks to delete.
     * 
    **/
    where: TasksWhereUniqueInput
  }


  /**
   * Tasks deleteMany
   */
  export type TasksDeleteManyArgs = {
    /**
     * Filter which Tasks to delete
     * 
    **/
    where?: TasksWhereInput
  }


  /**
   * Tasks.comments
   */
  export type TasksCommentsArgs = {
    /**
     * Select specific fields to fetch from the Comments
     * 
    **/
    select?: CommentsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CommentsInclude | null
    where?: CommentsWhereInput
    orderBy?: Enumerable<CommentsOrderByWithRelationInput>
    cursor?: CommentsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<CommentsScalarFieldEnum>
  }


  /**
   * Tasks without action
   */
  export type TasksArgs = {
    /**
     * Select specific fields to fetch from the Tasks
     * 
    **/
    select?: TasksSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TasksInclude | null
  }



  /**
   * Model Comments
   */


  export type AggregateComments = {
    _count: CommentsCountAggregateOutputType | null
    _min: CommentsMinAggregateOutputType | null
    _max: CommentsMaxAggregateOutputType | null
  }

  export type CommentsMinAggregateOutputType = {
    id: string | null
    owner_id: string | null
    target_id: string | null
    target_type: CommentTargetType | null
    parent_id: string | null
    content: string | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type CommentsMaxAggregateOutputType = {
    id: string | null
    owner_id: string | null
    target_id: string | null
    target_type: CommentTargetType | null
    parent_id: string | null
    content: string | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type CommentsCountAggregateOutputType = {
    id: number
    owner_id: number
    target_id: number
    target_type: number
    parent_id: number
    content: number
    created_at: number
    updated_at: number
    _all: number
  }


  export type CommentsMinAggregateInputType = {
    id?: true
    owner_id?: true
    target_id?: true
    target_type?: true
    parent_id?: true
    content?: true
    created_at?: true
    updated_at?: true
  }

  export type CommentsMaxAggregateInputType = {
    id?: true
    owner_id?: true
    target_id?: true
    target_type?: true
    parent_id?: true
    content?: true
    created_at?: true
    updated_at?: true
  }

  export type CommentsCountAggregateInputType = {
    id?: true
    owner_id?: true
    target_id?: true
    target_type?: true
    parent_id?: true
    content?: true
    created_at?: true
    updated_at?: true
    _all?: true
  }

  export type CommentsAggregateArgs = {
    /**
     * Filter which Comments to aggregate.
     * 
    **/
    where?: CommentsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Comments to fetch.
     * 
    **/
    orderBy?: Enumerable<CommentsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: CommentsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Comments from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Comments.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Comments
    **/
    _count?: true | CommentsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CommentsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CommentsMaxAggregateInputType
  }

  export type GetCommentsAggregateType<T extends CommentsAggregateArgs> = {
        [P in keyof T & keyof AggregateComments]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateComments[P]>
      : GetScalarType<T[P], AggregateComments[P]>
  }




  export type CommentsGroupByArgs = {
    where?: CommentsWhereInput
    orderBy?: Enumerable<CommentsOrderByWithAggregationInput>
    by: Array<CommentsScalarFieldEnum>
    having?: CommentsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CommentsCountAggregateInputType | true
    _min?: CommentsMinAggregateInputType
    _max?: CommentsMaxAggregateInputType
  }


  export type CommentsGroupByOutputType = {
    id: string
    owner_id: string
    target_id: string
    target_type: CommentTargetType
    parent_id: string
    content: string
    created_at: Date
    updated_at: Date
    _count: CommentsCountAggregateOutputType | null
    _min: CommentsMinAggregateOutputType | null
    _max: CommentsMaxAggregateOutputType | null
  }

  type GetCommentsGroupByPayload<T extends CommentsGroupByArgs> = PrismaPromise<
    Array<
      PickArray<CommentsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CommentsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CommentsGroupByOutputType[P]>
            : GetScalarType<T[P], CommentsGroupByOutputType[P]>
        }
      >
    >


  export type CommentsSelect = {
    id?: boolean
    users?: boolean | UsersArgs
    owner_id?: boolean
    tasks?: boolean | TasksArgs
    target_id?: boolean
    target_type?: boolean
    parent_id?: boolean
    content?: boolean
    created_at?: boolean
    updated_at?: boolean
  }


  export type CommentsInclude = {
    users?: boolean | UsersArgs
    tasks?: boolean | TasksArgs
  } 

  export type CommentsGetPayload<S extends boolean | null | undefined | CommentsArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Comments :
    S extends undefined ? never :
    S extends { include: any } & (CommentsArgs | CommentsFindManyArgs)
    ? Comments  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'users' ? UsersGetPayload<S['include'][P]> :
        P extends 'tasks' ? TasksGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (CommentsArgs | CommentsFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'users' ? UsersGetPayload<S['select'][P]> :
        P extends 'tasks' ? TasksGetPayload<S['select'][P]> :  P extends keyof Comments ? Comments[P] : never
  } 
      : Comments


  type CommentsCountArgs = Merge<
    Omit<CommentsFindManyArgs, 'select' | 'include'> & {
      select?: CommentsCountAggregateInputType | true
    }
  >

  export interface CommentsDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Comments that matches the filter.
     * @param {CommentsFindUniqueArgs} args - Arguments to find a Comments
     * @example
     * // Get one Comments
     * const comments = await prisma.comments.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends CommentsFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, CommentsFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Comments'> extends True ? Prisma__CommentsClient<CommentsGetPayload<T>> : Prisma__CommentsClient<CommentsGetPayload<T> | null, null>

    /**
     * Find one Comments that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {CommentsFindUniqueOrThrowArgs} args - Arguments to find a Comments
     * @example
     * // Get one Comments
     * const comments = await prisma.comments.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends CommentsFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, CommentsFindUniqueOrThrowArgs>
    ): Prisma__CommentsClient<CommentsGetPayload<T>>

    /**
     * Find the first Comments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentsFindFirstArgs} args - Arguments to find a Comments
     * @example
     * // Get one Comments
     * const comments = await prisma.comments.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends CommentsFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, CommentsFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Comments'> extends True ? Prisma__CommentsClient<CommentsGetPayload<T>> : Prisma__CommentsClient<CommentsGetPayload<T> | null, null>

    /**
     * Find the first Comments that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentsFindFirstOrThrowArgs} args - Arguments to find a Comments
     * @example
     * // Get one Comments
     * const comments = await prisma.comments.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends CommentsFindFirstOrThrowArgs>(
      args?: SelectSubset<T, CommentsFindFirstOrThrowArgs>
    ): Prisma__CommentsClient<CommentsGetPayload<T>>

    /**
     * Find zero or more Comments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Comments
     * const comments = await prisma.comments.findMany()
     * 
     * // Get first 10 Comments
     * const comments = await prisma.comments.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const commentsWithIdOnly = await prisma.comments.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends CommentsFindManyArgs>(
      args?: SelectSubset<T, CommentsFindManyArgs>
    ): PrismaPromise<Array<CommentsGetPayload<T>>>

    /**
     * Create a Comments.
     * @param {CommentsCreateArgs} args - Arguments to create a Comments.
     * @example
     * // Create one Comments
     * const Comments = await prisma.comments.create({
     *   data: {
     *     // ... data to create a Comments
     *   }
     * })
     * 
    **/
    create<T extends CommentsCreateArgs>(
      args: SelectSubset<T, CommentsCreateArgs>
    ): Prisma__CommentsClient<CommentsGetPayload<T>>

    /**
     * Create many Comments.
     *     @param {CommentsCreateManyArgs} args - Arguments to create many Comments.
     *     @example
     *     // Create many Comments
     *     const comments = await prisma.comments.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends CommentsCreateManyArgs>(
      args?: SelectSubset<T, CommentsCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Comments.
     * @param {CommentsDeleteArgs} args - Arguments to delete one Comments.
     * @example
     * // Delete one Comments
     * const Comments = await prisma.comments.delete({
     *   where: {
     *     // ... filter to delete one Comments
     *   }
     * })
     * 
    **/
    delete<T extends CommentsDeleteArgs>(
      args: SelectSubset<T, CommentsDeleteArgs>
    ): Prisma__CommentsClient<CommentsGetPayload<T>>

    /**
     * Update one Comments.
     * @param {CommentsUpdateArgs} args - Arguments to update one Comments.
     * @example
     * // Update one Comments
     * const comments = await prisma.comments.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends CommentsUpdateArgs>(
      args: SelectSubset<T, CommentsUpdateArgs>
    ): Prisma__CommentsClient<CommentsGetPayload<T>>

    /**
     * Delete zero or more Comments.
     * @param {CommentsDeleteManyArgs} args - Arguments to filter Comments to delete.
     * @example
     * // Delete a few Comments
     * const { count } = await prisma.comments.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends CommentsDeleteManyArgs>(
      args?: SelectSubset<T, CommentsDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Comments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Comments
     * const comments = await prisma.comments.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends CommentsUpdateManyArgs>(
      args: SelectSubset<T, CommentsUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Comments.
     * @param {CommentsUpsertArgs} args - Arguments to update or create a Comments.
     * @example
     * // Update or create a Comments
     * const comments = await prisma.comments.upsert({
     *   create: {
     *     // ... data to create a Comments
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Comments we want to update
     *   }
     * })
    **/
    upsert<T extends CommentsUpsertArgs>(
      args: SelectSubset<T, CommentsUpsertArgs>
    ): Prisma__CommentsClient<CommentsGetPayload<T>>

    /**
     * Count the number of Comments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentsCountArgs} args - Arguments to filter Comments to count.
     * @example
     * // Count the number of Comments
     * const count = await prisma.comments.count({
     *   where: {
     *     // ... the filter for the Comments we want to count
     *   }
     * })
    **/
    count<T extends CommentsCountArgs>(
      args?: Subset<T, CommentsCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CommentsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Comments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CommentsAggregateArgs>(args: Subset<T, CommentsAggregateArgs>): PrismaPromise<GetCommentsAggregateType<T>>

    /**
     * Group by Comments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CommentsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CommentsGroupByArgs['orderBy'] }
        : { orderBy?: CommentsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CommentsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCommentsGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Comments.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__CommentsClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    users<T extends UsersArgs= {}>(args?: Subset<T, UsersArgs>): Prisma__UsersClient<UsersGetPayload<T> | Null>;

    tasks<T extends TasksArgs= {}>(args?: Subset<T, TasksArgs>): Prisma__TasksClient<TasksGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Comments base type for findUnique actions
   */
  export type CommentsFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Comments
     * 
    **/
    select?: CommentsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CommentsInclude | null
    /**
     * Filter, which Comments to fetch.
     * 
    **/
    where: CommentsWhereUniqueInput
  }

  /**
   * Comments findUnique
   */
  export interface CommentsFindUniqueArgs extends CommentsFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Comments findUniqueOrThrow
   */
  export type CommentsFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Comments
     * 
    **/
    select?: CommentsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CommentsInclude | null
    /**
     * Filter, which Comments to fetch.
     * 
    **/
    where: CommentsWhereUniqueInput
  }


  /**
   * Comments base type for findFirst actions
   */
  export type CommentsFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Comments
     * 
    **/
    select?: CommentsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CommentsInclude | null
    /**
     * Filter, which Comments to fetch.
     * 
    **/
    where?: CommentsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Comments to fetch.
     * 
    **/
    orderBy?: Enumerable<CommentsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Comments.
     * 
    **/
    cursor?: CommentsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Comments from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Comments.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Comments.
     * 
    **/
    distinct?: Enumerable<CommentsScalarFieldEnum>
  }

  /**
   * Comments findFirst
   */
  export interface CommentsFindFirstArgs extends CommentsFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Comments findFirstOrThrow
   */
  export type CommentsFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Comments
     * 
    **/
    select?: CommentsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CommentsInclude | null
    /**
     * Filter, which Comments to fetch.
     * 
    **/
    where?: CommentsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Comments to fetch.
     * 
    **/
    orderBy?: Enumerable<CommentsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Comments.
     * 
    **/
    cursor?: CommentsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Comments from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Comments.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Comments.
     * 
    **/
    distinct?: Enumerable<CommentsScalarFieldEnum>
  }


  /**
   * Comments findMany
   */
  export type CommentsFindManyArgs = {
    /**
     * Select specific fields to fetch from the Comments
     * 
    **/
    select?: CommentsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CommentsInclude | null
    /**
     * Filter, which Comments to fetch.
     * 
    **/
    where?: CommentsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Comments to fetch.
     * 
    **/
    orderBy?: Enumerable<CommentsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Comments.
     * 
    **/
    cursor?: CommentsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Comments from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Comments.
     * 
    **/
    skip?: number
    distinct?: Enumerable<CommentsScalarFieldEnum>
  }


  /**
   * Comments create
   */
  export type CommentsCreateArgs = {
    /**
     * Select specific fields to fetch from the Comments
     * 
    **/
    select?: CommentsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CommentsInclude | null
    /**
     * The data needed to create a Comments.
     * 
    **/
    data: XOR<CommentsCreateInput, CommentsUncheckedCreateInput>
  }


  /**
   * Comments createMany
   */
  export type CommentsCreateManyArgs = {
    /**
     * The data used to create many Comments.
     * 
    **/
    data: Enumerable<CommentsCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Comments update
   */
  export type CommentsUpdateArgs = {
    /**
     * Select specific fields to fetch from the Comments
     * 
    **/
    select?: CommentsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CommentsInclude | null
    /**
     * The data needed to update a Comments.
     * 
    **/
    data: XOR<CommentsUpdateInput, CommentsUncheckedUpdateInput>
    /**
     * Choose, which Comments to update.
     * 
    **/
    where: CommentsWhereUniqueInput
  }


  /**
   * Comments updateMany
   */
  export type CommentsUpdateManyArgs = {
    /**
     * The data used to update Comments.
     * 
    **/
    data: XOR<CommentsUpdateManyMutationInput, CommentsUncheckedUpdateManyInput>
    /**
     * Filter which Comments to update
     * 
    **/
    where?: CommentsWhereInput
  }


  /**
   * Comments upsert
   */
  export type CommentsUpsertArgs = {
    /**
     * Select specific fields to fetch from the Comments
     * 
    **/
    select?: CommentsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CommentsInclude | null
    /**
     * The filter to search for the Comments to update in case it exists.
     * 
    **/
    where: CommentsWhereUniqueInput
    /**
     * In case the Comments found by the `where` argument doesn't exist, create a new Comments with this data.
     * 
    **/
    create: XOR<CommentsCreateInput, CommentsUncheckedCreateInput>
    /**
     * In case the Comments was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<CommentsUpdateInput, CommentsUncheckedUpdateInput>
  }


  /**
   * Comments delete
   */
  export type CommentsDeleteArgs = {
    /**
     * Select specific fields to fetch from the Comments
     * 
    **/
    select?: CommentsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CommentsInclude | null
    /**
     * Filter which Comments to delete.
     * 
    **/
    where: CommentsWhereUniqueInput
  }


  /**
   * Comments deleteMany
   */
  export type CommentsDeleteManyArgs = {
    /**
     * Filter which Comments to delete
     * 
    **/
    where?: CommentsWhereInput
  }


  /**
   * Comments without action
   */
  export type CommentsArgs = {
    /**
     * Select specific fields to fetch from the Comments
     * 
    **/
    select?: CommentsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CommentsInclude | null
  }



  /**
   * Model assignees
   */


  export type AggregateAssignees = {
    _count: AssigneesCountAggregateOutputType | null
    _min: AssigneesMinAggregateOutputType | null
    _max: AssigneesMaxAggregateOutputType | null
  }

  export type AssigneesMinAggregateOutputType = {
    id: string | null
    task_id: string | null
    user_id: string | null
    created_at: Date | null
  }

  export type AssigneesMaxAggregateOutputType = {
    id: string | null
    task_id: string | null
    user_id: string | null
    created_at: Date | null
  }

  export type AssigneesCountAggregateOutputType = {
    id: number
    task_id: number
    user_id: number
    created_at: number
    _all: number
  }


  export type AssigneesMinAggregateInputType = {
    id?: true
    task_id?: true
    user_id?: true
    created_at?: true
  }

  export type AssigneesMaxAggregateInputType = {
    id?: true
    task_id?: true
    user_id?: true
    created_at?: true
  }

  export type AssigneesCountAggregateInputType = {
    id?: true
    task_id?: true
    user_id?: true
    created_at?: true
    _all?: true
  }

  export type AssigneesAggregateArgs = {
    /**
     * Filter which assignees to aggregate.
     * 
    **/
    where?: assigneesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of assignees to fetch.
     * 
    **/
    orderBy?: Enumerable<assigneesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: assigneesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` assignees from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` assignees.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned assignees
    **/
    _count?: true | AssigneesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AssigneesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AssigneesMaxAggregateInputType
  }

  export type GetAssigneesAggregateType<T extends AssigneesAggregateArgs> = {
        [P in keyof T & keyof AggregateAssignees]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAssignees[P]>
      : GetScalarType<T[P], AggregateAssignees[P]>
  }




  export type AssigneesGroupByArgs = {
    where?: assigneesWhereInput
    orderBy?: Enumerable<assigneesOrderByWithAggregationInput>
    by: Array<AssigneesScalarFieldEnum>
    having?: assigneesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AssigneesCountAggregateInputType | true
    _min?: AssigneesMinAggregateInputType
    _max?: AssigneesMaxAggregateInputType
  }


  export type AssigneesGroupByOutputType = {
    id: string
    task_id: string
    user_id: string
    created_at: Date
    _count: AssigneesCountAggregateOutputType | null
    _min: AssigneesMinAggregateOutputType | null
    _max: AssigneesMaxAggregateOutputType | null
  }

  type GetAssigneesGroupByPayload<T extends AssigneesGroupByArgs> = PrismaPromise<
    Array<
      PickArray<AssigneesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AssigneesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AssigneesGroupByOutputType[P]>
            : GetScalarType<T[P], AssigneesGroupByOutputType[P]>
        }
      >
    >


  export type assigneesSelect = {
    id?: boolean
    tasks?: boolean | TasksArgs
    task_id?: boolean
    users?: boolean | UsersArgs
    user_id?: boolean
    created_at?: boolean
  }


  export type assigneesInclude = {
    tasks?: boolean | TasksArgs
    users?: boolean | UsersArgs
  } 

  export type assigneesGetPayload<S extends boolean | null | undefined | assigneesArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? assignees :
    S extends undefined ? never :
    S extends { include: any } & (assigneesArgs | assigneesFindManyArgs)
    ? assignees  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'tasks' ? TasksGetPayload<S['include'][P]> :
        P extends 'users' ? UsersGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (assigneesArgs | assigneesFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'tasks' ? TasksGetPayload<S['select'][P]> :
        P extends 'users' ? UsersGetPayload<S['select'][P]> :  P extends keyof assignees ? assignees[P] : never
  } 
      : assignees


  type assigneesCountArgs = Merge<
    Omit<assigneesFindManyArgs, 'select' | 'include'> & {
      select?: AssigneesCountAggregateInputType | true
    }
  >

  export interface assigneesDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Assignees that matches the filter.
     * @param {assigneesFindUniqueArgs} args - Arguments to find a Assignees
     * @example
     * // Get one Assignees
     * const assignees = await prisma.assignees.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends assigneesFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, assigneesFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'assignees'> extends True ? Prisma__assigneesClient<assigneesGetPayload<T>> : Prisma__assigneesClient<assigneesGetPayload<T> | null, null>

    /**
     * Find one Assignees that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {assigneesFindUniqueOrThrowArgs} args - Arguments to find a Assignees
     * @example
     * // Get one Assignees
     * const assignees = await prisma.assignees.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends assigneesFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, assigneesFindUniqueOrThrowArgs>
    ): Prisma__assigneesClient<assigneesGetPayload<T>>

    /**
     * Find the first Assignees that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {assigneesFindFirstArgs} args - Arguments to find a Assignees
     * @example
     * // Get one Assignees
     * const assignees = await prisma.assignees.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends assigneesFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, assigneesFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'assignees'> extends True ? Prisma__assigneesClient<assigneesGetPayload<T>> : Prisma__assigneesClient<assigneesGetPayload<T> | null, null>

    /**
     * Find the first Assignees that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {assigneesFindFirstOrThrowArgs} args - Arguments to find a Assignees
     * @example
     * // Get one Assignees
     * const assignees = await prisma.assignees.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends assigneesFindFirstOrThrowArgs>(
      args?: SelectSubset<T, assigneesFindFirstOrThrowArgs>
    ): Prisma__assigneesClient<assigneesGetPayload<T>>

    /**
     * Find zero or more Assignees that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {assigneesFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Assignees
     * const assignees = await prisma.assignees.findMany()
     * 
     * // Get first 10 Assignees
     * const assignees = await prisma.assignees.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const assigneesWithIdOnly = await prisma.assignees.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends assigneesFindManyArgs>(
      args?: SelectSubset<T, assigneesFindManyArgs>
    ): PrismaPromise<Array<assigneesGetPayload<T>>>

    /**
     * Create a Assignees.
     * @param {assigneesCreateArgs} args - Arguments to create a Assignees.
     * @example
     * // Create one Assignees
     * const Assignees = await prisma.assignees.create({
     *   data: {
     *     // ... data to create a Assignees
     *   }
     * })
     * 
    **/
    create<T extends assigneesCreateArgs>(
      args: SelectSubset<T, assigneesCreateArgs>
    ): Prisma__assigneesClient<assigneesGetPayload<T>>

    /**
     * Create many Assignees.
     *     @param {assigneesCreateManyArgs} args - Arguments to create many Assignees.
     *     @example
     *     // Create many Assignees
     *     const assignees = await prisma.assignees.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends assigneesCreateManyArgs>(
      args?: SelectSubset<T, assigneesCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Assignees.
     * @param {assigneesDeleteArgs} args - Arguments to delete one Assignees.
     * @example
     * // Delete one Assignees
     * const Assignees = await prisma.assignees.delete({
     *   where: {
     *     // ... filter to delete one Assignees
     *   }
     * })
     * 
    **/
    delete<T extends assigneesDeleteArgs>(
      args: SelectSubset<T, assigneesDeleteArgs>
    ): Prisma__assigneesClient<assigneesGetPayload<T>>

    /**
     * Update one Assignees.
     * @param {assigneesUpdateArgs} args - Arguments to update one Assignees.
     * @example
     * // Update one Assignees
     * const assignees = await prisma.assignees.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends assigneesUpdateArgs>(
      args: SelectSubset<T, assigneesUpdateArgs>
    ): Prisma__assigneesClient<assigneesGetPayload<T>>

    /**
     * Delete zero or more Assignees.
     * @param {assigneesDeleteManyArgs} args - Arguments to filter Assignees to delete.
     * @example
     * // Delete a few Assignees
     * const { count } = await prisma.assignees.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends assigneesDeleteManyArgs>(
      args?: SelectSubset<T, assigneesDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Assignees.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {assigneesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Assignees
     * const assignees = await prisma.assignees.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends assigneesUpdateManyArgs>(
      args: SelectSubset<T, assigneesUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Assignees.
     * @param {assigneesUpsertArgs} args - Arguments to update or create a Assignees.
     * @example
     * // Update or create a Assignees
     * const assignees = await prisma.assignees.upsert({
     *   create: {
     *     // ... data to create a Assignees
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Assignees we want to update
     *   }
     * })
    **/
    upsert<T extends assigneesUpsertArgs>(
      args: SelectSubset<T, assigneesUpsertArgs>
    ): Prisma__assigneesClient<assigneesGetPayload<T>>

    /**
     * Count the number of Assignees.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {assigneesCountArgs} args - Arguments to filter Assignees to count.
     * @example
     * // Count the number of Assignees
     * const count = await prisma.assignees.count({
     *   where: {
     *     // ... the filter for the Assignees we want to count
     *   }
     * })
    **/
    count<T extends assigneesCountArgs>(
      args?: Subset<T, assigneesCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AssigneesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Assignees.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AssigneesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AssigneesAggregateArgs>(args: Subset<T, AssigneesAggregateArgs>): PrismaPromise<GetAssigneesAggregateType<T>>

    /**
     * Group by Assignees.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AssigneesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AssigneesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AssigneesGroupByArgs['orderBy'] }
        : { orderBy?: AssigneesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AssigneesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAssigneesGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for assignees.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__assigneesClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    tasks<T extends TasksArgs= {}>(args?: Subset<T, TasksArgs>): Prisma__TasksClient<TasksGetPayload<T> | Null>;

    users<T extends UsersArgs= {}>(args?: Subset<T, UsersArgs>): Prisma__UsersClient<UsersGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * assignees base type for findUnique actions
   */
  export type assigneesFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the assignees
     * 
    **/
    select?: assigneesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: assigneesInclude | null
    /**
     * Filter, which assignees to fetch.
     * 
    **/
    where: assigneesWhereUniqueInput
  }

  /**
   * assignees findUnique
   */
  export interface assigneesFindUniqueArgs extends assigneesFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * assignees findUniqueOrThrow
   */
  export type assigneesFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the assignees
     * 
    **/
    select?: assigneesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: assigneesInclude | null
    /**
     * Filter, which assignees to fetch.
     * 
    **/
    where: assigneesWhereUniqueInput
  }


  /**
   * assignees base type for findFirst actions
   */
  export type assigneesFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the assignees
     * 
    **/
    select?: assigneesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: assigneesInclude | null
    /**
     * Filter, which assignees to fetch.
     * 
    **/
    where?: assigneesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of assignees to fetch.
     * 
    **/
    orderBy?: Enumerable<assigneesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for assignees.
     * 
    **/
    cursor?: assigneesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` assignees from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` assignees.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of assignees.
     * 
    **/
    distinct?: Enumerable<AssigneesScalarFieldEnum>
  }

  /**
   * assignees findFirst
   */
  export interface assigneesFindFirstArgs extends assigneesFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * assignees findFirstOrThrow
   */
  export type assigneesFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the assignees
     * 
    **/
    select?: assigneesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: assigneesInclude | null
    /**
     * Filter, which assignees to fetch.
     * 
    **/
    where?: assigneesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of assignees to fetch.
     * 
    **/
    orderBy?: Enumerable<assigneesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for assignees.
     * 
    **/
    cursor?: assigneesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` assignees from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` assignees.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of assignees.
     * 
    **/
    distinct?: Enumerable<AssigneesScalarFieldEnum>
  }


  /**
   * assignees findMany
   */
  export type assigneesFindManyArgs = {
    /**
     * Select specific fields to fetch from the assignees
     * 
    **/
    select?: assigneesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: assigneesInclude | null
    /**
     * Filter, which assignees to fetch.
     * 
    **/
    where?: assigneesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of assignees to fetch.
     * 
    **/
    orderBy?: Enumerable<assigneesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing assignees.
     * 
    **/
    cursor?: assigneesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` assignees from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` assignees.
     * 
    **/
    skip?: number
    distinct?: Enumerable<AssigneesScalarFieldEnum>
  }


  /**
   * assignees create
   */
  export type assigneesCreateArgs = {
    /**
     * Select specific fields to fetch from the assignees
     * 
    **/
    select?: assigneesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: assigneesInclude | null
    /**
     * The data needed to create a assignees.
     * 
    **/
    data: XOR<assigneesCreateInput, assigneesUncheckedCreateInput>
  }


  /**
   * assignees createMany
   */
  export type assigneesCreateManyArgs = {
    /**
     * The data used to create many assignees.
     * 
    **/
    data: Enumerable<assigneesCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * assignees update
   */
  export type assigneesUpdateArgs = {
    /**
     * Select specific fields to fetch from the assignees
     * 
    **/
    select?: assigneesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: assigneesInclude | null
    /**
     * The data needed to update a assignees.
     * 
    **/
    data: XOR<assigneesUpdateInput, assigneesUncheckedUpdateInput>
    /**
     * Choose, which assignees to update.
     * 
    **/
    where: assigneesWhereUniqueInput
  }


  /**
   * assignees updateMany
   */
  export type assigneesUpdateManyArgs = {
    /**
     * The data used to update assignees.
     * 
    **/
    data: XOR<assigneesUpdateManyMutationInput, assigneesUncheckedUpdateManyInput>
    /**
     * Filter which assignees to update
     * 
    **/
    where?: assigneesWhereInput
  }


  /**
   * assignees upsert
   */
  export type assigneesUpsertArgs = {
    /**
     * Select specific fields to fetch from the assignees
     * 
    **/
    select?: assigneesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: assigneesInclude | null
    /**
     * The filter to search for the assignees to update in case it exists.
     * 
    **/
    where: assigneesWhereUniqueInput
    /**
     * In case the assignees found by the `where` argument doesn't exist, create a new assignees with this data.
     * 
    **/
    create: XOR<assigneesCreateInput, assigneesUncheckedCreateInput>
    /**
     * In case the assignees was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<assigneesUpdateInput, assigneesUncheckedUpdateInput>
  }


  /**
   * assignees delete
   */
  export type assigneesDeleteArgs = {
    /**
     * Select specific fields to fetch from the assignees
     * 
    **/
    select?: assigneesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: assigneesInclude | null
    /**
     * Filter which assignees to delete.
     * 
    **/
    where: assigneesWhereUniqueInput
  }


  /**
   * assignees deleteMany
   */
  export type assigneesDeleteManyArgs = {
    /**
     * Filter which assignees to delete
     * 
    **/
    where?: assigneesWhereInput
  }


  /**
   * assignees without action
   */
  export type assigneesArgs = {
    /**
     * Select specific fields to fetch from the assignees
     * 
    **/
    select?: assigneesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: assigneesInclude | null
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const ActionsScalarFieldEnum: {
    id: 'id',
    group: 'group',
    name: 'name',
    target_id: 'target_id',
    target_type: 'target_type'
  };

  export type ActionsScalarFieldEnum = (typeof ActionsScalarFieldEnum)[keyof typeof ActionsScalarFieldEnum]


  export const AssigneesScalarFieldEnum: {
    id: 'id',
    task_id: 'task_id',
    user_id: 'user_id',
    created_at: 'created_at'
  };

  export type AssigneesScalarFieldEnum = (typeof AssigneesScalarFieldEnum)[keyof typeof AssigneesScalarFieldEnum]


  export const CommentsScalarFieldEnum: {
    id: 'id',
    owner_id: 'owner_id',
    target_id: 'target_id',
    target_type: 'target_type',
    parent_id: 'parent_id',
    content: 'content',
    created_at: 'created_at',
    updated_at: 'updated_at'
  };

  export type CommentsScalarFieldEnum = (typeof CommentsScalarFieldEnum)[keyof typeof CommentsScalarFieldEnum]


  export const JsonNullValueFilter: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull,
    AnyNull: typeof AnyNull
  };

  export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]


  export const JsonNullValueInput: {
    JsonNull: typeof JsonNull
  };

  export type JsonNullValueInput = (typeof JsonNullValueInput)[keyof typeof JsonNullValueInput]


  export const NotificationsScalarFieldEnum: {
    id: 'id',
    user_id: 'user_id',
    action_id: 'action_id',
    readed_at: 'readed_at'
  };

  export type NotificationsScalarFieldEnum = (typeof NotificationsScalarFieldEnum)[keyof typeof NotificationsScalarFieldEnum]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const TasksScalarFieldEnum: {
    id: 'id',
    title: 'title',
    description: 'description',
    owner_id: 'owner_id',
    due_at: 'due_at',
    created_at: 'created_at',
    updated_at: 'updated_at',
    state: 'state'
  };

  export type TasksScalarFieldEnum = (typeof TasksScalarFieldEnum)[keyof typeof TasksScalarFieldEnum]


  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UsersScalarFieldEnum: {
    id: 'id',
    email: 'email',
    password: 'password',
    password_digest: 'password_digest',
    active: 'active',
    preferences: 'preferences',
    last_sign_in_at: 'last_sign_in_at',
    created_at: 'created_at',
    updated_at: 'updated_at'
  };

  export type UsersScalarFieldEnum = (typeof UsersScalarFieldEnum)[keyof typeof UsersScalarFieldEnum]


  /**
   * Deep Input Types
   */


  export type UsersWhereInput = {
    AND?: Enumerable<UsersWhereInput>
    OR?: Enumerable<UsersWhereInput>
    NOT?: Enumerable<UsersWhereInput>
    id?: StringFilter | string
    email?: StringFilter | string
    password?: StringFilter | string
    password_digest?: StringFilter | string
    active?: BoolFilter | boolean
    preferences?: JsonFilter
    last_sign_in_at?: DateTimeFilter | Date | string
    created_at?: DateTimeFilter | Date | string
    updated_at?: DateTimeFilter | Date | string
    assignees?: XOR<AssigneesRelationFilter, assigneesWhereInput> | null
    tasks?: TasksListRelationFilter
    notifications?: NotificationsListRelationFilter
    comments?: CommentsListRelationFilter
  }

  export type UsersOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    password_digest?: SortOrder
    active?: SortOrder
    preferences?: SortOrder
    last_sign_in_at?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    assignees?: assigneesOrderByWithRelationInput
    tasks?: TasksOrderByRelationAggregateInput
    notifications?: NotificationsOrderByRelationAggregateInput
    comments?: CommentsOrderByRelationAggregateInput
  }

  export type UsersWhereUniqueInput = {
    id?: string
    email?: string
  }

  export type UsersOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    password_digest?: SortOrder
    active?: SortOrder
    preferences?: SortOrder
    last_sign_in_at?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    _count?: UsersCountOrderByAggregateInput
    _max?: UsersMaxOrderByAggregateInput
    _min?: UsersMinOrderByAggregateInput
  }

  export type UsersScalarWhereWithAggregatesInput = {
    AND?: Enumerable<UsersScalarWhereWithAggregatesInput>
    OR?: Enumerable<UsersScalarWhereWithAggregatesInput>
    NOT?: Enumerable<UsersScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    email?: StringWithAggregatesFilter | string
    password?: StringWithAggregatesFilter | string
    password_digest?: StringWithAggregatesFilter | string
    active?: BoolWithAggregatesFilter | boolean
    preferences?: JsonWithAggregatesFilter
    last_sign_in_at?: DateTimeWithAggregatesFilter | Date | string
    created_at?: DateTimeWithAggregatesFilter | Date | string
    updated_at?: DateTimeWithAggregatesFilter | Date | string
  }

  export type ActionsWhereInput = {
    AND?: Enumerable<ActionsWhereInput>
    OR?: Enumerable<ActionsWhereInput>
    NOT?: Enumerable<ActionsWhereInput>
    id?: StringFilter | string
    group?: EnumActionGroupFilter | ActionGroup
    name?: EnumActionNameFilter | ActionName
    target_id?: StringFilter | string
    target_type?: EnumActionTargetTypeFilter | ActionTargetType
    notifications?: NotificationsListRelationFilter
  }

  export type ActionsOrderByWithRelationInput = {
    id?: SortOrder
    group?: SortOrder
    name?: SortOrder
    target_id?: SortOrder
    target_type?: SortOrder
    notifications?: NotificationsOrderByRelationAggregateInput
  }

  export type ActionsWhereUniqueInput = {
    id?: string
  }

  export type ActionsOrderByWithAggregationInput = {
    id?: SortOrder
    group?: SortOrder
    name?: SortOrder
    target_id?: SortOrder
    target_type?: SortOrder
    _count?: ActionsCountOrderByAggregateInput
    _max?: ActionsMaxOrderByAggregateInput
    _min?: ActionsMinOrderByAggregateInput
  }

  export type ActionsScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ActionsScalarWhereWithAggregatesInput>
    OR?: Enumerable<ActionsScalarWhereWithAggregatesInput>
    NOT?: Enumerable<ActionsScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    group?: EnumActionGroupWithAggregatesFilter | ActionGroup
    name?: EnumActionNameWithAggregatesFilter | ActionName
    target_id?: StringWithAggregatesFilter | string
    target_type?: EnumActionTargetTypeWithAggregatesFilter | ActionTargetType
  }

  export type NotificationsWhereInput = {
    AND?: Enumerable<NotificationsWhereInput>
    OR?: Enumerable<NotificationsWhereInput>
    NOT?: Enumerable<NotificationsWhereInput>
    id?: StringFilter | string
    users?: XOR<UsersRelationFilter, UsersWhereInput>
    user_id?: StringFilter | string
    actions?: XOR<ActionsRelationFilter, ActionsWhereInput>
    action_id?: StringFilter | string
    readed_at?: DateTimeFilter | Date | string
  }

  export type NotificationsOrderByWithRelationInput = {
    id?: SortOrder
    users?: UsersOrderByWithRelationInput
    user_id?: SortOrder
    actions?: ActionsOrderByWithRelationInput
    action_id?: SortOrder
    readed_at?: SortOrder
  }

  export type NotificationsWhereUniqueInput = {
    id?: string
  }

  export type NotificationsOrderByWithAggregationInput = {
    id?: SortOrder
    user_id?: SortOrder
    action_id?: SortOrder
    readed_at?: SortOrder
    _count?: NotificationsCountOrderByAggregateInput
    _max?: NotificationsMaxOrderByAggregateInput
    _min?: NotificationsMinOrderByAggregateInput
  }

  export type NotificationsScalarWhereWithAggregatesInput = {
    AND?: Enumerable<NotificationsScalarWhereWithAggregatesInput>
    OR?: Enumerable<NotificationsScalarWhereWithAggregatesInput>
    NOT?: Enumerable<NotificationsScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    user_id?: StringWithAggregatesFilter | string
    action_id?: StringWithAggregatesFilter | string
    readed_at?: DateTimeWithAggregatesFilter | Date | string
  }

  export type TasksWhereInput = {
    AND?: Enumerable<TasksWhereInput>
    OR?: Enumerable<TasksWhereInput>
    NOT?: Enumerable<TasksWhereInput>
    id?: StringFilter | string
    title?: StringFilter | string
    description?: StringFilter | string
    users?: XOR<UsersRelationFilter, UsersWhereInput>
    owner_id?: StringFilter | string
    due_at?: DateTimeFilter | Date | string
    created_at?: DateTimeFilter | Date | string
    updated_at?: DateTimeFilter | Date | string
    state?: EnumTaskStateFilter | TaskState
    assignees?: XOR<AssigneesRelationFilter, assigneesWhereInput> | null
    comments?: CommentsListRelationFilter
  }

  export type TasksOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    users?: UsersOrderByWithRelationInput
    owner_id?: SortOrder
    due_at?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    state?: SortOrder
    assignees?: assigneesOrderByWithRelationInput
    comments?: CommentsOrderByRelationAggregateInput
  }

  export type TasksWhereUniqueInput = {
    id?: string
  }

  export type TasksOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    owner_id?: SortOrder
    due_at?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    state?: SortOrder
    _count?: TasksCountOrderByAggregateInput
    _max?: TasksMaxOrderByAggregateInput
    _min?: TasksMinOrderByAggregateInput
  }

  export type TasksScalarWhereWithAggregatesInput = {
    AND?: Enumerable<TasksScalarWhereWithAggregatesInput>
    OR?: Enumerable<TasksScalarWhereWithAggregatesInput>
    NOT?: Enumerable<TasksScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    title?: StringWithAggregatesFilter | string
    description?: StringWithAggregatesFilter | string
    owner_id?: StringWithAggregatesFilter | string
    due_at?: DateTimeWithAggregatesFilter | Date | string
    created_at?: DateTimeWithAggregatesFilter | Date | string
    updated_at?: DateTimeWithAggregatesFilter | Date | string
    state?: EnumTaskStateWithAggregatesFilter | TaskState
  }

  export type CommentsWhereInput = {
    AND?: Enumerable<CommentsWhereInput>
    OR?: Enumerable<CommentsWhereInput>
    NOT?: Enumerable<CommentsWhereInput>
    id?: StringFilter | string
    users?: XOR<UsersRelationFilter, UsersWhereInput>
    owner_id?: StringFilter | string
    tasks?: XOR<TasksRelationFilter, TasksWhereInput>
    target_id?: StringFilter | string
    target_type?: EnumCommentTargetTypeFilter | CommentTargetType
    parent_id?: StringFilter | string
    content?: StringFilter | string
    created_at?: DateTimeFilter | Date | string
    updated_at?: DateTimeFilter | Date | string
  }

  export type CommentsOrderByWithRelationInput = {
    id?: SortOrder
    users?: UsersOrderByWithRelationInput
    owner_id?: SortOrder
    tasks?: TasksOrderByWithRelationInput
    target_id?: SortOrder
    target_type?: SortOrder
    parent_id?: SortOrder
    content?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type CommentsWhereUniqueInput = {
    id?: string
  }

  export type CommentsOrderByWithAggregationInput = {
    id?: SortOrder
    owner_id?: SortOrder
    target_id?: SortOrder
    target_type?: SortOrder
    parent_id?: SortOrder
    content?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    _count?: CommentsCountOrderByAggregateInput
    _max?: CommentsMaxOrderByAggregateInput
    _min?: CommentsMinOrderByAggregateInput
  }

  export type CommentsScalarWhereWithAggregatesInput = {
    AND?: Enumerable<CommentsScalarWhereWithAggregatesInput>
    OR?: Enumerable<CommentsScalarWhereWithAggregatesInput>
    NOT?: Enumerable<CommentsScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    owner_id?: StringWithAggregatesFilter | string
    target_id?: StringWithAggregatesFilter | string
    target_type?: EnumCommentTargetTypeWithAggregatesFilter | CommentTargetType
    parent_id?: StringWithAggregatesFilter | string
    content?: StringWithAggregatesFilter | string
    created_at?: DateTimeWithAggregatesFilter | Date | string
    updated_at?: DateTimeWithAggregatesFilter | Date | string
  }

  export type assigneesWhereInput = {
    AND?: Enumerable<assigneesWhereInput>
    OR?: Enumerable<assigneesWhereInput>
    NOT?: Enumerable<assigneesWhereInput>
    id?: StringFilter | string
    tasks?: XOR<TasksRelationFilter, TasksWhereInput>
    task_id?: StringFilter | string
    users?: XOR<UsersRelationFilter, UsersWhereInput>
    user_id?: StringFilter | string
    created_at?: DateTimeFilter | Date | string
  }

  export type assigneesOrderByWithRelationInput = {
    id?: SortOrder
    tasks?: TasksOrderByWithRelationInput
    task_id?: SortOrder
    users?: UsersOrderByWithRelationInput
    user_id?: SortOrder
    created_at?: SortOrder
  }

  export type assigneesWhereUniqueInput = {
    id?: string
    task_id?: string
    user_id?: string
  }

  export type assigneesOrderByWithAggregationInput = {
    id?: SortOrder
    task_id?: SortOrder
    user_id?: SortOrder
    created_at?: SortOrder
    _count?: assigneesCountOrderByAggregateInput
    _max?: assigneesMaxOrderByAggregateInput
    _min?: assigneesMinOrderByAggregateInput
  }

  export type assigneesScalarWhereWithAggregatesInput = {
    AND?: Enumerable<assigneesScalarWhereWithAggregatesInput>
    OR?: Enumerable<assigneesScalarWhereWithAggregatesInput>
    NOT?: Enumerable<assigneesScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    task_id?: StringWithAggregatesFilter | string
    user_id?: StringWithAggregatesFilter | string
    created_at?: DateTimeWithAggregatesFilter | Date | string
  }

  export type UsersCreateInput = {
    id?: string
    email: string
    password: string
    password_digest: string
    active: boolean
    preferences: JsonNullValueInput | InputJsonValue
    last_sign_in_at: Date | string
    created_at: Date | string
    updated_at: Date | string
    assignees?: assigneesCreateNestedOneWithoutUsersInput
    tasks?: TasksCreateNestedManyWithoutUsersInput
    notifications?: NotificationsCreateNestedManyWithoutUsersInput
    comments?: CommentsCreateNestedManyWithoutUsersInput
  }

  export type UsersUncheckedCreateInput = {
    id?: string
    email: string
    password: string
    password_digest: string
    active: boolean
    preferences: JsonNullValueInput | InputJsonValue
    last_sign_in_at: Date | string
    created_at: Date | string
    updated_at: Date | string
    assignees?: assigneesUncheckedCreateNestedOneWithoutUsersInput
    tasks?: TasksUncheckedCreateNestedManyWithoutUsersInput
    notifications?: NotificationsUncheckedCreateNestedManyWithoutUsersInput
    comments?: CommentsUncheckedCreateNestedManyWithoutUsersInput
  }

  export type UsersUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    password_digest?: StringFieldUpdateOperationsInput | string
    active?: BoolFieldUpdateOperationsInput | boolean
    preferences?: JsonNullValueInput | InputJsonValue
    last_sign_in_at?: DateTimeFieldUpdateOperationsInput | Date | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    assignees?: assigneesUpdateOneWithoutUsersNestedInput
    tasks?: TasksUpdateManyWithoutUsersNestedInput
    notifications?: NotificationsUpdateManyWithoutUsersNestedInput
    comments?: CommentsUpdateManyWithoutUsersNestedInput
  }

  export type UsersUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    password_digest?: StringFieldUpdateOperationsInput | string
    active?: BoolFieldUpdateOperationsInput | boolean
    preferences?: JsonNullValueInput | InputJsonValue
    last_sign_in_at?: DateTimeFieldUpdateOperationsInput | Date | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    assignees?: assigneesUncheckedUpdateOneWithoutUsersNestedInput
    tasks?: TasksUncheckedUpdateManyWithoutUsersNestedInput
    notifications?: NotificationsUncheckedUpdateManyWithoutUsersNestedInput
    comments?: CommentsUncheckedUpdateManyWithoutUsersNestedInput
  }

  export type UsersCreateManyInput = {
    id?: string
    email: string
    password: string
    password_digest: string
    active: boolean
    preferences: JsonNullValueInput | InputJsonValue
    last_sign_in_at: Date | string
    created_at: Date | string
    updated_at: Date | string
  }

  export type UsersUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    password_digest?: StringFieldUpdateOperationsInput | string
    active?: BoolFieldUpdateOperationsInput | boolean
    preferences?: JsonNullValueInput | InputJsonValue
    last_sign_in_at?: DateTimeFieldUpdateOperationsInput | Date | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UsersUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    password_digest?: StringFieldUpdateOperationsInput | string
    active?: BoolFieldUpdateOperationsInput | boolean
    preferences?: JsonNullValueInput | InputJsonValue
    last_sign_in_at?: DateTimeFieldUpdateOperationsInput | Date | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ActionsCreateInput = {
    id?: string
    group: ActionGroup
    name: ActionName
    target_id?: string
    target_type: ActionTargetType
    notifications?: NotificationsCreateNestedManyWithoutActionsInput
  }

  export type ActionsUncheckedCreateInput = {
    id?: string
    group: ActionGroup
    name: ActionName
    target_id?: string
    target_type: ActionTargetType
    notifications?: NotificationsUncheckedCreateNestedManyWithoutActionsInput
  }

  export type ActionsUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    group?: EnumActionGroupFieldUpdateOperationsInput | ActionGroup
    name?: EnumActionNameFieldUpdateOperationsInput | ActionName
    target_id?: StringFieldUpdateOperationsInput | string
    target_type?: EnumActionTargetTypeFieldUpdateOperationsInput | ActionTargetType
    notifications?: NotificationsUpdateManyWithoutActionsNestedInput
  }

  export type ActionsUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    group?: EnumActionGroupFieldUpdateOperationsInput | ActionGroup
    name?: EnumActionNameFieldUpdateOperationsInput | ActionName
    target_id?: StringFieldUpdateOperationsInput | string
    target_type?: EnumActionTargetTypeFieldUpdateOperationsInput | ActionTargetType
    notifications?: NotificationsUncheckedUpdateManyWithoutActionsNestedInput
  }

  export type ActionsCreateManyInput = {
    id?: string
    group: ActionGroup
    name: ActionName
    target_id?: string
    target_type: ActionTargetType
  }

  export type ActionsUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    group?: EnumActionGroupFieldUpdateOperationsInput | ActionGroup
    name?: EnumActionNameFieldUpdateOperationsInput | ActionName
    target_id?: StringFieldUpdateOperationsInput | string
    target_type?: EnumActionTargetTypeFieldUpdateOperationsInput | ActionTargetType
  }

  export type ActionsUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    group?: EnumActionGroupFieldUpdateOperationsInput | ActionGroup
    name?: EnumActionNameFieldUpdateOperationsInput | ActionName
    target_id?: StringFieldUpdateOperationsInput | string
    target_type?: EnumActionTargetTypeFieldUpdateOperationsInput | ActionTargetType
  }

  export type NotificationsCreateInput = {
    id?: string
    users?: UsersCreateNestedOneWithoutNotificationsInput
    actions?: ActionsCreateNestedOneWithoutNotificationsInput
    readed_at: Date | string
  }

  export type NotificationsUncheckedCreateInput = {
    id?: string
    user_id?: string
    action_id?: string
    readed_at: Date | string
  }

  export type NotificationsUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    users?: UsersUpdateOneRequiredWithoutNotificationsNestedInput
    actions?: ActionsUpdateOneRequiredWithoutNotificationsNestedInput
    readed_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationsUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    user_id?: StringFieldUpdateOperationsInput | string
    action_id?: StringFieldUpdateOperationsInput | string
    readed_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationsCreateManyInput = {
    id?: string
    user_id?: string
    action_id?: string
    readed_at: Date | string
  }

  export type NotificationsUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    readed_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationsUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    user_id?: StringFieldUpdateOperationsInput | string
    action_id?: StringFieldUpdateOperationsInput | string
    readed_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TasksCreateInput = {
    id?: string
    title: string
    description: string
    users?: UsersCreateNestedOneWithoutTasksInput
    due_at: Date | string
    created_at: Date | string
    updated_at: Date | string
    state: TaskState
    assignees?: assigneesCreateNestedOneWithoutTasksInput
    comments?: CommentsCreateNestedManyWithoutTasksInput
  }

  export type TasksUncheckedCreateInput = {
    id?: string
    title: string
    description: string
    owner_id?: string
    due_at: Date | string
    created_at: Date | string
    updated_at: Date | string
    state: TaskState
    assignees?: assigneesUncheckedCreateNestedOneWithoutTasksInput
    comments?: CommentsUncheckedCreateNestedManyWithoutTasksInput
  }

  export type TasksUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    users?: UsersUpdateOneRequiredWithoutTasksNestedInput
    due_at?: DateTimeFieldUpdateOperationsInput | Date | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    state?: EnumTaskStateFieldUpdateOperationsInput | TaskState
    assignees?: assigneesUpdateOneWithoutTasksNestedInput
    comments?: CommentsUpdateManyWithoutTasksNestedInput
  }

  export type TasksUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    owner_id?: StringFieldUpdateOperationsInput | string
    due_at?: DateTimeFieldUpdateOperationsInput | Date | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    state?: EnumTaskStateFieldUpdateOperationsInput | TaskState
    assignees?: assigneesUncheckedUpdateOneWithoutTasksNestedInput
    comments?: CommentsUncheckedUpdateManyWithoutTasksNestedInput
  }

  export type TasksCreateManyInput = {
    id?: string
    title: string
    description: string
    owner_id?: string
    due_at: Date | string
    created_at: Date | string
    updated_at: Date | string
    state: TaskState
  }

  export type TasksUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    due_at?: DateTimeFieldUpdateOperationsInput | Date | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    state?: EnumTaskStateFieldUpdateOperationsInput | TaskState
  }

  export type TasksUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    owner_id?: StringFieldUpdateOperationsInput | string
    due_at?: DateTimeFieldUpdateOperationsInput | Date | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    state?: EnumTaskStateFieldUpdateOperationsInput | TaskState
  }

  export type CommentsCreateInput = {
    id?: string
    users?: UsersCreateNestedOneWithoutCommentsInput
    tasks?: TasksCreateNestedOneWithoutCommentsInput
    target_type: CommentTargetType
    parent_id?: string
    content: string
    created_at: Date | string
    updated_at: Date | string
  }

  export type CommentsUncheckedCreateInput = {
    id?: string
    owner_id?: string
    target_id?: string
    target_type: CommentTargetType
    parent_id?: string
    content: string
    created_at: Date | string
    updated_at: Date | string
  }

  export type CommentsUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    users?: UsersUpdateOneRequiredWithoutCommentsNestedInput
    tasks?: TasksUpdateOneRequiredWithoutCommentsNestedInput
    target_type?: EnumCommentTargetTypeFieldUpdateOperationsInput | CommentTargetType
    parent_id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CommentsUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    owner_id?: StringFieldUpdateOperationsInput | string
    target_id?: StringFieldUpdateOperationsInput | string
    target_type?: EnumCommentTargetTypeFieldUpdateOperationsInput | CommentTargetType
    parent_id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CommentsCreateManyInput = {
    id?: string
    owner_id?: string
    target_id?: string
    target_type: CommentTargetType
    parent_id?: string
    content: string
    created_at: Date | string
    updated_at: Date | string
  }

  export type CommentsUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    target_type?: EnumCommentTargetTypeFieldUpdateOperationsInput | CommentTargetType
    parent_id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CommentsUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    owner_id?: StringFieldUpdateOperationsInput | string
    target_id?: StringFieldUpdateOperationsInput | string
    target_type?: EnumCommentTargetTypeFieldUpdateOperationsInput | CommentTargetType
    parent_id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type assigneesCreateInput = {
    id?: string
    tasks?: TasksCreateNestedOneWithoutAssigneesInput
    users?: UsersCreateNestedOneWithoutAssigneesInput
    created_at: Date | string
  }

  export type assigneesUncheckedCreateInput = {
    id?: string
    task_id?: string
    user_id?: string
    created_at: Date | string
  }

  export type assigneesUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    tasks?: TasksUpdateOneRequiredWithoutAssigneesNestedInput
    users?: UsersUpdateOneRequiredWithoutAssigneesNestedInput
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type assigneesUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    task_id?: StringFieldUpdateOperationsInput | string
    user_id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type assigneesCreateManyInput = {
    id?: string
    task_id?: string
    user_id?: string
    created_at: Date | string
  }

  export type assigneesUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type assigneesUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    task_id?: StringFieldUpdateOperationsInput | string
    user_id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringFilter | string
  }

  export type BoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }
  export type JsonFilter = 
    | PatchUndefined<
        Either<Required<JsonFilterBase>, Exclude<keyof Required<JsonFilterBase>, 'path'>>,
        Required<JsonFilterBase>
      >
    | OptionalFlat<Omit<Required<JsonFilterBase>, 'path'>>

  export type JsonFilterBase = {
    equals?: InputJsonValue | JsonNullValueFilter
    path?: Array<string>
    string_contains?: string
    string_starts_with?: string
    string_ends_with?: string
    array_contains?: InputJsonValue | null
    array_starts_with?: InputJsonValue | null
    array_ends_with?: InputJsonValue | null
    lt?: InputJsonValue
    lte?: InputJsonValue
    gt?: InputJsonValue
    gte?: InputJsonValue
    not?: InputJsonValue | JsonNullValueFilter
  }

  export type DateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type AssigneesRelationFilter = {
    is?: assigneesWhereInput | null
    isNot?: assigneesWhereInput | null
  }

  export type TasksListRelationFilter = {
    every?: TasksWhereInput
    some?: TasksWhereInput
    none?: TasksWhereInput
  }

  export type NotificationsListRelationFilter = {
    every?: NotificationsWhereInput
    some?: NotificationsWhereInput
    none?: NotificationsWhereInput
  }

  export type CommentsListRelationFilter = {
    every?: CommentsWhereInput
    some?: CommentsWhereInput
    none?: CommentsWhereInput
  }

  export type TasksOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type NotificationsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CommentsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UsersCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    password_digest?: SortOrder
    active?: SortOrder
    preferences?: SortOrder
    last_sign_in_at?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type UsersMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    password_digest?: SortOrder
    active?: SortOrder
    last_sign_in_at?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type UsersMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    password_digest?: SortOrder
    active?: SortOrder
    last_sign_in_at?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type BoolWithAggregatesFilter = {
    equals?: boolean
    not?: NestedBoolWithAggregatesFilter | boolean
    _count?: NestedIntFilter
    _min?: NestedBoolFilter
    _max?: NestedBoolFilter
  }
  export type JsonWithAggregatesFilter = 
    | PatchUndefined<
        Either<Required<JsonWithAggregatesFilterBase>, Exclude<keyof Required<JsonWithAggregatesFilterBase>, 'path'>>,
        Required<JsonWithAggregatesFilterBase>
      >
    | OptionalFlat<Omit<Required<JsonWithAggregatesFilterBase>, 'path'>>

  export type JsonWithAggregatesFilterBase = {
    equals?: InputJsonValue | JsonNullValueFilter
    path?: Array<string>
    string_contains?: string
    string_starts_with?: string
    string_ends_with?: string
    array_contains?: InputJsonValue | null
    array_starts_with?: InputJsonValue | null
    array_ends_with?: InputJsonValue | null
    lt?: InputJsonValue
    lte?: InputJsonValue
    gt?: InputJsonValue
    gte?: InputJsonValue
    not?: InputJsonValue | JsonNullValueFilter
    _count?: NestedIntFilter
    _min?: NestedJsonFilter
    _max?: NestedJsonFilter
  }

  export type DateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type EnumActionGroupFilter = {
    equals?: ActionGroup
    in?: Enumerable<ActionGroup>
    notIn?: Enumerable<ActionGroup>
    not?: NestedEnumActionGroupFilter | ActionGroup
  }

  export type EnumActionNameFilter = {
    equals?: ActionName
    in?: Enumerable<ActionName>
    notIn?: Enumerable<ActionName>
    not?: NestedEnumActionNameFilter | ActionName
  }

  export type EnumActionTargetTypeFilter = {
    equals?: ActionTargetType
    in?: Enumerable<ActionTargetType>
    notIn?: Enumerable<ActionTargetType>
    not?: NestedEnumActionTargetTypeFilter | ActionTargetType
  }

  export type ActionsCountOrderByAggregateInput = {
    id?: SortOrder
    group?: SortOrder
    name?: SortOrder
    target_id?: SortOrder
    target_type?: SortOrder
  }

  export type ActionsMaxOrderByAggregateInput = {
    id?: SortOrder
    group?: SortOrder
    name?: SortOrder
    target_id?: SortOrder
    target_type?: SortOrder
  }

  export type ActionsMinOrderByAggregateInput = {
    id?: SortOrder
    group?: SortOrder
    name?: SortOrder
    target_id?: SortOrder
    target_type?: SortOrder
  }

  export type EnumActionGroupWithAggregatesFilter = {
    equals?: ActionGroup
    in?: Enumerable<ActionGroup>
    notIn?: Enumerable<ActionGroup>
    not?: NestedEnumActionGroupWithAggregatesFilter | ActionGroup
    _count?: NestedIntFilter
    _min?: NestedEnumActionGroupFilter
    _max?: NestedEnumActionGroupFilter
  }

  export type EnumActionNameWithAggregatesFilter = {
    equals?: ActionName
    in?: Enumerable<ActionName>
    notIn?: Enumerable<ActionName>
    not?: NestedEnumActionNameWithAggregatesFilter | ActionName
    _count?: NestedIntFilter
    _min?: NestedEnumActionNameFilter
    _max?: NestedEnumActionNameFilter
  }

  export type EnumActionTargetTypeWithAggregatesFilter = {
    equals?: ActionTargetType
    in?: Enumerable<ActionTargetType>
    notIn?: Enumerable<ActionTargetType>
    not?: NestedEnumActionTargetTypeWithAggregatesFilter | ActionTargetType
    _count?: NestedIntFilter
    _min?: NestedEnumActionTargetTypeFilter
    _max?: NestedEnumActionTargetTypeFilter
  }

  export type UsersRelationFilter = {
    is?: UsersWhereInput
    isNot?: UsersWhereInput
  }

  export type ActionsRelationFilter = {
    is?: ActionsWhereInput
    isNot?: ActionsWhereInput
  }

  export type NotificationsCountOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    action_id?: SortOrder
    readed_at?: SortOrder
  }

  export type NotificationsMaxOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    action_id?: SortOrder
    readed_at?: SortOrder
  }

  export type NotificationsMinOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    action_id?: SortOrder
    readed_at?: SortOrder
  }

  export type EnumTaskStateFilter = {
    equals?: TaskState
    in?: Enumerable<TaskState>
    notIn?: Enumerable<TaskState>
    not?: NestedEnumTaskStateFilter | TaskState
  }

  export type TasksCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    owner_id?: SortOrder
    due_at?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    state?: SortOrder
  }

  export type TasksMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    owner_id?: SortOrder
    due_at?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    state?: SortOrder
  }

  export type TasksMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    owner_id?: SortOrder
    due_at?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    state?: SortOrder
  }

  export type EnumTaskStateWithAggregatesFilter = {
    equals?: TaskState
    in?: Enumerable<TaskState>
    notIn?: Enumerable<TaskState>
    not?: NestedEnumTaskStateWithAggregatesFilter | TaskState
    _count?: NestedIntFilter
    _min?: NestedEnumTaskStateFilter
    _max?: NestedEnumTaskStateFilter
  }

  export type TasksRelationFilter = {
    is?: TasksWhereInput
    isNot?: TasksWhereInput
  }

  export type EnumCommentTargetTypeFilter = {
    equals?: CommentTargetType
    in?: Enumerable<CommentTargetType>
    notIn?: Enumerable<CommentTargetType>
    not?: NestedEnumCommentTargetTypeFilter | CommentTargetType
  }

  export type CommentsCountOrderByAggregateInput = {
    id?: SortOrder
    owner_id?: SortOrder
    target_id?: SortOrder
    target_type?: SortOrder
    parent_id?: SortOrder
    content?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type CommentsMaxOrderByAggregateInput = {
    id?: SortOrder
    owner_id?: SortOrder
    target_id?: SortOrder
    target_type?: SortOrder
    parent_id?: SortOrder
    content?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type CommentsMinOrderByAggregateInput = {
    id?: SortOrder
    owner_id?: SortOrder
    target_id?: SortOrder
    target_type?: SortOrder
    parent_id?: SortOrder
    content?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type EnumCommentTargetTypeWithAggregatesFilter = {
    equals?: CommentTargetType
    in?: Enumerable<CommentTargetType>
    notIn?: Enumerable<CommentTargetType>
    not?: NestedEnumCommentTargetTypeWithAggregatesFilter | CommentTargetType
    _count?: NestedIntFilter
    _min?: NestedEnumCommentTargetTypeFilter
    _max?: NestedEnumCommentTargetTypeFilter
  }

  export type assigneesCountOrderByAggregateInput = {
    id?: SortOrder
    task_id?: SortOrder
    user_id?: SortOrder
    created_at?: SortOrder
  }

  export type assigneesMaxOrderByAggregateInput = {
    id?: SortOrder
    task_id?: SortOrder
    user_id?: SortOrder
    created_at?: SortOrder
  }

  export type assigneesMinOrderByAggregateInput = {
    id?: SortOrder
    task_id?: SortOrder
    user_id?: SortOrder
    created_at?: SortOrder
  }

  export type assigneesCreateNestedOneWithoutUsersInput = {
    create?: XOR<assigneesCreateWithoutUsersInput, assigneesUncheckedCreateWithoutUsersInput>
    connectOrCreate?: assigneesCreateOrConnectWithoutUsersInput
    connect?: assigneesWhereUniqueInput
  }

  export type TasksCreateNestedManyWithoutUsersInput = {
    create?: XOR<Enumerable<TasksCreateWithoutUsersInput>, Enumerable<TasksUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<TasksCreateOrConnectWithoutUsersInput>
    createMany?: TasksCreateManyUsersInputEnvelope
    connect?: Enumerable<TasksWhereUniqueInput>
  }

  export type NotificationsCreateNestedManyWithoutUsersInput = {
    create?: XOR<Enumerable<NotificationsCreateWithoutUsersInput>, Enumerable<NotificationsUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<NotificationsCreateOrConnectWithoutUsersInput>
    createMany?: NotificationsCreateManyUsersInputEnvelope
    connect?: Enumerable<NotificationsWhereUniqueInput>
  }

  export type CommentsCreateNestedManyWithoutUsersInput = {
    create?: XOR<Enumerable<CommentsCreateWithoutUsersInput>, Enumerable<CommentsUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<CommentsCreateOrConnectWithoutUsersInput>
    createMany?: CommentsCreateManyUsersInputEnvelope
    connect?: Enumerable<CommentsWhereUniqueInput>
  }

  export type assigneesUncheckedCreateNestedOneWithoutUsersInput = {
    create?: XOR<assigneesCreateWithoutUsersInput, assigneesUncheckedCreateWithoutUsersInput>
    connectOrCreate?: assigneesCreateOrConnectWithoutUsersInput
    connect?: assigneesWhereUniqueInput
  }

  export type TasksUncheckedCreateNestedManyWithoutUsersInput = {
    create?: XOR<Enumerable<TasksCreateWithoutUsersInput>, Enumerable<TasksUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<TasksCreateOrConnectWithoutUsersInput>
    createMany?: TasksCreateManyUsersInputEnvelope
    connect?: Enumerable<TasksWhereUniqueInput>
  }

  export type NotificationsUncheckedCreateNestedManyWithoutUsersInput = {
    create?: XOR<Enumerable<NotificationsCreateWithoutUsersInput>, Enumerable<NotificationsUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<NotificationsCreateOrConnectWithoutUsersInput>
    createMany?: NotificationsCreateManyUsersInputEnvelope
    connect?: Enumerable<NotificationsWhereUniqueInput>
  }

  export type CommentsUncheckedCreateNestedManyWithoutUsersInput = {
    create?: XOR<Enumerable<CommentsCreateWithoutUsersInput>, Enumerable<CommentsUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<CommentsCreateOrConnectWithoutUsersInput>
    createMany?: CommentsCreateManyUsersInputEnvelope
    connect?: Enumerable<CommentsWhereUniqueInput>
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type assigneesUpdateOneWithoutUsersNestedInput = {
    create?: XOR<assigneesCreateWithoutUsersInput, assigneesUncheckedCreateWithoutUsersInput>
    connectOrCreate?: assigneesCreateOrConnectWithoutUsersInput
    upsert?: assigneesUpsertWithoutUsersInput
    disconnect?: boolean
    delete?: boolean
    connect?: assigneesWhereUniqueInput
    update?: XOR<assigneesUpdateWithoutUsersInput, assigneesUncheckedUpdateWithoutUsersInput>
  }

  export type TasksUpdateManyWithoutUsersNestedInput = {
    create?: XOR<Enumerable<TasksCreateWithoutUsersInput>, Enumerable<TasksUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<TasksCreateOrConnectWithoutUsersInput>
    upsert?: Enumerable<TasksUpsertWithWhereUniqueWithoutUsersInput>
    createMany?: TasksCreateManyUsersInputEnvelope
    set?: Enumerable<TasksWhereUniqueInput>
    disconnect?: Enumerable<TasksWhereUniqueInput>
    delete?: Enumerable<TasksWhereUniqueInput>
    connect?: Enumerable<TasksWhereUniqueInput>
    update?: Enumerable<TasksUpdateWithWhereUniqueWithoutUsersInput>
    updateMany?: Enumerable<TasksUpdateManyWithWhereWithoutUsersInput>
    deleteMany?: Enumerable<TasksScalarWhereInput>
  }

  export type NotificationsUpdateManyWithoutUsersNestedInput = {
    create?: XOR<Enumerable<NotificationsCreateWithoutUsersInput>, Enumerable<NotificationsUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<NotificationsCreateOrConnectWithoutUsersInput>
    upsert?: Enumerable<NotificationsUpsertWithWhereUniqueWithoutUsersInput>
    createMany?: NotificationsCreateManyUsersInputEnvelope
    set?: Enumerable<NotificationsWhereUniqueInput>
    disconnect?: Enumerable<NotificationsWhereUniqueInput>
    delete?: Enumerable<NotificationsWhereUniqueInput>
    connect?: Enumerable<NotificationsWhereUniqueInput>
    update?: Enumerable<NotificationsUpdateWithWhereUniqueWithoutUsersInput>
    updateMany?: Enumerable<NotificationsUpdateManyWithWhereWithoutUsersInput>
    deleteMany?: Enumerable<NotificationsScalarWhereInput>
  }

  export type CommentsUpdateManyWithoutUsersNestedInput = {
    create?: XOR<Enumerable<CommentsCreateWithoutUsersInput>, Enumerable<CommentsUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<CommentsCreateOrConnectWithoutUsersInput>
    upsert?: Enumerable<CommentsUpsertWithWhereUniqueWithoutUsersInput>
    createMany?: CommentsCreateManyUsersInputEnvelope
    set?: Enumerable<CommentsWhereUniqueInput>
    disconnect?: Enumerable<CommentsWhereUniqueInput>
    delete?: Enumerable<CommentsWhereUniqueInput>
    connect?: Enumerable<CommentsWhereUniqueInput>
    update?: Enumerable<CommentsUpdateWithWhereUniqueWithoutUsersInput>
    updateMany?: Enumerable<CommentsUpdateManyWithWhereWithoutUsersInput>
    deleteMany?: Enumerable<CommentsScalarWhereInput>
  }

  export type assigneesUncheckedUpdateOneWithoutUsersNestedInput = {
    create?: XOR<assigneesCreateWithoutUsersInput, assigneesUncheckedCreateWithoutUsersInput>
    connectOrCreate?: assigneesCreateOrConnectWithoutUsersInput
    upsert?: assigneesUpsertWithoutUsersInput
    disconnect?: boolean
    delete?: boolean
    connect?: assigneesWhereUniqueInput
    update?: XOR<assigneesUpdateWithoutUsersInput, assigneesUncheckedUpdateWithoutUsersInput>
  }

  export type TasksUncheckedUpdateManyWithoutUsersNestedInput = {
    create?: XOR<Enumerable<TasksCreateWithoutUsersInput>, Enumerable<TasksUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<TasksCreateOrConnectWithoutUsersInput>
    upsert?: Enumerable<TasksUpsertWithWhereUniqueWithoutUsersInput>
    createMany?: TasksCreateManyUsersInputEnvelope
    set?: Enumerable<TasksWhereUniqueInput>
    disconnect?: Enumerable<TasksWhereUniqueInput>
    delete?: Enumerable<TasksWhereUniqueInput>
    connect?: Enumerable<TasksWhereUniqueInput>
    update?: Enumerable<TasksUpdateWithWhereUniqueWithoutUsersInput>
    updateMany?: Enumerable<TasksUpdateManyWithWhereWithoutUsersInput>
    deleteMany?: Enumerable<TasksScalarWhereInput>
  }

  export type NotificationsUncheckedUpdateManyWithoutUsersNestedInput = {
    create?: XOR<Enumerable<NotificationsCreateWithoutUsersInput>, Enumerable<NotificationsUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<NotificationsCreateOrConnectWithoutUsersInput>
    upsert?: Enumerable<NotificationsUpsertWithWhereUniqueWithoutUsersInput>
    createMany?: NotificationsCreateManyUsersInputEnvelope
    set?: Enumerable<NotificationsWhereUniqueInput>
    disconnect?: Enumerable<NotificationsWhereUniqueInput>
    delete?: Enumerable<NotificationsWhereUniqueInput>
    connect?: Enumerable<NotificationsWhereUniqueInput>
    update?: Enumerable<NotificationsUpdateWithWhereUniqueWithoutUsersInput>
    updateMany?: Enumerable<NotificationsUpdateManyWithWhereWithoutUsersInput>
    deleteMany?: Enumerable<NotificationsScalarWhereInput>
  }

  export type CommentsUncheckedUpdateManyWithoutUsersNestedInput = {
    create?: XOR<Enumerable<CommentsCreateWithoutUsersInput>, Enumerable<CommentsUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<CommentsCreateOrConnectWithoutUsersInput>
    upsert?: Enumerable<CommentsUpsertWithWhereUniqueWithoutUsersInput>
    createMany?: CommentsCreateManyUsersInputEnvelope
    set?: Enumerable<CommentsWhereUniqueInput>
    disconnect?: Enumerable<CommentsWhereUniqueInput>
    delete?: Enumerable<CommentsWhereUniqueInput>
    connect?: Enumerable<CommentsWhereUniqueInput>
    update?: Enumerable<CommentsUpdateWithWhereUniqueWithoutUsersInput>
    updateMany?: Enumerable<CommentsUpdateManyWithWhereWithoutUsersInput>
    deleteMany?: Enumerable<CommentsScalarWhereInput>
  }

  export type NotificationsCreateNestedManyWithoutActionsInput = {
    create?: XOR<Enumerable<NotificationsCreateWithoutActionsInput>, Enumerable<NotificationsUncheckedCreateWithoutActionsInput>>
    connectOrCreate?: Enumerable<NotificationsCreateOrConnectWithoutActionsInput>
    createMany?: NotificationsCreateManyActionsInputEnvelope
    connect?: Enumerable<NotificationsWhereUniqueInput>
  }

  export type NotificationsUncheckedCreateNestedManyWithoutActionsInput = {
    create?: XOR<Enumerable<NotificationsCreateWithoutActionsInput>, Enumerable<NotificationsUncheckedCreateWithoutActionsInput>>
    connectOrCreate?: Enumerable<NotificationsCreateOrConnectWithoutActionsInput>
    createMany?: NotificationsCreateManyActionsInputEnvelope
    connect?: Enumerable<NotificationsWhereUniqueInput>
  }

  export type EnumActionGroupFieldUpdateOperationsInput = {
    set?: ActionGroup
  }

  export type EnumActionNameFieldUpdateOperationsInput = {
    set?: ActionName
  }

  export type EnumActionTargetTypeFieldUpdateOperationsInput = {
    set?: ActionTargetType
  }

  export type NotificationsUpdateManyWithoutActionsNestedInput = {
    create?: XOR<Enumerable<NotificationsCreateWithoutActionsInput>, Enumerable<NotificationsUncheckedCreateWithoutActionsInput>>
    connectOrCreate?: Enumerable<NotificationsCreateOrConnectWithoutActionsInput>
    upsert?: Enumerable<NotificationsUpsertWithWhereUniqueWithoutActionsInput>
    createMany?: NotificationsCreateManyActionsInputEnvelope
    set?: Enumerable<NotificationsWhereUniqueInput>
    disconnect?: Enumerable<NotificationsWhereUniqueInput>
    delete?: Enumerable<NotificationsWhereUniqueInput>
    connect?: Enumerable<NotificationsWhereUniqueInput>
    update?: Enumerable<NotificationsUpdateWithWhereUniqueWithoutActionsInput>
    updateMany?: Enumerable<NotificationsUpdateManyWithWhereWithoutActionsInput>
    deleteMany?: Enumerable<NotificationsScalarWhereInput>
  }

  export type NotificationsUncheckedUpdateManyWithoutActionsNestedInput = {
    create?: XOR<Enumerable<NotificationsCreateWithoutActionsInput>, Enumerable<NotificationsUncheckedCreateWithoutActionsInput>>
    connectOrCreate?: Enumerable<NotificationsCreateOrConnectWithoutActionsInput>
    upsert?: Enumerable<NotificationsUpsertWithWhereUniqueWithoutActionsInput>
    createMany?: NotificationsCreateManyActionsInputEnvelope
    set?: Enumerable<NotificationsWhereUniqueInput>
    disconnect?: Enumerable<NotificationsWhereUniqueInput>
    delete?: Enumerable<NotificationsWhereUniqueInput>
    connect?: Enumerable<NotificationsWhereUniqueInput>
    update?: Enumerable<NotificationsUpdateWithWhereUniqueWithoutActionsInput>
    updateMany?: Enumerable<NotificationsUpdateManyWithWhereWithoutActionsInput>
    deleteMany?: Enumerable<NotificationsScalarWhereInput>
  }

  export type UsersCreateNestedOneWithoutNotificationsInput = {
    create?: XOR<UsersCreateWithoutNotificationsInput, UsersUncheckedCreateWithoutNotificationsInput>
    connectOrCreate?: UsersCreateOrConnectWithoutNotificationsInput
    connect?: UsersWhereUniqueInput
  }

  export type ActionsCreateNestedOneWithoutNotificationsInput = {
    create?: XOR<ActionsCreateWithoutNotificationsInput, ActionsUncheckedCreateWithoutNotificationsInput>
    connectOrCreate?: ActionsCreateOrConnectWithoutNotificationsInput
    connect?: ActionsWhereUniqueInput
  }

  export type UsersUpdateOneRequiredWithoutNotificationsNestedInput = {
    create?: XOR<UsersCreateWithoutNotificationsInput, UsersUncheckedCreateWithoutNotificationsInput>
    connectOrCreate?: UsersCreateOrConnectWithoutNotificationsInput
    upsert?: UsersUpsertWithoutNotificationsInput
    connect?: UsersWhereUniqueInput
    update?: XOR<UsersUpdateWithoutNotificationsInput, UsersUncheckedUpdateWithoutNotificationsInput>
  }

  export type ActionsUpdateOneRequiredWithoutNotificationsNestedInput = {
    create?: XOR<ActionsCreateWithoutNotificationsInput, ActionsUncheckedCreateWithoutNotificationsInput>
    connectOrCreate?: ActionsCreateOrConnectWithoutNotificationsInput
    upsert?: ActionsUpsertWithoutNotificationsInput
    connect?: ActionsWhereUniqueInput
    update?: XOR<ActionsUpdateWithoutNotificationsInput, ActionsUncheckedUpdateWithoutNotificationsInput>
  }

  export type UsersCreateNestedOneWithoutTasksInput = {
    create?: XOR<UsersCreateWithoutTasksInput, UsersUncheckedCreateWithoutTasksInput>
    connectOrCreate?: UsersCreateOrConnectWithoutTasksInput
    connect?: UsersWhereUniqueInput
  }

  export type assigneesCreateNestedOneWithoutTasksInput = {
    create?: XOR<assigneesCreateWithoutTasksInput, assigneesUncheckedCreateWithoutTasksInput>
    connectOrCreate?: assigneesCreateOrConnectWithoutTasksInput
    connect?: assigneesWhereUniqueInput
  }

  export type CommentsCreateNestedManyWithoutTasksInput = {
    create?: XOR<Enumerable<CommentsCreateWithoutTasksInput>, Enumerable<CommentsUncheckedCreateWithoutTasksInput>>
    connectOrCreate?: Enumerable<CommentsCreateOrConnectWithoutTasksInput>
    createMany?: CommentsCreateManyTasksInputEnvelope
    connect?: Enumerable<CommentsWhereUniqueInput>
  }

  export type assigneesUncheckedCreateNestedOneWithoutTasksInput = {
    create?: XOR<assigneesCreateWithoutTasksInput, assigneesUncheckedCreateWithoutTasksInput>
    connectOrCreate?: assigneesCreateOrConnectWithoutTasksInput
    connect?: assigneesWhereUniqueInput
  }

  export type CommentsUncheckedCreateNestedManyWithoutTasksInput = {
    create?: XOR<Enumerable<CommentsCreateWithoutTasksInput>, Enumerable<CommentsUncheckedCreateWithoutTasksInput>>
    connectOrCreate?: Enumerable<CommentsCreateOrConnectWithoutTasksInput>
    createMany?: CommentsCreateManyTasksInputEnvelope
    connect?: Enumerable<CommentsWhereUniqueInput>
  }

  export type UsersUpdateOneRequiredWithoutTasksNestedInput = {
    create?: XOR<UsersCreateWithoutTasksInput, UsersUncheckedCreateWithoutTasksInput>
    connectOrCreate?: UsersCreateOrConnectWithoutTasksInput
    upsert?: UsersUpsertWithoutTasksInput
    connect?: UsersWhereUniqueInput
    update?: XOR<UsersUpdateWithoutTasksInput, UsersUncheckedUpdateWithoutTasksInput>
  }

  export type EnumTaskStateFieldUpdateOperationsInput = {
    set?: TaskState
  }

  export type assigneesUpdateOneWithoutTasksNestedInput = {
    create?: XOR<assigneesCreateWithoutTasksInput, assigneesUncheckedCreateWithoutTasksInput>
    connectOrCreate?: assigneesCreateOrConnectWithoutTasksInput
    upsert?: assigneesUpsertWithoutTasksInput
    disconnect?: boolean
    delete?: boolean
    connect?: assigneesWhereUniqueInput
    update?: XOR<assigneesUpdateWithoutTasksInput, assigneesUncheckedUpdateWithoutTasksInput>
  }

  export type CommentsUpdateManyWithoutTasksNestedInput = {
    create?: XOR<Enumerable<CommentsCreateWithoutTasksInput>, Enumerable<CommentsUncheckedCreateWithoutTasksInput>>
    connectOrCreate?: Enumerable<CommentsCreateOrConnectWithoutTasksInput>
    upsert?: Enumerable<CommentsUpsertWithWhereUniqueWithoutTasksInput>
    createMany?: CommentsCreateManyTasksInputEnvelope
    set?: Enumerable<CommentsWhereUniqueInput>
    disconnect?: Enumerable<CommentsWhereUniqueInput>
    delete?: Enumerable<CommentsWhereUniqueInput>
    connect?: Enumerable<CommentsWhereUniqueInput>
    update?: Enumerable<CommentsUpdateWithWhereUniqueWithoutTasksInput>
    updateMany?: Enumerable<CommentsUpdateManyWithWhereWithoutTasksInput>
    deleteMany?: Enumerable<CommentsScalarWhereInput>
  }

  export type assigneesUncheckedUpdateOneWithoutTasksNestedInput = {
    create?: XOR<assigneesCreateWithoutTasksInput, assigneesUncheckedCreateWithoutTasksInput>
    connectOrCreate?: assigneesCreateOrConnectWithoutTasksInput
    upsert?: assigneesUpsertWithoutTasksInput
    disconnect?: boolean
    delete?: boolean
    connect?: assigneesWhereUniqueInput
    update?: XOR<assigneesUpdateWithoutTasksInput, assigneesUncheckedUpdateWithoutTasksInput>
  }

  export type CommentsUncheckedUpdateManyWithoutTasksNestedInput = {
    create?: XOR<Enumerable<CommentsCreateWithoutTasksInput>, Enumerable<CommentsUncheckedCreateWithoutTasksInput>>
    connectOrCreate?: Enumerable<CommentsCreateOrConnectWithoutTasksInput>
    upsert?: Enumerable<CommentsUpsertWithWhereUniqueWithoutTasksInput>
    createMany?: CommentsCreateManyTasksInputEnvelope
    set?: Enumerable<CommentsWhereUniqueInput>
    disconnect?: Enumerable<CommentsWhereUniqueInput>
    delete?: Enumerable<CommentsWhereUniqueInput>
    connect?: Enumerable<CommentsWhereUniqueInput>
    update?: Enumerable<CommentsUpdateWithWhereUniqueWithoutTasksInput>
    updateMany?: Enumerable<CommentsUpdateManyWithWhereWithoutTasksInput>
    deleteMany?: Enumerable<CommentsScalarWhereInput>
  }

  export type UsersCreateNestedOneWithoutCommentsInput = {
    create?: XOR<UsersCreateWithoutCommentsInput, UsersUncheckedCreateWithoutCommentsInput>
    connectOrCreate?: UsersCreateOrConnectWithoutCommentsInput
    connect?: UsersWhereUniqueInput
  }

  export type TasksCreateNestedOneWithoutCommentsInput = {
    create?: XOR<TasksCreateWithoutCommentsInput, TasksUncheckedCreateWithoutCommentsInput>
    connectOrCreate?: TasksCreateOrConnectWithoutCommentsInput
    connect?: TasksWhereUniqueInput
  }

  export type UsersUpdateOneRequiredWithoutCommentsNestedInput = {
    create?: XOR<UsersCreateWithoutCommentsInput, UsersUncheckedCreateWithoutCommentsInput>
    connectOrCreate?: UsersCreateOrConnectWithoutCommentsInput
    upsert?: UsersUpsertWithoutCommentsInput
    connect?: UsersWhereUniqueInput
    update?: XOR<UsersUpdateWithoutCommentsInput, UsersUncheckedUpdateWithoutCommentsInput>
  }

  export type TasksUpdateOneRequiredWithoutCommentsNestedInput = {
    create?: XOR<TasksCreateWithoutCommentsInput, TasksUncheckedCreateWithoutCommentsInput>
    connectOrCreate?: TasksCreateOrConnectWithoutCommentsInput
    upsert?: TasksUpsertWithoutCommentsInput
    connect?: TasksWhereUniqueInput
    update?: XOR<TasksUpdateWithoutCommentsInput, TasksUncheckedUpdateWithoutCommentsInput>
  }

  export type EnumCommentTargetTypeFieldUpdateOperationsInput = {
    set?: CommentTargetType
  }

  export type TasksCreateNestedOneWithoutAssigneesInput = {
    create?: XOR<TasksCreateWithoutAssigneesInput, TasksUncheckedCreateWithoutAssigneesInput>
    connectOrCreate?: TasksCreateOrConnectWithoutAssigneesInput
    connect?: TasksWhereUniqueInput
  }

  export type UsersCreateNestedOneWithoutAssigneesInput = {
    create?: XOR<UsersCreateWithoutAssigneesInput, UsersUncheckedCreateWithoutAssigneesInput>
    connectOrCreate?: UsersCreateOrConnectWithoutAssigneesInput
    connect?: UsersWhereUniqueInput
  }

  export type TasksUpdateOneRequiredWithoutAssigneesNestedInput = {
    create?: XOR<TasksCreateWithoutAssigneesInput, TasksUncheckedCreateWithoutAssigneesInput>
    connectOrCreate?: TasksCreateOrConnectWithoutAssigneesInput
    upsert?: TasksUpsertWithoutAssigneesInput
    connect?: TasksWhereUniqueInput
    update?: XOR<TasksUpdateWithoutAssigneesInput, TasksUncheckedUpdateWithoutAssigneesInput>
  }

  export type UsersUpdateOneRequiredWithoutAssigneesNestedInput = {
    create?: XOR<UsersCreateWithoutAssigneesInput, UsersUncheckedCreateWithoutAssigneesInput>
    connectOrCreate?: UsersCreateOrConnectWithoutAssigneesInput
    upsert?: UsersUpsertWithoutAssigneesInput
    connect?: UsersWhereUniqueInput
    update?: XOR<UsersUpdateWithoutAssigneesInput, UsersUncheckedUpdateWithoutAssigneesInput>
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedBoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type NestedDateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedBoolWithAggregatesFilter = {
    equals?: boolean
    not?: NestedBoolWithAggregatesFilter | boolean
    _count?: NestedIntFilter
    _min?: NestedBoolFilter
    _max?: NestedBoolFilter
  }
  export type NestedJsonFilter = 
    | PatchUndefined<
        Either<Required<NestedJsonFilterBase>, Exclude<keyof Required<NestedJsonFilterBase>, 'path'>>,
        Required<NestedJsonFilterBase>
      >
    | OptionalFlat<Omit<Required<NestedJsonFilterBase>, 'path'>>

  export type NestedJsonFilterBase = {
    equals?: InputJsonValue | JsonNullValueFilter
    path?: Array<string>
    string_contains?: string
    string_starts_with?: string
    string_ends_with?: string
    array_contains?: InputJsonValue | null
    array_starts_with?: InputJsonValue | null
    array_ends_with?: InputJsonValue | null
    lt?: InputJsonValue
    lte?: InputJsonValue
    gt?: InputJsonValue
    gte?: InputJsonValue
    not?: InputJsonValue | JsonNullValueFilter
  }

  export type NestedDateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type NestedEnumActionGroupFilter = {
    equals?: ActionGroup
    in?: Enumerable<ActionGroup>
    notIn?: Enumerable<ActionGroup>
    not?: NestedEnumActionGroupFilter | ActionGroup
  }

  export type NestedEnumActionNameFilter = {
    equals?: ActionName
    in?: Enumerable<ActionName>
    notIn?: Enumerable<ActionName>
    not?: NestedEnumActionNameFilter | ActionName
  }

  export type NestedEnumActionTargetTypeFilter = {
    equals?: ActionTargetType
    in?: Enumerable<ActionTargetType>
    notIn?: Enumerable<ActionTargetType>
    not?: NestedEnumActionTargetTypeFilter | ActionTargetType
  }

  export type NestedEnumActionGroupWithAggregatesFilter = {
    equals?: ActionGroup
    in?: Enumerable<ActionGroup>
    notIn?: Enumerable<ActionGroup>
    not?: NestedEnumActionGroupWithAggregatesFilter | ActionGroup
    _count?: NestedIntFilter
    _min?: NestedEnumActionGroupFilter
    _max?: NestedEnumActionGroupFilter
  }

  export type NestedEnumActionNameWithAggregatesFilter = {
    equals?: ActionName
    in?: Enumerable<ActionName>
    notIn?: Enumerable<ActionName>
    not?: NestedEnumActionNameWithAggregatesFilter | ActionName
    _count?: NestedIntFilter
    _min?: NestedEnumActionNameFilter
    _max?: NestedEnumActionNameFilter
  }

  export type NestedEnumActionTargetTypeWithAggregatesFilter = {
    equals?: ActionTargetType
    in?: Enumerable<ActionTargetType>
    notIn?: Enumerable<ActionTargetType>
    not?: NestedEnumActionTargetTypeWithAggregatesFilter | ActionTargetType
    _count?: NestedIntFilter
    _min?: NestedEnumActionTargetTypeFilter
    _max?: NestedEnumActionTargetTypeFilter
  }

  export type NestedEnumTaskStateFilter = {
    equals?: TaskState
    in?: Enumerable<TaskState>
    notIn?: Enumerable<TaskState>
    not?: NestedEnumTaskStateFilter | TaskState
  }

  export type NestedEnumTaskStateWithAggregatesFilter = {
    equals?: TaskState
    in?: Enumerable<TaskState>
    notIn?: Enumerable<TaskState>
    not?: NestedEnumTaskStateWithAggregatesFilter | TaskState
    _count?: NestedIntFilter
    _min?: NestedEnumTaskStateFilter
    _max?: NestedEnumTaskStateFilter
  }

  export type NestedEnumCommentTargetTypeFilter = {
    equals?: CommentTargetType
    in?: Enumerable<CommentTargetType>
    notIn?: Enumerable<CommentTargetType>
    not?: NestedEnumCommentTargetTypeFilter | CommentTargetType
  }

  export type NestedEnumCommentTargetTypeWithAggregatesFilter = {
    equals?: CommentTargetType
    in?: Enumerable<CommentTargetType>
    notIn?: Enumerable<CommentTargetType>
    not?: NestedEnumCommentTargetTypeWithAggregatesFilter | CommentTargetType
    _count?: NestedIntFilter
    _min?: NestedEnumCommentTargetTypeFilter
    _max?: NestedEnumCommentTargetTypeFilter
  }

  export type assigneesCreateWithoutUsersInput = {
    id?: string
    tasks?: TasksCreateNestedOneWithoutAssigneesInput
    created_at: Date | string
  }

  export type assigneesUncheckedCreateWithoutUsersInput = {
    id?: string
    task_id?: string
    created_at: Date | string
  }

  export type assigneesCreateOrConnectWithoutUsersInput = {
    where: assigneesWhereUniqueInput
    create: XOR<assigneesCreateWithoutUsersInput, assigneesUncheckedCreateWithoutUsersInput>
  }

  export type TasksCreateWithoutUsersInput = {
    id?: string
    title: string
    description: string
    due_at: Date | string
    created_at: Date | string
    updated_at: Date | string
    state: TaskState
    assignees?: assigneesCreateNestedOneWithoutTasksInput
    comments?: CommentsCreateNestedManyWithoutTasksInput
  }

  export type TasksUncheckedCreateWithoutUsersInput = {
    id?: string
    title: string
    description: string
    due_at: Date | string
    created_at: Date | string
    updated_at: Date | string
    state: TaskState
    assignees?: assigneesUncheckedCreateNestedOneWithoutTasksInput
    comments?: CommentsUncheckedCreateNestedManyWithoutTasksInput
  }

  export type TasksCreateOrConnectWithoutUsersInput = {
    where: TasksWhereUniqueInput
    create: XOR<TasksCreateWithoutUsersInput, TasksUncheckedCreateWithoutUsersInput>
  }

  export type TasksCreateManyUsersInputEnvelope = {
    data: Enumerable<TasksCreateManyUsersInput>
    skipDuplicates?: boolean
  }

  export type NotificationsCreateWithoutUsersInput = {
    id?: string
    actions?: ActionsCreateNestedOneWithoutNotificationsInput
    readed_at: Date | string
  }

  export type NotificationsUncheckedCreateWithoutUsersInput = {
    id?: string
    action_id?: string
    readed_at: Date | string
  }

  export type NotificationsCreateOrConnectWithoutUsersInput = {
    where: NotificationsWhereUniqueInput
    create: XOR<NotificationsCreateWithoutUsersInput, NotificationsUncheckedCreateWithoutUsersInput>
  }

  export type NotificationsCreateManyUsersInputEnvelope = {
    data: Enumerable<NotificationsCreateManyUsersInput>
    skipDuplicates?: boolean
  }

  export type CommentsCreateWithoutUsersInput = {
    id?: string
    tasks?: TasksCreateNestedOneWithoutCommentsInput
    target_type: CommentTargetType
    parent_id?: string
    content: string
    created_at: Date | string
    updated_at: Date | string
  }

  export type CommentsUncheckedCreateWithoutUsersInput = {
    id?: string
    target_id?: string
    target_type: CommentTargetType
    parent_id?: string
    content: string
    created_at: Date | string
    updated_at: Date | string
  }

  export type CommentsCreateOrConnectWithoutUsersInput = {
    where: CommentsWhereUniqueInput
    create: XOR<CommentsCreateWithoutUsersInput, CommentsUncheckedCreateWithoutUsersInput>
  }

  export type CommentsCreateManyUsersInputEnvelope = {
    data: Enumerable<CommentsCreateManyUsersInput>
    skipDuplicates?: boolean
  }

  export type assigneesUpsertWithoutUsersInput = {
    update: XOR<assigneesUpdateWithoutUsersInput, assigneesUncheckedUpdateWithoutUsersInput>
    create: XOR<assigneesCreateWithoutUsersInput, assigneesUncheckedCreateWithoutUsersInput>
  }

  export type assigneesUpdateWithoutUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    tasks?: TasksUpdateOneRequiredWithoutAssigneesNestedInput
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type assigneesUncheckedUpdateWithoutUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    task_id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TasksUpsertWithWhereUniqueWithoutUsersInput = {
    where: TasksWhereUniqueInput
    update: XOR<TasksUpdateWithoutUsersInput, TasksUncheckedUpdateWithoutUsersInput>
    create: XOR<TasksCreateWithoutUsersInput, TasksUncheckedCreateWithoutUsersInput>
  }

  export type TasksUpdateWithWhereUniqueWithoutUsersInput = {
    where: TasksWhereUniqueInput
    data: XOR<TasksUpdateWithoutUsersInput, TasksUncheckedUpdateWithoutUsersInput>
  }

  export type TasksUpdateManyWithWhereWithoutUsersInput = {
    where: TasksScalarWhereInput
    data: XOR<TasksUpdateManyMutationInput, TasksUncheckedUpdateManyWithoutTasksInput>
  }

  export type TasksScalarWhereInput = {
    AND?: Enumerable<TasksScalarWhereInput>
    OR?: Enumerable<TasksScalarWhereInput>
    NOT?: Enumerable<TasksScalarWhereInput>
    id?: StringFilter | string
    title?: StringFilter | string
    description?: StringFilter | string
    owner_id?: StringFilter | string
    due_at?: DateTimeFilter | Date | string
    created_at?: DateTimeFilter | Date | string
    updated_at?: DateTimeFilter | Date | string
    state?: EnumTaskStateFilter | TaskState
  }

  export type NotificationsUpsertWithWhereUniqueWithoutUsersInput = {
    where: NotificationsWhereUniqueInput
    update: XOR<NotificationsUpdateWithoutUsersInput, NotificationsUncheckedUpdateWithoutUsersInput>
    create: XOR<NotificationsCreateWithoutUsersInput, NotificationsUncheckedCreateWithoutUsersInput>
  }

  export type NotificationsUpdateWithWhereUniqueWithoutUsersInput = {
    where: NotificationsWhereUniqueInput
    data: XOR<NotificationsUpdateWithoutUsersInput, NotificationsUncheckedUpdateWithoutUsersInput>
  }

  export type NotificationsUpdateManyWithWhereWithoutUsersInput = {
    where: NotificationsScalarWhereInput
    data: XOR<NotificationsUpdateManyMutationInput, NotificationsUncheckedUpdateManyWithoutNotificationsInput>
  }

  export type NotificationsScalarWhereInput = {
    AND?: Enumerable<NotificationsScalarWhereInput>
    OR?: Enumerable<NotificationsScalarWhereInput>
    NOT?: Enumerable<NotificationsScalarWhereInput>
    id?: StringFilter | string
    user_id?: StringFilter | string
    action_id?: StringFilter | string
    readed_at?: DateTimeFilter | Date | string
  }

  export type CommentsUpsertWithWhereUniqueWithoutUsersInput = {
    where: CommentsWhereUniqueInput
    update: XOR<CommentsUpdateWithoutUsersInput, CommentsUncheckedUpdateWithoutUsersInput>
    create: XOR<CommentsCreateWithoutUsersInput, CommentsUncheckedCreateWithoutUsersInput>
  }

  export type CommentsUpdateWithWhereUniqueWithoutUsersInput = {
    where: CommentsWhereUniqueInput
    data: XOR<CommentsUpdateWithoutUsersInput, CommentsUncheckedUpdateWithoutUsersInput>
  }

  export type CommentsUpdateManyWithWhereWithoutUsersInput = {
    where: CommentsScalarWhereInput
    data: XOR<CommentsUpdateManyMutationInput, CommentsUncheckedUpdateManyWithoutCommentsInput>
  }

  export type CommentsScalarWhereInput = {
    AND?: Enumerable<CommentsScalarWhereInput>
    OR?: Enumerable<CommentsScalarWhereInput>
    NOT?: Enumerable<CommentsScalarWhereInput>
    id?: StringFilter | string
    owner_id?: StringFilter | string
    target_id?: StringFilter | string
    target_type?: EnumCommentTargetTypeFilter | CommentTargetType
    parent_id?: StringFilter | string
    content?: StringFilter | string
    created_at?: DateTimeFilter | Date | string
    updated_at?: DateTimeFilter | Date | string
  }

  export type NotificationsCreateWithoutActionsInput = {
    id?: string
    users?: UsersCreateNestedOneWithoutNotificationsInput
    readed_at: Date | string
  }

  export type NotificationsUncheckedCreateWithoutActionsInput = {
    id?: string
    user_id?: string
    readed_at: Date | string
  }

  export type NotificationsCreateOrConnectWithoutActionsInput = {
    where: NotificationsWhereUniqueInput
    create: XOR<NotificationsCreateWithoutActionsInput, NotificationsUncheckedCreateWithoutActionsInput>
  }

  export type NotificationsCreateManyActionsInputEnvelope = {
    data: Enumerable<NotificationsCreateManyActionsInput>
    skipDuplicates?: boolean
  }

  export type NotificationsUpsertWithWhereUniqueWithoutActionsInput = {
    where: NotificationsWhereUniqueInput
    update: XOR<NotificationsUpdateWithoutActionsInput, NotificationsUncheckedUpdateWithoutActionsInput>
    create: XOR<NotificationsCreateWithoutActionsInput, NotificationsUncheckedCreateWithoutActionsInput>
  }

  export type NotificationsUpdateWithWhereUniqueWithoutActionsInput = {
    where: NotificationsWhereUniqueInput
    data: XOR<NotificationsUpdateWithoutActionsInput, NotificationsUncheckedUpdateWithoutActionsInput>
  }

  export type NotificationsUpdateManyWithWhereWithoutActionsInput = {
    where: NotificationsScalarWhereInput
    data: XOR<NotificationsUpdateManyMutationInput, NotificationsUncheckedUpdateManyWithoutNotificationsInput>
  }

  export type UsersCreateWithoutNotificationsInput = {
    id?: string
    email: string
    password: string
    password_digest: string
    active: boolean
    preferences: JsonNullValueInput | InputJsonValue
    last_sign_in_at: Date | string
    created_at: Date | string
    updated_at: Date | string
    assignees?: assigneesCreateNestedOneWithoutUsersInput
    tasks?: TasksCreateNestedManyWithoutUsersInput
    comments?: CommentsCreateNestedManyWithoutUsersInput
  }

  export type UsersUncheckedCreateWithoutNotificationsInput = {
    id?: string
    email: string
    password: string
    password_digest: string
    active: boolean
    preferences: JsonNullValueInput | InputJsonValue
    last_sign_in_at: Date | string
    created_at: Date | string
    updated_at: Date | string
    assignees?: assigneesUncheckedCreateNestedOneWithoutUsersInput
    tasks?: TasksUncheckedCreateNestedManyWithoutUsersInput
    comments?: CommentsUncheckedCreateNestedManyWithoutUsersInput
  }

  export type UsersCreateOrConnectWithoutNotificationsInput = {
    where: UsersWhereUniqueInput
    create: XOR<UsersCreateWithoutNotificationsInput, UsersUncheckedCreateWithoutNotificationsInput>
  }

  export type ActionsCreateWithoutNotificationsInput = {
    id?: string
    group: ActionGroup
    name: ActionName
    target_id?: string
    target_type: ActionTargetType
  }

  export type ActionsUncheckedCreateWithoutNotificationsInput = {
    id?: string
    group: ActionGroup
    name: ActionName
    target_id?: string
    target_type: ActionTargetType
  }

  export type ActionsCreateOrConnectWithoutNotificationsInput = {
    where: ActionsWhereUniqueInput
    create: XOR<ActionsCreateWithoutNotificationsInput, ActionsUncheckedCreateWithoutNotificationsInput>
  }

  export type UsersUpsertWithoutNotificationsInput = {
    update: XOR<UsersUpdateWithoutNotificationsInput, UsersUncheckedUpdateWithoutNotificationsInput>
    create: XOR<UsersCreateWithoutNotificationsInput, UsersUncheckedCreateWithoutNotificationsInput>
  }

  export type UsersUpdateWithoutNotificationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    password_digest?: StringFieldUpdateOperationsInput | string
    active?: BoolFieldUpdateOperationsInput | boolean
    preferences?: JsonNullValueInput | InputJsonValue
    last_sign_in_at?: DateTimeFieldUpdateOperationsInput | Date | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    assignees?: assigneesUpdateOneWithoutUsersNestedInput
    tasks?: TasksUpdateManyWithoutUsersNestedInput
    comments?: CommentsUpdateManyWithoutUsersNestedInput
  }

  export type UsersUncheckedUpdateWithoutNotificationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    password_digest?: StringFieldUpdateOperationsInput | string
    active?: BoolFieldUpdateOperationsInput | boolean
    preferences?: JsonNullValueInput | InputJsonValue
    last_sign_in_at?: DateTimeFieldUpdateOperationsInput | Date | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    assignees?: assigneesUncheckedUpdateOneWithoutUsersNestedInput
    tasks?: TasksUncheckedUpdateManyWithoutUsersNestedInput
    comments?: CommentsUncheckedUpdateManyWithoutUsersNestedInput
  }

  export type ActionsUpsertWithoutNotificationsInput = {
    update: XOR<ActionsUpdateWithoutNotificationsInput, ActionsUncheckedUpdateWithoutNotificationsInput>
    create: XOR<ActionsCreateWithoutNotificationsInput, ActionsUncheckedCreateWithoutNotificationsInput>
  }

  export type ActionsUpdateWithoutNotificationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    group?: EnumActionGroupFieldUpdateOperationsInput | ActionGroup
    name?: EnumActionNameFieldUpdateOperationsInput | ActionName
    target_id?: StringFieldUpdateOperationsInput | string
    target_type?: EnumActionTargetTypeFieldUpdateOperationsInput | ActionTargetType
  }

  export type ActionsUncheckedUpdateWithoutNotificationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    group?: EnumActionGroupFieldUpdateOperationsInput | ActionGroup
    name?: EnumActionNameFieldUpdateOperationsInput | ActionName
    target_id?: StringFieldUpdateOperationsInput | string
    target_type?: EnumActionTargetTypeFieldUpdateOperationsInput | ActionTargetType
  }

  export type UsersCreateWithoutTasksInput = {
    id?: string
    email: string
    password: string
    password_digest: string
    active: boolean
    preferences: JsonNullValueInput | InputJsonValue
    last_sign_in_at: Date | string
    created_at: Date | string
    updated_at: Date | string
    assignees?: assigneesCreateNestedOneWithoutUsersInput
    notifications?: NotificationsCreateNestedManyWithoutUsersInput
    comments?: CommentsCreateNestedManyWithoutUsersInput
  }

  export type UsersUncheckedCreateWithoutTasksInput = {
    id?: string
    email: string
    password: string
    password_digest: string
    active: boolean
    preferences: JsonNullValueInput | InputJsonValue
    last_sign_in_at: Date | string
    created_at: Date | string
    updated_at: Date | string
    assignees?: assigneesUncheckedCreateNestedOneWithoutUsersInput
    notifications?: NotificationsUncheckedCreateNestedManyWithoutUsersInput
    comments?: CommentsUncheckedCreateNestedManyWithoutUsersInput
  }

  export type UsersCreateOrConnectWithoutTasksInput = {
    where: UsersWhereUniqueInput
    create: XOR<UsersCreateWithoutTasksInput, UsersUncheckedCreateWithoutTasksInput>
  }

  export type assigneesCreateWithoutTasksInput = {
    id?: string
    users?: UsersCreateNestedOneWithoutAssigneesInput
    created_at: Date | string
  }

  export type assigneesUncheckedCreateWithoutTasksInput = {
    id?: string
    user_id?: string
    created_at: Date | string
  }

  export type assigneesCreateOrConnectWithoutTasksInput = {
    where: assigneesWhereUniqueInput
    create: XOR<assigneesCreateWithoutTasksInput, assigneesUncheckedCreateWithoutTasksInput>
  }

  export type CommentsCreateWithoutTasksInput = {
    id?: string
    users?: UsersCreateNestedOneWithoutCommentsInput
    target_type: CommentTargetType
    parent_id?: string
    content: string
    created_at: Date | string
    updated_at: Date | string
  }

  export type CommentsUncheckedCreateWithoutTasksInput = {
    id?: string
    owner_id?: string
    target_type: CommentTargetType
    parent_id?: string
    content: string
    created_at: Date | string
    updated_at: Date | string
  }

  export type CommentsCreateOrConnectWithoutTasksInput = {
    where: CommentsWhereUniqueInput
    create: XOR<CommentsCreateWithoutTasksInput, CommentsUncheckedCreateWithoutTasksInput>
  }

  export type CommentsCreateManyTasksInputEnvelope = {
    data: Enumerable<CommentsCreateManyTasksInput>
    skipDuplicates?: boolean
  }

  export type UsersUpsertWithoutTasksInput = {
    update: XOR<UsersUpdateWithoutTasksInput, UsersUncheckedUpdateWithoutTasksInput>
    create: XOR<UsersCreateWithoutTasksInput, UsersUncheckedCreateWithoutTasksInput>
  }

  export type UsersUpdateWithoutTasksInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    password_digest?: StringFieldUpdateOperationsInput | string
    active?: BoolFieldUpdateOperationsInput | boolean
    preferences?: JsonNullValueInput | InputJsonValue
    last_sign_in_at?: DateTimeFieldUpdateOperationsInput | Date | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    assignees?: assigneesUpdateOneWithoutUsersNestedInput
    notifications?: NotificationsUpdateManyWithoutUsersNestedInput
    comments?: CommentsUpdateManyWithoutUsersNestedInput
  }

  export type UsersUncheckedUpdateWithoutTasksInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    password_digest?: StringFieldUpdateOperationsInput | string
    active?: BoolFieldUpdateOperationsInput | boolean
    preferences?: JsonNullValueInput | InputJsonValue
    last_sign_in_at?: DateTimeFieldUpdateOperationsInput | Date | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    assignees?: assigneesUncheckedUpdateOneWithoutUsersNestedInput
    notifications?: NotificationsUncheckedUpdateManyWithoutUsersNestedInput
    comments?: CommentsUncheckedUpdateManyWithoutUsersNestedInput
  }

  export type assigneesUpsertWithoutTasksInput = {
    update: XOR<assigneesUpdateWithoutTasksInput, assigneesUncheckedUpdateWithoutTasksInput>
    create: XOR<assigneesCreateWithoutTasksInput, assigneesUncheckedCreateWithoutTasksInput>
  }

  export type assigneesUpdateWithoutTasksInput = {
    id?: StringFieldUpdateOperationsInput | string
    users?: UsersUpdateOneRequiredWithoutAssigneesNestedInput
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type assigneesUncheckedUpdateWithoutTasksInput = {
    id?: StringFieldUpdateOperationsInput | string
    user_id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CommentsUpsertWithWhereUniqueWithoutTasksInput = {
    where: CommentsWhereUniqueInput
    update: XOR<CommentsUpdateWithoutTasksInput, CommentsUncheckedUpdateWithoutTasksInput>
    create: XOR<CommentsCreateWithoutTasksInput, CommentsUncheckedCreateWithoutTasksInput>
  }

  export type CommentsUpdateWithWhereUniqueWithoutTasksInput = {
    where: CommentsWhereUniqueInput
    data: XOR<CommentsUpdateWithoutTasksInput, CommentsUncheckedUpdateWithoutTasksInput>
  }

  export type CommentsUpdateManyWithWhereWithoutTasksInput = {
    where: CommentsScalarWhereInput
    data: XOR<CommentsUpdateManyMutationInput, CommentsUncheckedUpdateManyWithoutCommentsInput>
  }

  export type UsersCreateWithoutCommentsInput = {
    id?: string
    email: string
    password: string
    password_digest: string
    active: boolean
    preferences: JsonNullValueInput | InputJsonValue
    last_sign_in_at: Date | string
    created_at: Date | string
    updated_at: Date | string
    assignees?: assigneesCreateNestedOneWithoutUsersInput
    tasks?: TasksCreateNestedManyWithoutUsersInput
    notifications?: NotificationsCreateNestedManyWithoutUsersInput
  }

  export type UsersUncheckedCreateWithoutCommentsInput = {
    id?: string
    email: string
    password: string
    password_digest: string
    active: boolean
    preferences: JsonNullValueInput | InputJsonValue
    last_sign_in_at: Date | string
    created_at: Date | string
    updated_at: Date | string
    assignees?: assigneesUncheckedCreateNestedOneWithoutUsersInput
    tasks?: TasksUncheckedCreateNestedManyWithoutUsersInput
    notifications?: NotificationsUncheckedCreateNestedManyWithoutUsersInput
  }

  export type UsersCreateOrConnectWithoutCommentsInput = {
    where: UsersWhereUniqueInput
    create: XOR<UsersCreateWithoutCommentsInput, UsersUncheckedCreateWithoutCommentsInput>
  }

  export type TasksCreateWithoutCommentsInput = {
    id?: string
    title: string
    description: string
    users?: UsersCreateNestedOneWithoutTasksInput
    due_at: Date | string
    created_at: Date | string
    updated_at: Date | string
    state: TaskState
    assignees?: assigneesCreateNestedOneWithoutTasksInput
  }

  export type TasksUncheckedCreateWithoutCommentsInput = {
    id?: string
    title: string
    description: string
    owner_id?: string
    due_at: Date | string
    created_at: Date | string
    updated_at: Date | string
    state: TaskState
    assignees?: assigneesUncheckedCreateNestedOneWithoutTasksInput
  }

  export type TasksCreateOrConnectWithoutCommentsInput = {
    where: TasksWhereUniqueInput
    create: XOR<TasksCreateWithoutCommentsInput, TasksUncheckedCreateWithoutCommentsInput>
  }

  export type UsersUpsertWithoutCommentsInput = {
    update: XOR<UsersUpdateWithoutCommentsInput, UsersUncheckedUpdateWithoutCommentsInput>
    create: XOR<UsersCreateWithoutCommentsInput, UsersUncheckedCreateWithoutCommentsInput>
  }

  export type UsersUpdateWithoutCommentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    password_digest?: StringFieldUpdateOperationsInput | string
    active?: BoolFieldUpdateOperationsInput | boolean
    preferences?: JsonNullValueInput | InputJsonValue
    last_sign_in_at?: DateTimeFieldUpdateOperationsInput | Date | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    assignees?: assigneesUpdateOneWithoutUsersNestedInput
    tasks?: TasksUpdateManyWithoutUsersNestedInput
    notifications?: NotificationsUpdateManyWithoutUsersNestedInput
  }

  export type UsersUncheckedUpdateWithoutCommentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    password_digest?: StringFieldUpdateOperationsInput | string
    active?: BoolFieldUpdateOperationsInput | boolean
    preferences?: JsonNullValueInput | InputJsonValue
    last_sign_in_at?: DateTimeFieldUpdateOperationsInput | Date | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    assignees?: assigneesUncheckedUpdateOneWithoutUsersNestedInput
    tasks?: TasksUncheckedUpdateManyWithoutUsersNestedInput
    notifications?: NotificationsUncheckedUpdateManyWithoutUsersNestedInput
  }

  export type TasksUpsertWithoutCommentsInput = {
    update: XOR<TasksUpdateWithoutCommentsInput, TasksUncheckedUpdateWithoutCommentsInput>
    create: XOR<TasksCreateWithoutCommentsInput, TasksUncheckedCreateWithoutCommentsInput>
  }

  export type TasksUpdateWithoutCommentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    users?: UsersUpdateOneRequiredWithoutTasksNestedInput
    due_at?: DateTimeFieldUpdateOperationsInput | Date | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    state?: EnumTaskStateFieldUpdateOperationsInput | TaskState
    assignees?: assigneesUpdateOneWithoutTasksNestedInput
  }

  export type TasksUncheckedUpdateWithoutCommentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    owner_id?: StringFieldUpdateOperationsInput | string
    due_at?: DateTimeFieldUpdateOperationsInput | Date | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    state?: EnumTaskStateFieldUpdateOperationsInput | TaskState
    assignees?: assigneesUncheckedUpdateOneWithoutTasksNestedInput
  }

  export type TasksCreateWithoutAssigneesInput = {
    id?: string
    title: string
    description: string
    users?: UsersCreateNestedOneWithoutTasksInput
    due_at: Date | string
    created_at: Date | string
    updated_at: Date | string
    state: TaskState
    comments?: CommentsCreateNestedManyWithoutTasksInput
  }

  export type TasksUncheckedCreateWithoutAssigneesInput = {
    id?: string
    title: string
    description: string
    owner_id?: string
    due_at: Date | string
    created_at: Date | string
    updated_at: Date | string
    state: TaskState
    comments?: CommentsUncheckedCreateNestedManyWithoutTasksInput
  }

  export type TasksCreateOrConnectWithoutAssigneesInput = {
    where: TasksWhereUniqueInput
    create: XOR<TasksCreateWithoutAssigneesInput, TasksUncheckedCreateWithoutAssigneesInput>
  }

  export type UsersCreateWithoutAssigneesInput = {
    id?: string
    email: string
    password: string
    password_digest: string
    active: boolean
    preferences: JsonNullValueInput | InputJsonValue
    last_sign_in_at: Date | string
    created_at: Date | string
    updated_at: Date | string
    tasks?: TasksCreateNestedManyWithoutUsersInput
    notifications?: NotificationsCreateNestedManyWithoutUsersInput
    comments?: CommentsCreateNestedManyWithoutUsersInput
  }

  export type UsersUncheckedCreateWithoutAssigneesInput = {
    id?: string
    email: string
    password: string
    password_digest: string
    active: boolean
    preferences: JsonNullValueInput | InputJsonValue
    last_sign_in_at: Date | string
    created_at: Date | string
    updated_at: Date | string
    tasks?: TasksUncheckedCreateNestedManyWithoutUsersInput
    notifications?: NotificationsUncheckedCreateNestedManyWithoutUsersInput
    comments?: CommentsUncheckedCreateNestedManyWithoutUsersInput
  }

  export type UsersCreateOrConnectWithoutAssigneesInput = {
    where: UsersWhereUniqueInput
    create: XOR<UsersCreateWithoutAssigneesInput, UsersUncheckedCreateWithoutAssigneesInput>
  }

  export type TasksUpsertWithoutAssigneesInput = {
    update: XOR<TasksUpdateWithoutAssigneesInput, TasksUncheckedUpdateWithoutAssigneesInput>
    create: XOR<TasksCreateWithoutAssigneesInput, TasksUncheckedCreateWithoutAssigneesInput>
  }

  export type TasksUpdateWithoutAssigneesInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    users?: UsersUpdateOneRequiredWithoutTasksNestedInput
    due_at?: DateTimeFieldUpdateOperationsInput | Date | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    state?: EnumTaskStateFieldUpdateOperationsInput | TaskState
    comments?: CommentsUpdateManyWithoutTasksNestedInput
  }

  export type TasksUncheckedUpdateWithoutAssigneesInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    owner_id?: StringFieldUpdateOperationsInput | string
    due_at?: DateTimeFieldUpdateOperationsInput | Date | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    state?: EnumTaskStateFieldUpdateOperationsInput | TaskState
    comments?: CommentsUncheckedUpdateManyWithoutTasksNestedInput
  }

  export type UsersUpsertWithoutAssigneesInput = {
    update: XOR<UsersUpdateWithoutAssigneesInput, UsersUncheckedUpdateWithoutAssigneesInput>
    create: XOR<UsersCreateWithoutAssigneesInput, UsersUncheckedCreateWithoutAssigneesInput>
  }

  export type UsersUpdateWithoutAssigneesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    password_digest?: StringFieldUpdateOperationsInput | string
    active?: BoolFieldUpdateOperationsInput | boolean
    preferences?: JsonNullValueInput | InputJsonValue
    last_sign_in_at?: DateTimeFieldUpdateOperationsInput | Date | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    tasks?: TasksUpdateManyWithoutUsersNestedInput
    notifications?: NotificationsUpdateManyWithoutUsersNestedInput
    comments?: CommentsUpdateManyWithoutUsersNestedInput
  }

  export type UsersUncheckedUpdateWithoutAssigneesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    password_digest?: StringFieldUpdateOperationsInput | string
    active?: BoolFieldUpdateOperationsInput | boolean
    preferences?: JsonNullValueInput | InputJsonValue
    last_sign_in_at?: DateTimeFieldUpdateOperationsInput | Date | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    tasks?: TasksUncheckedUpdateManyWithoutUsersNestedInput
    notifications?: NotificationsUncheckedUpdateManyWithoutUsersNestedInput
    comments?: CommentsUncheckedUpdateManyWithoutUsersNestedInput
  }

  export type TasksCreateManyUsersInput = {
    id?: string
    title: string
    description: string
    due_at: Date | string
    created_at: Date | string
    updated_at: Date | string
    state: TaskState
  }

  export type NotificationsCreateManyUsersInput = {
    id?: string
    action_id?: string
    readed_at: Date | string
  }

  export type CommentsCreateManyUsersInput = {
    id?: string
    target_id?: string
    target_type: CommentTargetType
    parent_id?: string
    content: string
    created_at: Date | string
    updated_at: Date | string
  }

  export type TasksUpdateWithoutUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    due_at?: DateTimeFieldUpdateOperationsInput | Date | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    state?: EnumTaskStateFieldUpdateOperationsInput | TaskState
    assignees?: assigneesUpdateOneWithoutTasksNestedInput
    comments?: CommentsUpdateManyWithoutTasksNestedInput
  }

  export type TasksUncheckedUpdateWithoutUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    due_at?: DateTimeFieldUpdateOperationsInput | Date | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    state?: EnumTaskStateFieldUpdateOperationsInput | TaskState
    assignees?: assigneesUncheckedUpdateOneWithoutTasksNestedInput
    comments?: CommentsUncheckedUpdateManyWithoutTasksNestedInput
  }

  export type TasksUncheckedUpdateManyWithoutTasksInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    due_at?: DateTimeFieldUpdateOperationsInput | Date | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    state?: EnumTaskStateFieldUpdateOperationsInput | TaskState
  }

  export type NotificationsUpdateWithoutUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    actions?: ActionsUpdateOneRequiredWithoutNotificationsNestedInput
    readed_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationsUncheckedUpdateWithoutUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    action_id?: StringFieldUpdateOperationsInput | string
    readed_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationsUncheckedUpdateManyWithoutNotificationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    action_id?: StringFieldUpdateOperationsInput | string
    readed_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CommentsUpdateWithoutUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    tasks?: TasksUpdateOneRequiredWithoutCommentsNestedInput
    target_type?: EnumCommentTargetTypeFieldUpdateOperationsInput | CommentTargetType
    parent_id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CommentsUncheckedUpdateWithoutUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    target_id?: StringFieldUpdateOperationsInput | string
    target_type?: EnumCommentTargetTypeFieldUpdateOperationsInput | CommentTargetType
    parent_id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CommentsUncheckedUpdateManyWithoutCommentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    target_id?: StringFieldUpdateOperationsInput | string
    target_type?: EnumCommentTargetTypeFieldUpdateOperationsInput | CommentTargetType
    parent_id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationsCreateManyActionsInput = {
    id?: string
    user_id?: string
    readed_at: Date | string
  }

  export type NotificationsUpdateWithoutActionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    users?: UsersUpdateOneRequiredWithoutNotificationsNestedInput
    readed_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationsUncheckedUpdateWithoutActionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    user_id?: StringFieldUpdateOperationsInput | string
    readed_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CommentsCreateManyTasksInput = {
    id?: string
    owner_id?: string
    target_type: CommentTargetType
    parent_id?: string
    content: string
    created_at: Date | string
    updated_at: Date | string
  }

  export type CommentsUpdateWithoutTasksInput = {
    id?: StringFieldUpdateOperationsInput | string
    users?: UsersUpdateOneRequiredWithoutCommentsNestedInput
    target_type?: EnumCommentTargetTypeFieldUpdateOperationsInput | CommentTargetType
    parent_id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CommentsUncheckedUpdateWithoutTasksInput = {
    id?: StringFieldUpdateOperationsInput | string
    owner_id?: StringFieldUpdateOperationsInput | string
    target_type?: EnumCommentTargetTypeFieldUpdateOperationsInput | CommentTargetType
    parent_id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}