datasource db {
  provider = "postgresql"
  url      = "postgres://user@localhost:5432"
}
generator client {
  provider = "prisma-client-js"
}

generator typegraphql {
  provider        = "typegraphql-prisma"
  output          = "../prisma/generated/type-graphql"
  emitIdAsIDType  = true
  simpleResolvers = true
}

model Users {
  id              String          @id @default(cuid())
  email           String          @unique
  /// @TypeGraphQL.omit(output: true)
  password        String
  /// @TypeGraphQL.omit(output: true, input: true)
  password_digest String
  active          Boolean
  preferences     Json
  last_sign_in_at DateTime
  created_at      DateTime
  updated_at      DateTime
  assignees       assignees?
  tasks           Tasks[]
  notifications   Notifications[]
  comments        Comments[]
}

enum ActionTargetType {
  TASK
  COMMENT
}

enum ActionGroup {
  EDIT
  DELETE
  CREATE
}

enum ActionName {
  TASK_CREATE
  TASK_ASSIGN
  TASK_STATE_PENDING
  TASK_STATE_INPROGRESS
  TASK_STATE_DONE
  COMMENT_CREATE
  COMMENT_REPLY
}

model Actions {
  id            String           @id @default(cuid())
  group         ActionGroup
  name          ActionName
  target_id     String           @default(cuid())
  target_type   ActionTargetType
  notifications Notifications[]
}

model Notifications {
  id        String   @id @default(cuid())
  users     Users    @relation(fields: [user_id], references: [id])
  user_id   String   @default(cuid())
  actions   Actions  @relation(fields: [action_id], references: [id])
  action_id String   @default(cuid())
  readed_at DateTime
}

enum TaskState {
  PENDING
  IN_PROGRESS
  DONE
}

model Tasks {
  id          String     @id @default(cuid())
  title       String
  description String
  users       Users      @relation(fields: [owner_id], references: [id])
  owner_id    String     @default(cuid())
  due_at      DateTime
  created_at  DateTime
  updated_at  DateTime
  state       TaskState
  assignees   assignees?
  comments    Comments[]
}

enum CommentTargetType {
  COMMENT_NEW
  COMMENT_REPLY
}

model Comments {
  id          String            @id @default(cuid())
  users       Users             @relation(fields: [owner_id], references: [id])
  owner_id    String            @default(cuid())
  tasks       Tasks             @relation(fields: [target_id], references: [id])
  target_id   String            @default(cuid())
  target_type CommentTargetType
  parent_id   String            @default(cuid())
  content     String
  created_at  DateTime
  updated_at  DateTime
}

model assignees {
  id         String   @id @default(cuid())
  tasks      Tasks    @relation(fields: [task_id], references: [id])
  task_id    String   @unique @default(cuid())
  users      Users    @relation(fields: [user_id], references: [id])
  user_id    String   @unique @default(cuid())
  created_at DateTime
}
