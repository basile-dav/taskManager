/// <reference types="node" />
import { Platform } from './platforms';
export declare type Arch = 'x32' | 'x64' | 'arm' | 'arm64' | 's390' | 's390x' | 'mipsel' | 'ia32' | 'mips' | 'ppc' | 'ppc64';
export declare type GetOSResult = {
    platform: NodeJS.Platform;
    arch: Arch;
    distro?: 'rhel' | 'debian' | 'musl' | 'arm' | 'nixos' | 'freebsd11' | 'freebsd12' | 'freebsd13';
    /**
     * Starting from version 3.0, OpenSSL is basically adopting semver, and will be API and ABI compatible within a major version.
     */
    libssl?: '1.0.x' | '1.1.x' | '3.0.x';
};
export declare function getos(): Promise<GetOSResult>;
export declare function parseDistro(input: string): GetOSResult['distro'];
export declare function resolveDistro(): Promise<undefined | GetOSResult['distro']>;
/**
 * Parse the OpenSSL version from the output of the openssl binary, e.g.
 * "OpenSSL 3.0.2 15 Mar 2022 (Library: OpenSSL 3.0.2 15 Mar 2022)" -> "3.0.x"
 */
export declare function parseOpenSSLVersion(input: string): GetOSResult['libssl'] | undefined;
/**
 * Parse the OpenSSL version from the output of the libssl.so file, e.g.
 * "libssl.so.3" -> "3.0.x"
 */
export declare function parseLibSSLVersion(input: string): GetOSResult['libssl'] | undefined;
declare type GetOpenSSLVersionParams = {
    arch: Arch;
    distro: GetOSResult['distro'];
};
/**
 * On Linux, returns the OpenSSL version excluding the patch version, e.g. "1.1.x".
 * Reading the version from the libssl.so file is more reliable than reading it from the openssl binary.
 * This function never throws.
 */
export declare function getSSLVersion(args: GetOpenSSLVersionParams): Promise<GetOSResult['libssl'] | undefined>;
export declare function getPlatform(): Promise<Platform>;
export {};
