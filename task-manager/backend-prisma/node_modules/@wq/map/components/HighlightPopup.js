import React from 'react';
import { useComponents, useViewComponents, usePluginReducer } from '@wq/react';
import PropTypes from 'prop-types';
export default function HighlightPopup() {
    const { Popup, View, ScrollView, IconButton } = useComponents(),
        [{ highlight }, { clearHighlight }] = usePluginReducer('map'),
        features = (highlight && highlight.features) || [];
    return /*#__PURE__*/ React.createElement(
        View,
        {
            style: {
                position: 'absolute',
                bottom: 0
            }
        },
        /*#__PURE__*/ React.createElement(
            Popup,
            {
                open: features.length > 0,
                onClose: clearHighlight,
                variant: 'persistent'
            },
            /*#__PURE__*/ React.createElement(IconButton, {
                icon: 'close',
                onClick: clearHighlight,
                style: {
                    position: 'absolute',
                    right: 0,
                    top: 0
                }
            }),
            /*#__PURE__*/ React.createElement(
                ScrollView,
                {
                    style: {
                        maxHeight: '33vh'
                    }
                },
                features.map(feature =>
                    /*#__PURE__*/ React.createElement(PopupContent, {
                        key: feature.id,
                        feature: feature
                    })
                )
            )
        )
    );
}

function PopupContent({ feature }) {
    const popupName = feature.popup
            ? `${feature.popup}-popup`
            : 'default-popup',
        views = useViewComponents();
    let View = views[popupName];

    if (!View) {
        console.warn(`No popup view named ${popupName}, using default.`);
        View = views['default-popup'];

        if (!View) {
            throw new Error('No popup view named default-popup!');
        }
    }

    return /*#__PURE__*/ React.createElement(View, {
        feature: feature
    });
}

PopupContent.propTypes = {
    feature: PropTypes.object
};
