import React from 'react';
import {
    RouteContext,
    useRenderContext,
    useRouteInfo,
    useComponents,
    useViewComponents,
    usePluginContent
} from './hooks';
import PropTypes from 'prop-types';
const HTML = '@@HTML',
    // @wq/router
    CURRENT = '@@CURRENT'; // @wq/router

export default function App({ route }) {
    if (!route) {
        route = CURRENT;
    }

    return /*#__PURE__*/ React.createElement(
        RouteContext.Provider,
        {
            value: {
                name: route
            }
        },
        /*#__PURE__*/ React.createElement(AppLayout, {
            showHeader: route === CURRENT
        })
    );
}
App.propTypes = {
    route: PropTypes.string
};

function AppLayout({ showHeader }) {
    const context = useRenderContext(),
        routeInfo = useRouteInfo(),
        views = useViewComponents(),
        PluginContent = usePluginContent(),
        { Container, Header, Footer, Main, Spinner } = useComponents();
    let name;

    if (routeInfo.pending) {
        name = 'loading';
    } else if (context[HTML]) {
        name = 'server';
    } else if (views[routeInfo.template]) {
        name = routeInfo.template;
    } else if (
        typeof routeInfo.template === 'string' &&
        views[routeInfo.template.replace('_', '-')]
    ) {
        name = routeInfo.template.replace('_', '-');
    } else if (views[routeInfo.name]) {
        name = routeInfo.name;
    } else if (routeInfo.mode) {
        const { page, mode } = routeInfo,
            names = [
                `${page}_${mode}`,
                `${page}-${mode}`,
                `default-${mode}`,
                'default'
            ];
        name = names.find(name => views[name]);
    } else {
        name = 'default';
    }

    const View = views[name];

    if (!View) {
        return /*#__PURE__*/ React.createElement(
            Container,
            null,
            `Missing ${name} view!`,
            /*#__PURE__*/ React.createElement(Spinner, null)
        );
    }

    if (View.fullscreen) {
        return /*#__PURE__*/ React.createElement(
            Container,
            null,
            /*#__PURE__*/ React.createElement(View, null),
            /*#__PURE__*/ React.createElement(PluginContent, null),
            /*#__PURE__*/ React.createElement(Spinner, null)
        );
    } else {
        return /*#__PURE__*/ React.createElement(
            Container,
            null,
            showHeader && /*#__PURE__*/ React.createElement(Header, null),
            /*#__PURE__*/ React.createElement(
                Main,
                null,
                /*#__PURE__*/ React.createElement(View, null),
                /*#__PURE__*/ React.createElement(PluginContent, null)
            ),
            /*#__PURE__*/ React.createElement(Footer, null),
            /*#__PURE__*/ React.createElement(Spinner, null)
        );
    }
}

AppLayout.propTypes = {
    showHeader: PropTypes.bool
};
