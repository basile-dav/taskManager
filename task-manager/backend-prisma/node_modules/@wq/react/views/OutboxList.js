import React from 'react';
import {
    useApp,
    useReverse,
    useRouteTitle,
    useComponents,
    useOutbox
} from '../hooks';
import PropTypes from 'prop-types';
export default function OutboxList({ modelConf }) {
    const app = useApp(),
        reverse = useReverse(),
        routeTitle = useRouteTitle(),
        allItems = useOutbox(),
        items = modelConf
            ? app.outbox.filterUnsynced(allItems, modelConf)
            : allItems,
        {
            Message,
            List,
            ListItem,
            ListItemLink,
            ListSubheader,
            ScrollView,
            HorizontalView,
            Button
        } = useComponents();
    const empty = !items.length;

    function getLink(item) {
        if (item.synced) {
            // TODO: Link to model detail or edit page?
            return null;
        } else {
            return reverse('outbox_edit', item.id);
        }
    }

    function getIcon(item) {
        if (item.synced) {
            return 'success';
        } else if (item.error) {
            return 'error';
        } else {
            return 'pending';
        }
    }

    function getTitle(item) {
        if (item.options.modelConf && !modelConf) {
            const pageName = routeTitle(
                `${item.options.modelConf.name}_detail`
            );
            return `${pageName}: ${item.label}`;
        } else {
            return item.label;
        }
    }

    function getStatus(item) {
        if (item.synced) {
            return 'SYNC_SUCCESS';
        } else if (item.error) {
            if (typeof item.error === 'string') {
                return item.error;
            } else {
                return 'SYNC_ERROR';
            }
        } else {
            return null;
        }
    }

    function OutboxItems() {
        return /*#__PURE__*/ React.createElement(
            React.Fragment,
            null,
            empty &&
                /*#__PURE__*/ React.createElement(
                    ListItem,
                    null,
                    /*#__PURE__*/ React.createElement(Message, {
                        id: 'OUTBOX_IS_EMPTY'
                    })
                ),
            items.map(item => {
                const link = getLink(item),
                    ListItemOrLink = link ? ListItemLink : ListItem;
                return /*#__PURE__*/ React.createElement(
                    ListItemOrLink,
                    {
                        key: item.id,
                        to: link,
                        icon: getIcon(item),
                        description: /*#__PURE__*/ React.createElement(
                            Message,
                            {
                                id: getStatus(item)
                            }
                        )
                    },
                    getTitle(item)
                );
            })
        );
    }

    if (modelConf) {
        return /*#__PURE__*/ React.createElement(
            List,
            null,
            /*#__PURE__*/ React.createElement(
                ListSubheader,
                null,
                /*#__PURE__*/ React.createElement(Message, {
                    id: 'UNSYNCED_ITEMS'
                })
            ),
            /*#__PURE__*/ React.createElement(OutboxItems, null)
        );
    } else {
        return /*#__PURE__*/ React.createElement(
            React.Fragment,
            null,
            /*#__PURE__*/ React.createElement(
                ScrollView,
                null,
                /*#__PURE__*/ React.createElement(
                    List,
                    null,
                    /*#__PURE__*/ React.createElement(OutboxItems, null)
                )
            ),
            !empty &&
                /*#__PURE__*/ React.createElement(
                    HorizontalView,
                    null,
                    /*#__PURE__*/ React.createElement(
                        Button,
                        {
                            onClick: () => app.emptyOutbox(true)
                        },
                        /*#__PURE__*/ React.createElement(Message, {
                            id: 'EMPTY_OUTBOX'
                        })
                    ),
                    /*#__PURE__*/ React.createElement(
                        Button,
                        {
                            onClick: () => app.retryAll()
                        },
                        /*#__PURE__*/ React.createElement(Message, {
                            id: 'RETRY_ALL'
                        })
                    )
                )
        );
    }
}
OutboxList.propTypes = {
    modelConf: PropTypes.object
};
